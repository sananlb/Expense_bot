"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç –≤ —Å—Ç–∏–ª–µ –¥–Ω–µ–≤–Ω–∏–∫–∞
"""
from typing import List, Dict, Any
from datetime import date, datetime
from decimal import Decimal
from . import get_text


def format_expenses_diary_style(
    expenses: List[Any],
    today: date = None,
    max_expenses: int = 100,
    show_warning: bool = True,
    lang: str = 'ru'
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç –≤ —Å—Ç–∏–ª–µ –¥–Ω–µ–≤–Ω–∏–∫–∞
    
    Args:
        expenses: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Expense
        today: –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "–°–µ–≥–æ–¥–Ω—è")
        max_expenses: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞
        show_warning: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ç—Ä–∞—Ç–∞–º–∏
    """
    if not expenses:
        return f"{get_text('diary_title', lang)}\n\n{get_text('no_expenses_found', lang)}"
    
    if today is None:
        today = date.today()
    
    text = f"{get_text('diary_title', lang)}\n\n"
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ç
    total_count = len(expenses)
    is_limited = total_count > max_expenses
    expenses_to_show = expenses[:max_expenses]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–∞—Ç—ã –ø–æ –¥–∞—Ç–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
    expenses_to_show = sorted(
        expenses_to_show, 
        key=lambda x: (x.expense_date, x.expense_time or x.created_at)
    )
    
    current_date = None
    day_total = {}  # –î–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º—ã –ø–æ –≤–∞–ª—é—Ç–∞–º –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    day_expenses = []  # –°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    all_days_data = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º –¥–Ω—è–º
    
    for expense in expenses_to_show:
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
        if expense.expense_date != current_date:
            if current_date is not None and day_expenses:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
                all_days_data.append({
                    'date': current_date,
                    'expenses': day_expenses,
                    'totals': day_total
                })
            
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å
            current_date = expense.expense_date
            day_total = {}
            day_expenses = []
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—É–º–º—É
        if expense.expense_time:
            time_str = expense.expense_time.strftime('%H:%M')
        else:
            time_str = expense.created_at.strftime('%H:%M') if expense.created_at else '00:00'
        
        description = expense.description or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        if len(description) > 30:
            description = description[:27] + "..."
        
        currency = expense.currency or 'RUB'
        amount = float(expense.amount)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É–º–º–µ –¥–Ω—è
        if currency not in day_total:
            day_total[currency] = 0
        day_total[currency] += amount
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –¥–Ω—è
        day_expenses.append({
            'time': time_str,
            'description': description,
            'amount': amount,
            'currency': currency
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
    if current_date is not None and day_expenses:
        all_days_data.append({
            'date': current_date,
            'expenses': day_expenses,
            'totals': day_total
        })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤—ã–≤–æ–¥–∞
    for day_data in all_days_data:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        if day_data['date'] == today:
            date_str = "–°–µ–≥–æ–¥–Ω—è"
        else:
            months_ru = {
                1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
                5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
                9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
            }
            day = day_data['date'].day
            month_name = months_ru.get(day_data['date'].month, day_data['date'].strftime('%B'))
            date_str = f"{day} {month_name}"
        
        text += f"\n<b>üìÖ {date_str}</b>\n"
        
        # –í—ã–≤–æ–¥–∏–º —Ç—Ä–∞—Ç—ã –¥–Ω—è
        for expense in day_data['expenses']:
            amount_str = f"{expense['amount']:,.0f}".replace(',', ' ')
            if expense['currency'] == 'RUB':
                amount_str += ' ‚ÇΩ'
            elif expense['currency'] == 'USD':
                amount_str += ' $'
            elif expense['currency'] == 'EUR':
                amount_str += ' ‚Ç¨'
            else:
                amount_str += f" {expense['currency']}"
            
            text += f"  {expense['time']} ‚Äî {expense['description']} {amount_str}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥ –¥–Ω—è
        if day_data['totals']:
            text += "  üí∞ <b>–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:</b> "
            totals_list = []
            for currency, total in day_data['totals'].items():
                total_str = f"{total:,.0f}".replace(',', ' ')
                currency_symbol = {'RUB': '‚ÇΩ', 'USD': '$', 'EUR': '‚Ç¨'}.get(currency, currency)
                totals_list.append(f"{total_str} {currency_symbol}")
            text += ", ".join(totals_list) + "\n"
    
    # –ï—Å–ª–∏ –±—ã–ª–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    if is_limited and show_warning:
        text += "\n  ...\n  ...\n"
        text += f"\n<i>üí° –Ø –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ {max_expenses} –∑–∞–ø–∏—Å–µ–π –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑</i>"
    
    return text


def format_expenses_list(
    expenses: List[Any],
    period_description: str = None,
    max_expenses: int = 100,
    lang: str = 'ru'
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –°–ü–ò–°–û–ö —Ç—Ä–∞—Ç –≤ —Å—Ç–∏–ª–µ –¥–Ω–µ–≤–Ω–∏–∫–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç.
    –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–≤–æ–¥–æ–∫, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Ç.–¥.
    
    Args:
        expenses: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Expense
        period_description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∑–∞ –∏—é–ª—å")
        max_expenses: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ç
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç—Ä–∞—Ç
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞
    text = format_expenses_diary_style(expenses, max_expenses=max_expenses, lang=lang)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if period_description and expenses:
        text = text.replace(
            get_text('diary_title', lang),
            f"üìã <b>–¢—Ä–∞—Ç—ã {period_description}</b>"
        )
    
    return text


def format_expenses_from_dict_list(
    expenses_data: List[Dict[str, Any]],
    title: str = None,
    subtitle: str = None,
    max_expenses: int = 100,
    show_warning: bool = None,
    lang: str = 'ru'
) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π –≤ —Å—Ç–∏–ª–µ –¥–Ω–µ–≤–Ω–∏–∫–∞.
    
    Args:
        expenses_data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–∞—Ç
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞
        subtitle: –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í—Å–µ–≥–æ: 100 —Ç—Ä–∞—Ç –Ω–∞ —Å—É–º–º—É 50000 ‚ÇΩ")
        max_expenses: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞
        show_warning: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Å—Ç–∏–ª–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ (–±–µ–∑ HTML —Ç–µ–≥–æ–≤)
    """
    if title is None:
        title = get_text('expense_list_title', lang)
    
    if not expenses_data:
        return f"{title}\n\n–¢—Ä–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    
    from datetime import datetime
    from types import SimpleNamespace
    import re
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –≤ –æ–±—ä–µ–∫—Ç—ã-–∑–∞–≥–ª—É—à–∫–∏
    expense_objects = []
    for exp_data in expenses_data[:max_expenses]:
        expense_obj = SimpleNamespace()
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_str = exp_data.get('date', '2024-01-01')
        try:
            expense_obj.expense_date = datetime.fromisoformat(date_str).date()
        except:
            expense_obj.expense_date = datetime.now().date()
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        time_str = exp_data.get('time', '')
        if time_str:
            try:
                expense_obj.expense_time = datetime.strptime(time_str, '%H:%M').time()
            except:
                expense_obj.expense_time = None
        else:
            expense_obj.expense_time = None
        
        expense_obj.created_at = datetime.now()
        expense_obj.description = exp_data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
        expense_obj.amount = exp_data.get('amount', 0)
        expense_obj.currency = exp_data.get('currency', 'RUB')
        
        expense_objects.append(expense_obj)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
    if show_warning is None:
        show_warning = len(expenses_data) > max_expenses
    
    result = format_expenses_diary_style(
        expense_objects,
        max_expenses=max_expenses,
        show_warning=show_warning
    )
    
    # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    full_title = f"{title}"
    if subtitle:
        full_title += f"\n<i>{subtitle}</i>"
    
    result = result.replace(
        get_text('diary_title', lang),
        f"<b>{full_title}</b>"
    )
    
    # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    result = re.sub(r'<[^>]+>', '', result)
    
    return result


def is_list_expenses_request(text: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–Ω–Ω–æ –°–ü–ò–°–û–ö —Ç—Ä–∞—Ç,
    –∞ –Ω–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–ª–∏ —Å–≤–æ–¥–∫—É
    
    Args:
        text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        True –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç, False –µ—Å–ª–∏ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É/—Å–≤–æ–¥–∫—É
    """
    text_lower = text.lower()
    
    # –§—Ä–∞–∑—ã, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å –°–ü–ò–°–ö–ê —Ç—Ä–∞—Ç
    list_keywords = [
        '—Å–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç', '—Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤',
        '–≤—Å–µ —Ç—Ä–∞—Ç—ã', '–≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã',
        '—á—Ç–æ –∫—É–ø–∏–ª', '—á—Ç–æ –ø–æ–∫—É–ø–∞–ª',
        '–Ω–∞ —á—Ç–æ —Ç—Ä–∞—Ç–∏–ª', '–Ω–∞ —á—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª',
        '–¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞—Ç', '–¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤',
        '–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ç—Ä–∞—Ç', '–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤',
        '–ø–µ—Ä–µ—á–µ–Ω—å —Ç—Ä–∞—Ç', '–ø–µ—Ä–µ—á–µ–Ω—å —Ä–∞—Å—Ö–æ–¥–æ–≤'
    ]
    
    # –§—Ä–∞–∑—ã, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å –°–¢–ê–¢–ò–°–¢–ò–ö–ò/–°–í–û–î–ö–ò
    summary_keywords = [
        '—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª', '—Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ',
        '–æ–±—â–∞—è —Å—É–º–º–∞', '–∏—Ç–æ–≥–æ',
        '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Å–≤–æ–¥–∫–∞',
        '–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        '–∞–Ω–∞–ª–∏–∑', '–æ—Ç—á–µ—Ç',
        '–±–æ–ª—å—à–µ –≤—Å–µ–≥–æ', '–º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    has_list_keyword = any(keyword in text_lower for keyword in list_keywords)
    has_summary_keyword = any(keyword in text_lower for keyword in summary_keywords)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ list keywords - —ç—Ç–æ –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞
    # –ï—Å–ª–∏ –µ—Å—Ç—å summary keywords - —ç—Ç–æ –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    # –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–∏–π - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if has_list_keyword and not has_summary_keyword:
        return True
    
    return False