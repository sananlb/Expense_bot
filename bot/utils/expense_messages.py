"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö
"""
from datetime import date
from typing import Dict, Any, Optional
from ..services.expense import get_today_summary
from ..utils.formatters import format_currency


async def format_expense_added_message(
    expense,
    category,
    cashback_text: str = "",
    confidence_text: str = "",
    similar_expense: bool = False,
    reused_from_last: bool = False,
    is_recurring: bool = False
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º —Ä–∞—Å—Ö–æ–¥–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–º –∑–∞ –¥–µ–Ω—å
    
    Args:
        expense: –û–±—ä–µ–∫—Ç —Ä–∞—Å—Ö–æ–¥–∞
        category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞
        cashback_text: –¢–µ–∫—Å—Ç –æ –∫–µ—à–±—ç–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        confidence_text: –¢–µ–∫—Å—Ç –æ–± —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ AI (–µ—Å–ª–∏ –µ—Å—Ç—å)
        similar_expense: –§–ª–∞–≥, —á—Ç–æ —Å—É–º–º–∞ –≤–∑—è—Ç–∞ –∏–∑ –ø–æ—Ö–æ–∂–µ–π —Ç—Ä–∞—Ç—ã
        reused_from_last: –§–ª–∞–≥, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞—Ç—ã
        is_recurring: –§–ª–∞–≥, —á—Ç–æ —ç—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ö–æ–¥–µ
    currency = expense.currency or 'RUB'
    amount_text = format_currency(expense.amount, currency)
    
    # –î–µ–ª–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∂–∏—Ä–Ω—ã–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã (U+00A0) –∏ —Å–∏–º–≤–æ–ª –Ω—É–ª–µ–≤–æ–π —à–∏—Ä–∏–Ω—ã (U+200B)
    invisible_padding = "\u200B" * 20  # –°–∏–º–≤–æ–ª—ã –Ω—É–ª–µ–≤–æ–π —à–∏—Ä–∏–Ω—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    message = ""
    if is_recurring:
        message = "üîÑ <b>–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂</b>\n\n"
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å [–†–µ–≥—É–ª—è—Ä–Ω—ã–π] –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    description = expense.description
    if description.startswith("[–†–µ–≥—É–ª—è—Ä–Ω—ã–π] "):
        description = description.replace("[–†–µ–≥—É–ª—è—Ä–Ω—ã–π] ", "")
    
    message += f"‚úÖ <b>{description}</b>{invisible_padding}\n\n"
    message += f"üí∞ {amount_text}{cashback_text}\n"
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∫–æ–Ω–∫–∞ —É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë —Å –ø—Ä–æ–±–µ–ª–æ–º, –∏–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if category.icon:
        message += f"{category.icon} {category.name}"
    else:
        message += category.name
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if confidence_text:
        message += confidence_text
    
    if similar_expense or reused_from_last:
        message += "\n\n<i>üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ—Ö–æ–∂–µ–π —Ç—Ä–∞—Ç—ã</i>"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    try:
        today_summary = await get_today_summary(expense.profile.telegram_id)
        
        if today_summary and today_summary.get('currency_totals'):
            message += "\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            message += "\nüí∏ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è:</b>"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–∞–ª—é—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∏ —Ç—Ä–∞—Ç—ã
            currency_totals = today_summary.get('currency_totals', {})
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
            user_currency = expense.profile.currency or 'RUB'
            sorted_currencies = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É –ø–µ—Ä–≤–æ–π, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–∞—Ç—ã
            if user_currency in currency_totals:
                sorted_currencies.append(user_currency)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã
            for curr in sorted(currency_totals.keys()):
                if curr not in sorted_currencies:
                    sorted_currencies.append(curr)
            
            # –í—ã–≤–æ–¥–∏–º —Å—É–º–º—ã –ø–æ –≤–∞–ª—é—Ç–∞–º
            for curr in sorted_currencies:
                amount = currency_totals[curr]
                if amount > 0:
                    formatted = format_currency(amount, curr)
                    # –í—ã–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É
                    if curr == user_currency:
                        message += f"\n‚Ä¢ {formatted}"
                    else:
                        message += f"\n‚Ä¢ {formatted}"
    
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É, –ø—Ä–æ—Å—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"Error getting today summary: {e}")
    
    return message