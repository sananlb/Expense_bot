"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –≤ —Å—Ç–∏–ª–µ –¥–Ω–µ–≤–Ω–∏–∫–∞
"""
from typing import List, Dict, Any
from datetime import date, datetime
from decimal import Decimal
from . import get_text
from .category_helpers import get_category_display_name


def format_incomes_diary_style(
    incomes: List[Any],
    today: date = None,
    max_incomes: int = 100,
    show_warning: bool = True,
    lang: str = 'ru',
    title: str = None
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤ –≤ —Å—Ç–∏–ª–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ç—Ä–∞—Ç–∞–º)
    
    Args:
        incomes: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Income
        today: –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "–°–µ–≥–æ–¥–Ω—è")
        max_incomes: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ö–æ–¥–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞
        show_warning: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ
        lang: –Ø–∑—ã–∫
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–æ—Ö–æ–¥–∞–º–∏
    """
    if not incomes:
        if not title:
            title = f"üí∞ {get_text('income_diary', lang)}"
        return f"{title}\n\n{get_text('no_incomes_found', lang)}"

    if today is None:
        today = date.today()

    if not title:
        title = f"üí∞ {get_text('income_diary', lang)}"
    
    text = f"{title}\n\n"
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ö–æ–¥–æ–≤
    total_count = len(incomes)
    is_limited = total_count > max_incomes
    incomes_to_show = incomes[:max_incomes]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ—Ö–æ–¥—ã –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è)
    incomes_to_show = sorted(
        incomes_to_show, 
        key=lambda x: (x.income_date, x.created_at),
        reverse=True
    )
    
    current_date = None
    day_total = {}  # –î–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º—ã –ø–æ –≤–∞–ª—é—Ç–∞–º –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    day_incomes = []  # –°–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    all_days_data = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º –¥–Ω—è–º
    
    for income in incomes_to_show:
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
        if income.income_date != current_date:
            if current_date is not None and day_incomes:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
                all_days_data.append({
                    'date': current_date,
                    'incomes': day_incomes,
                    'totals': day_total
                })
            
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å
            current_date = income.income_date
            day_total = {}
            day_incomes = []
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—É–º–º—É
        time_str = income.created_at.strftime('%H:%M') if income.created_at else '00:00'
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
        default_desc = get_category_display_name(income.category, lang) if income.category else get_text('income_default_desc', lang)
        description = income.description or default_desc
        if len(description) > 30:
            description = description[:27] + "..."

        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        category_name = get_category_display_name(income.category, lang) if income.category else get_text('no_category', lang)
        
        currency = 'RUB'  # –î–æ—Ö–æ–¥—ã –≤—Å–µ–≥–¥–∞ –≤ —Ä—É–±–ª—è—Ö
        amount = float(income.amount)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É–º–º–µ –¥–Ω—è
        if currency not in day_total:
            day_total[currency] = 0
        day_total[currency] += amount
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥ –≤ —Å–ø–∏—Å–æ–∫ –¥–Ω—è
        day_incomes.append({
            'time': time_str,
            'description': description,
            'category': category_name,
            'amount': amount,
            'currency': currency
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
    if current_date is not None and day_incomes:
        all_days_data.append({
            'date': current_date,
            'incomes': day_incomes,
            'totals': day_total
        })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤—ã–≤–æ–¥–∞
    for day_data in all_days_data:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        if day_data['date'] == today:
            date_str = get_text('today', lang)
        elif day_data['date'] == today.replace(day=today.day - 1) if today.day > 1 else None:
            date_str = get_text('yesterday', lang)
        else:
            day = day_data['date'].day
            month_num = day_data['date'].month

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ —á–µ—Ä–µ–∑ get_text
            month_keys = [
                'month_january', 'month_february', 'month_march', 'month_april',
                'month_may', 'month_june', 'month_july', 'month_august',
                'month_september', 'month_october', 'month_november', 'month_december'
            ]
            month_name = get_text(month_keys[month_num - 1], lang)

            # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —è–∑—ã–∫–∞
            if lang == 'en':
                date_str = f"{month_name} {day}"
            else:
                date_str = f"{day} {month_name}"
        
        text += f"\n<b>üìÖ {date_str}</b>\n"
        
        # –í—ã–≤–æ–¥–∏–º –¥–æ—Ö–æ–¥—ã –¥–Ω—è
        for income in day_data['incomes']:
            amount_str = f"{income['amount']:,.0f}".replace(',', ' ')
            amount_str += ' ‚ÇΩ'
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–æ—Ö–æ–¥–∞
            text += f"  {income['time']} ‚Äî +{income['description']} {amount_str}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥ –¥–Ω—è
        if day_data['totals']:
            text += f"  üí∞ <b>{get_text('total_for_day', lang)}:</b> "
            totals_list = []
            for currency, total in day_data['totals'].items():
                total_str = f"{total:,.0f}".replace(',', ' ')
                currency_symbol = '‚ÇΩ'
                totals_list.append(f"+{total_str} {currency_symbol}")
            text += ", ".join(totals_list) + "\n"

    # –û–±—â–∏–π –∏—Ç–æ–≥
    grand_total = sum(income.amount for income in incomes_to_show)
    text += f"\n<b>üíé {get_text('total_income', lang)}: {grand_total:,.0f} ‚ÇΩ</b>"
    
    # –ï—Å–ª–∏ –±—ã–ª–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    if is_limited and show_warning:
        text += "\n\n  ...\n"
        text += f"\n<i>üí° –ü–æ–∫–∞–∑–∞–Ω–æ {max_incomes} –∏–∑ {total_count} –∑–∞–ø–∏—Å–µ–π</i>"
    
    return text


def format_incomes_from_dict_list(
    incomes_data: List[Dict[str, Any]],
    title: str = None,
    subtitle: str = None,
    max_incomes: int = 100,
    lang: str = 'ru'
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π (—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–π)

    Args:
        incomes_data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –¥–æ—Ö–æ–¥–∞—Ö
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle: –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        max_incomes: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫–∞–∑–∞
        lang: –Ø–∑—ã–∫

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ
    """
    if not incomes_data:
        default_title = f'üí∞ {get_text("incomes_title", lang)}'
        return f"<b>{title or default_title}</b>\n\n{get_text('no_incomes_found', lang)}"

    from collections import defaultdict

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    total_count = len(incomes_data)
    is_limited = total_count > max_incomes
    incomes_to_show = incomes_data[:max_incomes]

    # –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_parts = []
    default_title = f'üí∞ {get_text("incomes_title", lang)}'
    result_parts.append(f"<b>{title or default_title}</b>")
    if subtitle:
        result_parts.append(f"<i>{subtitle}</i>")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
    grouped_by_date = defaultdict(list)
    for income in incomes_to_show:
        date_str = income.get('date', '')
        grouped_by_date[date_str].append(income)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ (—Å—Ç–∞—Ä—ã–µ –¥–∞—Ç—ã –≤–≤–µ—Ä—Ö—É)
    sorted_dates = sorted(grouped_by_date.keys())

    today = date.today()

    # –ö–ª—é—á–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
    month_keys = [
        'month_january', 'month_february', 'month_march', 'month_april',
        'month_may', 'month_june', 'month_july', 'month_august',
        'month_september', 'month_october', 'month_november', 'month_december'
    ]

    for date_str in sorted_dates:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
        try:
            income_date = datetime.strptime(date_str, '%Y-%m-%d').date()

            if income_date == today:
                formatted_date = get_text('today', lang)
            else:
                day = income_date.day
                month_name = get_text(month_keys[income_date.month - 1], lang)

                # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —è–∑—ã–∫–∞
                if lang == 'en':
                    formatted_date = f"{month_name} {day}"
                else:
                    formatted_date = f"{day} {month_name}"
        except:
            formatted_date = date_str

        result_parts.append(f"\n<b>üìÖ {formatted_date}</b>")

        day_total = 0
        for income in grouped_by_date[date_str]:
            time_str = income.get('time', '00:00')
            amount = income.get('amount', 0)
            description = income.get('description', get_text('income_default_desc', lang))

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É
            amount_str = f"{amount:,.0f}".replace(',', ' ')

            # –î–æ—Ö–æ–¥—ã –¥–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–º–∏ (–∫–∞–∫ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ)
            result_parts.append(f"  {time_str} ‚Äî <b>{description}</b> <b>+{amount_str} ‚ÇΩ</b>")
            day_total += amount

        # –ò—Ç–æ–≥ –∑–∞ –¥–µ–Ω—å
        day_total_str = f"{day_total:,.0f}".replace(',', ' ')
        result_parts.append(f"  üí∞ <b>{get_text('total_for_day', lang)}:</b> +{day_total_str} ‚ÇΩ")

    # –ï—Å–ª–∏ –±—ã–ª–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
    if is_limited:
        result_parts.append(f"\n‚ö†Ô∏è <i>–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ {max_incomes} –¥–æ—Ö–æ–¥–æ–≤</i>")

    return "\n".join(result_parts)