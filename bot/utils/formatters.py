"""
–£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
"""
from typing import Dict, List, Optional, Union
from decimal import Decimal
from datetime import datetime, date
from bot.utils.language import get_text


def format_currency(amount: Union[float, Decimal, int], currency: str = 'RUB') -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã —Å –≤–∞–ª—é—Ç–æ–π
    
    Args:
        amount: –°—É–º–º–∞
        currency: –ö–æ–¥ –≤–∞–ª—é—Ç—ã
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    # –°–ª–æ–≤–∞—Ä—å —Å–∏–º–≤–æ–ª–æ–≤ –≤–∞–ª—é—Ç
    currency_symbols = {
        'RUB': '‚ÇΩ',
        'USD': '$',
        'EUR': '‚Ç¨',
        'GBP': '¬£',
        'CNY': '¬•',
        'JPY': '¬•',
        'KRW': '‚Ç©',
        'INR': '‚Çπ',
        'BRL': 'R$',
        'CAD': 'C$',
        'AUD': 'A$',
        'CHF': 'Fr',
        'SEK': 'kr',
        'NOK': 'kr',
        'DKK': 'kr',
        'PLN': 'z≈Ç',
        'CZK': 'Kƒç',
        'HUF': 'Ft',
        'TRY': '‚Ç∫',
        'MXN': '$',
        'ARS': '$',
        'CLP': '$',
        'COP': '$',
        'PEN': 'S/',
        'UYU': '$U',
        'ZAR': 'R',
        'THB': '‡∏ø',
        'SGD': 'S$',
        'HKD': 'HK$',
        'TWD': 'NT$',
        'NZD': 'NZ$',
        'PHP': '‚Ç±',
        'IDR': 'Rp',
        'MYR': 'RM',
        'VND': '‚Ç´',
        'KZT': '‚Ç∏',
        'UAH': '‚Ç¥',
        'BYN': 'Br',
        'AZN': '‚Çº',
        'GEL': '‚Çæ',
        'AMD': '÷è',
        'MDL': 'L',
        'RON': 'lei',
        'BGN': '–ª–≤',
        'HRK': 'kn',
        'RSD': '–¥–∏–Ω',
        'ISK': 'kr',
        'ILS': '‚Ç™',
        'EGP': 'E¬£',
        'MAD': 'DH',
        'AED': 'AED',
        'SAR': 'SAR',
        'QAR': 'QR',
        'OMR': 'OMR',
        'KWD': 'KD',
        'BHD': 'BD',
        'JOD': 'JD',
        'LBP': 'LL',
        'ALL': 'L',
        'MKD': '–¥–µ–Ω',
        'BAM': 'KM',
        'DZD': 'DA',
        'TND': 'DT',
        'LYD': 'LD',
        'NGN': '‚Ç¶',
        'GHS': '‚Çµ',
        'KES': 'KSh',
        'UGX': 'USh',
        'TZS': 'TSh',
        'ETB': 'Br',
        'XAF': 'FCFA',
        'XOF': 'CFA',
        'ZMW': 'ZK',
        'BWP': 'P',
        'MZN': 'MT',
        'AOA': 'Kz',
        'MUR': '‚Ç®',
        'SCR': '‚Ç®',
        'PKR': '‚Ç®',
        'LKR': '‚Ç®',
        'NPR': '‚Ç®',
        'BTN': 'Nu.',
        'MVR': 'Rf',
        'BDT': '‡ß≥',
        'MMK': 'K',
        'LAK': '‚Ç≠',
        'KHR': '·üõ',
        'MNT': '‚ÇÆ',
        'FJD': 'F$',
        'PGK': 'K',
        'WST': 'T',
        'SBD': 'SI$',
        'TOP': 'T$',
        'VUV': 'VT',
        'XPF': '‚Ç£',
        'GMD': 'D',
        'GNF': 'FG',
        'SLL': 'Le',
        'LRD': 'L$',
        'RWF': 'FRw',
        'BIF': 'FBu',
        'MWK': 'MK',
        'LSL': 'L',
        'NAD': 'N$',
        'SZL': 'E',
        'SOS': 'Sh',
        'DJF': 'Fdj',
        'KMF': 'CF',
        'MRU': 'UM',
        'STN': 'Db',
        'CVE': 'Esc',
        'ERN': 'Nfk',
        'TMT': 'm',
        'AFN': 'ÿã',
        'TJS': 'SM',
        'KGS': '—Å',
        'UZS': "so'm",
        'YER': 'Ô∑º',
        'IQD': 'ID',
        'SYP': '¬£S',
        'XCD': 'EC$',
        'BBD': 'Bds$',
        'BSD': 'B$',
        'BZD': 'BZ$',
        'BMD': 'BD$',
        'AWG': 'Afl',
        'CUP': '‚Ç±',
        'CUC': 'CUC$',
        'DOP': 'RD$',
        'GTQ': 'Q',
        'HNL': 'L',
        'JMD': 'J$',
        'NIO': 'C$',
        'PAB': 'B/.',
        'HTG': 'G',
        'SRD': 'Sr$',
        'TTD': 'TT$',
        'KYD': 'CI$',
        'GIP': '¬£',
        'SHP': '¬£',
        'FKP': '¬£',
        'SDG': 'SDG',
        'SSP': 'SSP',
        'GYD': 'G$',
        'BOB': 'Bs.',
        'PYG': '‚Ç≤',
        'VES': 'Bs',
        'IRR': 'Ô∑º',
        'CRC': '‚Ç°',
        'SVC': '$',
        'LVL': 'Ls',
        'LTL': 'Lt',
        'EEK': 'kr'
    }
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä—É–±–ª–µ–π –∏ –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç –±–µ–∑ –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏
    if currency in ['RUB', 'JPY', 'KRW', 'CLP', 'ISK', 'TWD', 'HUF', 'COP', 'IDR', 'VND', 'KHR', 'LAK', 'MMK', 'PYG', 'BIF', 'XAF', 'XOF', 'XPF', 'CLP', 'DJF', 'GNF', 'KMF', 'MGA', 'RWF', 'VUV', 'XAF', 'XOF', 'XPF']:
        formatted_amount = f"{float(amount):,.0f}".replace(',', ' ')
    else:
        formatted_amount = f"{float(amount):,.2f}".replace(',', ' ')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã
    symbol = currency_symbols.get(currency, currency)
    
    # –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–∞–ª—é—Ç —Å–∏–º–≤–æ–ª –∏–¥–µ—Ç –ø–æ—Å–ª–µ —Å—É–º–º—ã
    if currency in ['RUB', 'CZK', 'PLN', 'BGN', 'HRK', 'RON', 'RSD', 'UAH', 'KZT', 'BYN', 'MDL', 'ALL', 'MKD', 'BAM', 'TRY', 'ISK', 'NOK', 'SEK', 'DKK']:
        return f"{formatted_amount} {symbol}"
    else:
        return f"{symbol}{formatted_amount}"


def format_expenses_summary(summary: Dict, lang: str = 'ru') -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    
    Args:
        summary: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–≤–æ–¥–∫–∏
        lang: –Ø–∑—ã–∫
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not summary or summary.get('total', 0) == 0:
        return get_text('no_expenses_text', lang)
    
    currency = summary.get('currency', 'RUB')
    total = summary.get('total', 0)
    
    text = f"üí∞ {get_text('total', lang)}: {format_currency(total, currency)}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ö–æ–¥–æ–≤
    count = summary.get('count', 0)
    if count:
        text += f"üìä {get_text('expenses_count', lang)}: {count}\n"
    
    # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
    if count > 0:
        avg = total / count
        text += f"üìà {get_text('average_expense', lang)}: {format_currency(avg, currency)}\n"
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = summary.get('categories', [])
    if categories:
        text += f"\nüìÇ {get_text('by_categories', lang)}:\n"
        
        for cat in categories:
            percent = (cat['amount'] / total) * 100 if total > 0 else 0
            text += f"{cat.get('icon', 'üí∞')} {cat['name']}: {format_currency(cat['amount'], currency)} ({percent:.1f}%)\n"
    
    return text.strip()


def format_date(date_obj: Union[date, datetime], lang: str = 'ru', format_type: str = 'short') -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    
    Args:
        date_obj: –û–±—ä–µ–∫—Ç –¥–∞—Ç—ã
        lang: –Ø–∑—ã–∫
        format_type: 'short', 'long', 'full'
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
    """
    if isinstance(date_obj, datetime):
        date_obj = date_obj.date()
    
    months_ru = [
        '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
        '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
    ]
    
    months_en = [
        'January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'
    ]
    
    if format_type == 'short':
        return date_obj.strftime('%d.%m.%Y')
    elif format_type == 'long':
        if lang == 'ru':
            return f"{date_obj.day} {months_ru[date_obj.month - 1]} {date_obj.year}"
        else:
            return f"{date_obj.day} {months_en[date_obj.month - 1]} {date_obj.year}"
    elif format_type == 'full':
        weekdays_ru = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        weekdays_en = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        
        if lang == 'ru':
            weekday = weekdays_ru[date_obj.weekday()]
            return f"{weekday}, {date_obj.day} {months_ru[date_obj.month - 1]} {date_obj.year}"
        else:
            weekday = weekdays_en[date_obj.weekday()]
            return f"{weekday}, {date_obj.day} {months_en[date_obj.month - 1]} {date_obj.year}"
    
    return str(date_obj)


def format_list_items(items: List[str], bullet: str = "‚Ä¢", indent: int = 2) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –±—É–ª–ª–µ—Ç–∞–º–∏
    
    Args:
        items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        bullet: –°–∏–º–≤–æ–ª –±—É–ª–ª–µ—Ç–∞
        indent: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    """
    indent_str = " " * indent
    return "\n".join([f"{indent_str}{bullet} {item}" for item in items])


def format_percentage(value: float, total: float, decimals: int = 1) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    
    Args:
        value: –ó–Ω–∞—á–µ–Ω–∏–µ
        total: –û–±—â–∞—è —Å—É–º–º–∞
        decimals: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
    """
    if total == 0:
        return "0%"
    
    percentage = (value / total) * 100
    return f"{percentage:.{decimals}f}%"


def truncate_text(text: str, max_length: int = 50, suffix: str = "...") -> str:
    """
    –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—É—Ñ—Ñ–∏–∫—Å–∞
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        suffix: –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        
    Returns:
        str: –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if len(text) <= max_length:
        return text
    
    return text[:max_length - len(suffix)] + suffix


def format_number(number: Union[int, float], lang: str = 'ru') -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
    
    Args:
        number: –ß–∏—Å–ª–æ
        lang: –Ø–∑—ã–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
    """
    if lang == 'ru':
        # –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–±–µ–ª –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if isinstance(number, float):
            return f"{number:,.2f}".replace(',', ' ').replace('.', ',')
        else:
            return f"{number:,}".replace(',', ' ')
    else:
        # –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø—è—Ç—É—é
        if isinstance(number, float):
            return f"{number:,.2f}"
        else:
            return f"{number:,}"