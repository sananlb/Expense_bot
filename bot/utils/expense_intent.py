"""
Модуль для определения намерений пользователя относительно трат
"""
from typing import List, Tuple
import re

# Глаголы и слова, указывающие на желание ПОСМОТРЕТЬ траты
SHOW_VERBS = [
    'показать', 'покажи', 'показ',
    'посмотреть', 'посмотри', 'смотри',
    'вывести', 'выведи', 'вывод',
    'дай', 'дать', 'давай',
    'скажи', 'сказать', 'расскажи',
    'сколько', 'какие', 'что',
    'проверить', 'проверь',
    'отчет', 'отчёт', 'статистика',
    'анализ', 'аналитика', 'итог',
    'сводка', 'summary', 'report'
]

# Временные маркеры
TIME_MARKERS = [
    # Дни
    'сегодня', 'вчера', 'позавчера',
    'сегодняшн', 'вчерашн',
    
    # Недели
    'неделя', 'неделю', 'недели', 'недель',
    'прошлая неделя', 'эта неделя', 'этой неделе',
    
    # Месяцы
    'месяц', 'месяца', 'месяцев',
    'январ', 'феврал', 'март', 'апрел', 'май', 'мая', 'июн', 'июл', 'август', 'сентябр', 'октябр', 'ноябр', 'декабр',
    'прошлый месяц', 'этот месяц', 'текущий месяц',
    
    # Годы
    'год', 'года', 'году', 'лет',
    'прошлый год', 'этот год', 'текущий год',
    
    # Другие временные указатели
    'прошл', 'прошедш', 'текущ', 'последн',
    'за период', 'с начала', 'по сей день',
    'всего', 'итого', 'весь', 'все', 'всё'
]

# Слова, связанные с тратами/расходами
EXPENSE_WORDS = [
    'трата', 'траты', 'трату', 'тратах', 'тратам',
    'расход', 'расходы', 'расходов', 'расходам',
    'потратил', 'потратила', 'потратили', 'потрачено',
    'израсходовал', 'израсходовано',
    'expense', 'expenses', 'spent',
    'дневник', 'журнал', 'история', 'history'
]

# Полные фразы для быстрой проверки
SHOW_EXPENSE_PHRASES = [
    'траты за', 'расходы за',
    'траты вчера', 'траты сегодня',
    'расходы вчера', 'расходы сегодня',
    'покажи траты', 'покажи расходы',
    'показать траты', 'показать расходы',
    'сколько потратил', 'что потратил',
    'мои траты', 'мои расходы',
    'дневник трат', 'журнал расходов',
    'история трат', 'история расходов'
]


def is_show_expenses_request(text: str) -> Tuple[bool, float]:
    """
    Определяет, является ли текст запросом на показ трат
    
    Returns:
        Tuple[bool, float]: (является ли запросом показа, уверенность от 0 до 1)
    """
    text_lower = text.lower().strip()
    
    # Аналитические вопросы, которые НЕ должны вызывать показ трат
    # Эти вопросы требуют ответа от AI, а не просто показ списка
    analytical_patterns = [
        'какая самая', 'какой самый', 'какие самые',
        'самая большая', 'самый большой', 'самые большие',
        'самая маленькая', 'самый маленький', 'самые маленькие',
        'на что больше', 'на что меньше',
        'сколько раз', 'как часто',
        'в какой категории',
        'почему', 'зачем', 'для чего',
        'объясни', 'расскажи', 'опиши',
        'анализ', 'аналитика', 'статистика',
        'сравни', 'сравнение',
        'тренд', 'динамика', 'изменение',
        'прогноз', 'предсказание',
        'рекомендации', 'советы', 'предложения',
        'оптимизация', 'экономия', 'сократить'
    ]
    
    # Проверяем, является ли это аналитическим вопросом
    is_analytical = any(pattern in text_lower for pattern in analytical_patterns)
    if is_analytical:
        # Аналитические вопросы отправляем в AI
        return False, 0.0
    
    # 1. Быстрая проверка на точные фразы
    for phrase in SHOW_EXPENSE_PHRASES:
        if phrase in text_lower:
            return True, 1.0
    
    # 2. Проверка на наличие глаголов показа
    has_show_verb = any(verb in text_lower for verb in SHOW_VERBS)
    
    # 3. Проверка на временные маркеры
    has_time_marker = any(marker in text_lower for marker in TIME_MARKERS)
    
    # 4. Проверка на слова о тратах
    has_expense_word = any(word in text_lower for word in EXPENSE_WORDS)
    
    # 5. Вопросительный знак или вопросительные слова
    is_question = text_lower.endswith('?') or any(
        text_lower.startswith(q) for q in ['сколько', 'какие', 'что', 'когда', 'где']
    )
    
    # Логика принятия решения
    confidence = 0.0
    
    # Сильные индикаторы - только если прямо просят показать
    if has_show_verb and has_expense_word:
        return True, 0.95
    
    if has_show_verb and has_time_marker:
        return True, 0.9
    
    # Для вопросов требуем более явных индикаторов
    if is_question:
        # Вопрос с тратами но без явного запроса показа - скорее всего аналитика
        if has_expense_word and not has_show_verb:
            return False, 0.0  # Отправляем в AI для анализа
        
        # Вопрос "сколько потратил" - это запрос на показ
        if 'сколько' in text_lower and ('потратил' in text_lower or 'потрачено' in text_lower):
            return True, 0.85
    
    # Если есть траты и временной маркер, но это НЕ вопрос - показываем траты
    if has_expense_word and has_time_marker and not is_question:
        return True, 0.8
    
    # Слабые индикаторы только для НЕ-вопросов
    if not is_question and has_time_marker and len(text_lower.split()) <= 3:
        # Короткая фраза с временным маркером
        return True, 0.7
    
    # Не является запросом показа
    return False, confidence


def get_show_keywords() -> List[str]:
    """
    Возвращает полный список ключевых слов для проверки запросов показа трат
    Используется для обратной совместимости
    """
    keywords = list(SHOW_EXPENSE_PHRASES)
    
    # Добавляем комбинации
    for verb in ['покажи', 'показать', 'посмотри', 'дай', 'выведи']:
        for expense in ['траты', 'расходы', 'трату', 'расход']:
            keywords.append(f"{verb} {expense}")
    
    # Добавляем временные комбинации
    for time in ['вчера', 'сегодня', 'неделю', 'месяц', 'год']:
        for expense in ['траты', 'расходы', 'потратил', 'потрачено']:
            keywords.append(f"{expense} {time}")
            keywords.append(f"{expense} за {time}")
    
    # Убираем дубликаты
    return list(set(keywords))


def is_expense_record_request(text: str) -> Tuple[bool, float]:
    """
    Определяет, является ли текст записью новой траты
    
    Returns:
        Tuple[bool, float]: (является ли записью траты, уверенность от 0 до 1)
    """
    # Сначала проверяем, не является ли это запросом показа
    is_show, show_confidence = is_show_expenses_request(text)
    if is_show and show_confidence > 0.7:
        return False, 0.0
    
    text_lower = text.lower().strip()
    
    # Индикаторы записи траты
    # Оставляем пустым - глаголы покупки обычно используются в вопросах
    record_verbs = [
    ]
    
    has_record_verb = any(verb in text_lower for verb in record_verbs)
    
    # Проверка на числа (возможная сумма)
    has_numbers = bool(re.search(r'\d+', text))
    
    # Проверка на валюту
    has_currency = any(curr in text_lower for curr in ['руб', 'р', '₽', 'доллар', '$', 'евро', '€'])
    
    # Логика принятия решения
    if has_record_verb and has_numbers:
        return True, 0.95
    
    if has_numbers and has_currency:
        return True, 0.9
    
    if has_record_verb:
        return True, 0.8
    
    # Если есть числа и нет временных маркеров
    if has_numbers and not any(marker in text_lower for marker in TIME_MARKERS):
        return True, 0.7
    
    return False, 0.0