"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π expense_bot
"""
import os
from typing import Optional, Dict, Any, List
from decimal import Decimal
from datetime import date
from asgiref.sync import sync_to_async

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
from .expense_parser_improved import (
    parse_expense_message, 
    parse_multiple_expenses,
    validate_expense_data,
    ExpenseParserAI,
    ParsedExpense
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ Django
from database.models import Profile, ExpenseCategory, Expense


class ExpenseParserService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π AI"""
    
    def __init__(self):
        self.ai_parser = None
        self._init_ai_parser()
    
    def _init_ai_parser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –ø–∞—Ä—Å–µ—Ä–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω API –∫–ª—é—á"""
        openai_key = os.getenv('OPENAI_API_KEY')
        if openai_key:
            self.ai_parser = ExpenseParserAI(api_key=openai_key)
    
    async def parse_text_message(
        self, 
        text: str, 
        user_id: int,
        use_ai: bool = True
    ) -> Optional[ParsedExpense]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not text or not text.strip():
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è AI
        user_context = None
        if use_ai and self.ai_parser:
            user_context = await self._get_user_context(user_id)
            result = await self.ai_parser.parse_expense_with_ai(text, user_context)
        else:
            result = parse_expense_message(text, use_ai=False)
        
        return result
    
    async def parse_multiple_text_messages(
        self, 
        text: str, 
        user_id: int
    ) -> List[ParsedExpense]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        results = parse_multiple_expenses(text)
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞—Å—Ö–æ–¥, –ø—ã—Ç–∞–µ–º—Å—è —É–ª—É—á—à–∏—Ç—å –µ–≥–æ —Å AI
        if len(results) == 1 and self.ai_parser:
            user_context = await self._get_user_context(user_id)
            ai_result = await self.ai_parser.parse_expense_with_ai(text, user_context)
            if ai_result and ai_result.confidence > results[0].confidence:
                results[0] = ai_result
        
        return results
    
    @sync_to_async
    def _get_user_context(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è AI –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        try:
            profile = Profile.objects.get(telegram_id=user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            recent_expenses = Expense.objects.filter(
                profile=profile,
                is_deleted=False
            ).select_related('category').order_by('-created_at')[:20]
            
            recent_categories = list(set(
                exp.category.name for exp in recent_expenses 
                if exp.category
            ))
            
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–µ—Å—Ç–∞/–æ–ø–∏—Å–∞–Ω–∏—è
            popular_descriptions = list(
                Expense.objects.filter(
                    profile=profile,
                    is_deleted=False
                ).values_list('description', flat=True)
                .distinct()[:10]
            )
            
            return {
                'recent_categories': recent_categories[:5],
                'preferred_places': popular_descriptions[:5],
                'currency': getattr(profile.settings, 'currency', 'RUB') if hasattr(profile, 'settings') else 'RUB'
            }
        
        except Profile.DoesNotExist:
            return {}
    
    @sync_to_async
    def create_expense_from_parsed(
        self, 
        parsed: ParsedExpense, 
        user_id: int
    ) -> Optional[Expense]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Expense –∏–∑ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile = Profile.objects.get(telegram_id=user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = self._get_or_create_category(profile, parsed.category)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ö–æ–¥
            expense = Expense.objects.create(
                profile=profile,
                category=category,
                amount=Decimal(str(parsed.amount)),
                currency=parsed.currency,
                description=parsed.description,
                date=date.today(),
                ai_processed=parsed.ai_processed,
                ai_confidence=parsed.confidence
            )
            
            return expense
        
        except (Profile.DoesNotExist, Exception) as e:
            print(f"Error creating expense: {e}")
            return None
    
    def _get_or_create_category(self, profile: Profile, category_name: str) -> ExpenseCategory:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = ExpenseCategory.objects.filter(
            profile=profile,
            name__iexact=category_name,
            is_active=True
        ).first()
        
        if category:
            return category
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        icon_mapping = {
            '–ø—Ä–æ–¥—É–∫—Ç—ã': 'üçî',
            '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'üöå', 
            '–∫–∞—Ñ–µ': '‚òï',
            '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'üéÆ',
            '–∑–¥–æ—Ä–æ–≤—å–µ': 'üíä',
            '–æ–¥–µ–∂–¥–∞': 'üëï',
            '—Å–≤—è–∑—å': 'üì±',
            '–¥–æ–º': 'üè†',
            '–ø–æ–¥–∞—Ä–∫–∏': 'üéÅ',
            '–¥—Ä—É–≥–æ–µ': 'üí∞'
        }
        
        category = ExpenseCategory.objects.create(
            profile=profile,
            name=category_name,
            icon=icon_mapping.get(category_name.lower(), 'üí∞'),
            is_system=False
        )
        
        return category
    
    async def validate_and_suggest_improvements(
        self, 
        parsed: ParsedExpense
    ) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        """
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        errors = validate_expense_data(parsed)
        
        result = {
            'is_valid': len(errors) == 0,
            'errors': errors,
            'suggestions': []
        }
        
        # AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if self.ai_parser and parsed.confidence < 0.8:
            try:
                ai_suggestions = await self.ai_parser.suggest_expense_improvements(parsed)
                result['ai_suggestions'] = ai_suggestions
            except Exception:
                pass
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if parsed.confidence < 0.5:
            result['suggestions'].append("–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —É—Ç–æ—á–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
        
        if not parsed.description or len(parsed.description) < 3:
            result['suggestions'].append("–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
        
        if parsed.amount > 10000:
            result['suggestions'].append("–ë–æ–ª—å—à–∞—è —Å—É–º–º–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å")
        
        return result


class ExpenseMessageProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"""
    
    def __init__(self):
        self.parser_service = ExpenseParserService()
    
    async def process_text_message(
        self, 
        message_text: str, 
        user_id: int
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - success: bool - —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        - expenses: List[Expense] - —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
        - errors: List[str] - –æ—à–∏–±–∫–∏
        - suggestions: List[str] - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        """
        result = {
            'success': False,
            'expenses': [],
            'errors': [],
            'suggestions': []
        }
        
        try:
            # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            parsed_expenses = await self.parser_service.parse_multiple_text_messages(
                message_text, user_id
            )
            
            if not parsed_expenses:
                result['errors'].append("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                return result
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π —Ä–∞—Å—Ö–æ–¥
            created_expenses = []
            
            for parsed in parsed_expenses:
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º
                validation = await self.parser_service.validate_and_suggest_improvements(parsed)
                
                if validation['is_valid']:
                    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ö–æ–¥ –≤ –ë–î
                    expense = await self.parser_service.create_expense_from_parsed(
                        parsed, user_id
                    )
                    
                    if expense:
                        created_expenses.append(expense)
                    else:
                        result['errors'].append(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—Ö–æ–¥: {parsed.description}")
                else:
                    result['errors'].extend(validation['errors'])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                result['suggestions'].extend(validation.get('suggestions', []))
            
            result['expenses'] = created_expenses
            result['success'] = len(created_expenses) > 0
            
        except Exception as e:
            result['errors'].append(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        
        return result
    
    async def process_voice_message(
        self, 
        voice_file_path: str, 
        user_id: int
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç—Ä–µ–±—É–µ—Ç speech-to-text)
        """
        # Placeholder –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        return {
            'success': False,
            'expenses': [],
            'errors': ['–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞'],
            'suggestions': []
        }
    
    async def process_receipt_photo(
        self, 
        photo_file_path: str, 
        user_id: int
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–∞ (—Ç—Ä–µ–±—É–µ—Ç OCR)
        """
        # Placeholder –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        return {
            'success': False,
            'expenses': [],
            'errors': ['–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞'],
            'suggestions': []
        }


# –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
def create_expense_processor() -> ExpenseMessageProcessor:
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    return ExpenseMessageProcessor()


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
class LegacyParserMigration:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –∫ –Ω–æ–≤–æ–º—É"""
    
    @staticmethod
    def compare_parsers(text: str) -> Dict[str, Any]:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä
        from .expense_parser import parse_expense_message as old_parse
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        old_result = old_parse(text)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        new_result = parse_expense_message(text)
        
        return {
            'text': text,
            'old_parser': old_result,
            'new_parser': new_result.__dict__ if new_result else None,
            'improvements': {
                'better_amount_detection': new_result is not None and old_result is None,
                'better_category': (
                    new_result and old_result and 
                    new_result.confidence > 0.7 and 
                    new_result.category != old_result.get('category')
                ),
                'ai_processed': new_result.ai_processed if new_result else False
            }
        }
    
    @staticmethod
    async def migrate_expense_suggestions(user_id: int, limit: int = 100):
        """
        –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º
        –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        """
        # Placeholder –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        pass