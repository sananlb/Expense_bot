"""
–†–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π Telegram Stars
"""
from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from django.utils import timezone
import logging

from bot.utils import get_text
from bot.utils.message_utils import send_message_with_cleanup
from bot.services.affiliate import (
    get_or_create_affiliate_link,
    get_referrer_stats,
    get_referral_history,
    get_commission_history,
    get_or_create_affiliate_program
)
from expenses.models import Profile

logger = logging.getLogger(__name__)

router = Router(name='affiliate')


@router.message(Command("affiliate"))
async def cmd_affiliate(message: Message, state: FSMContext, lang: str = 'ru'):
    """–ö–æ–º–∞–Ω–¥–∞ /affiliate - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        profile = await Profile.objects.aget(telegram_id=user_id)
    except Profile.DoesNotExist:
        if lang == 'en':
            error_text = "‚ö†Ô∏è Profile not found. Please use /start command first."
        else:
            error_text = "‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
        await message.answer(error_text)
        return
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Å 50% –∫–æ–º–∏—Å—Å–∏–µ–π
    affiliate_program = await get_or_create_affiliate_program(commission_percent=50)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    bot_info = await message.bot.get_me()
    affiliate_link = await get_or_create_affiliate_link(user_id, bot_info.username)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_referrer_stats(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if lang == 'en':
        message_text = (
            "Referral link:\n"
            f"<code>{affiliate_link.telegram_link}</code>\n\n"
            f"üìä <b>Your statistics:</b>\n"
            f"‚Ä¢ Clicks: {stats['clicks']}\n"
            f"‚Ä¢ Registrations: {stats['referrals_count']}\n\n"
            f"üí∞ <b>Earnings:</b>\n"
            f"‚Ä¢ Earned: {stats['total_earned']} ‚≠ê\n"
            f"‚Ä¢ Pending: {stats['pending_amount']} ‚≠ê\n\n"
            f"‚ÑπÔ∏è <b>How it works:</b>\n"
            f"1. Share your referral link\n"
            f"2. Get {affiliate_program.get_commission_percent()}% from each payment\n"
            f"3. Commissions are held for 21 days\n"
            f"4. After the hold period, stars are credited to your account\n\n"
            f"üí° <i>Share your link and earn Telegram Stars!</i>"
        )
    else:
        message_text = (
            "–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
            f"<code>{affiliate_link.telegram_link}</code>\n\n"
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {stats['clicks']}\n"
            f"‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {stats['referrals_count']}\n\n"
            f"üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–æ–∫:</b>\n"
            f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_earned']} ‚≠ê\n"
            f"‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['pending_amount']} ‚≠ê\n\n"
            f"‚ÑπÔ∏è <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
            f"1. –î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π\n"
            f"2. –ü–æ–ª—É—á–∞–π—Ç–µ {affiliate_program.get_commission_percent()}% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞\n"
            f"3. –ö–æ–º–∏—Å—Å–∏–∏ –¥–µ—Ä–∂–∞—Ç—Å—è –Ω–∞ —Ö–æ–ª–¥–µ 21 –¥–µ–Ω—å\n"
            f"4. –ü–æ—Å–ª–µ —Ö–æ–ª–¥–∞ –∑–≤—ë–∑–¥—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ –≤–∞—à —Å—á—ë—Ç\n\n"
            f"üí° <i>–î–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ Telegram Stars!</i>"
        )
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (—Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–Ω–æ–ø–∫–∏)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" if lang == 'ru' else "üìä Detailed stats",
                callback_data="affiliate_stats"
            )
        ],
        [
            InlineKeyboardButton(
                text="üí∏ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç" if lang == 'ru' else "üí∏ Payment history",
                callback_data="affiliate_commissions"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ùå –ó–∞–∫—Ä—ã—Ç—å" if lang == 'ru' else "‚ùå Close",
                callback_data="close"
            )
        ]
    ])
    
    await send_message_with_cleanup(
        message, state,
        message_text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )


@router.callback_query(F.data == "affiliate_stats")
async def show_affiliate_stats(callback: CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_referrer_stats(user_id)
    
    if not stats['has_link']:
        if lang == 'en':
            text = "‚ö†Ô∏è You don't have an affiliate link yet. Use /affiliate command."
        else:
            text = "‚ö†Ô∏è –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /affiliate."
        await callback.answer(text, show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if lang == 'en':
        text = (
            "üìä <b>Detailed Statistics</b>\n\n"
            f"<b>Link performance:</b>\n"
            f"‚Ä¢ Total clicks: {stats['clicks']}\n"
            f"‚Ä¢ Registrations: {stats['referrals_count']}\n"
            f"‚Ä¢ Paying users: {stats['active_referrals']}\n\n"
            f"<b>Earnings:</b>\n"
            f"‚Ä¢ Total earned: {stats['total_earned']} ‚≠ê\n"
            f"‚Ä¢ On hold (21 days): {stats['pending_amount']} ‚≠ê\n"
            f"‚Ä¢ Available: {stats['total_earned'] - stats['pending_amount']} ‚≠ê"
        )
        if stats['referrals_count'] > 0:
            avg_earning = stats['total_earned'] / stats['referrals_count']
            text += f"\n‚Ä¢ Average per user: {avg_earning:.1f} ‚≠ê"
    else:
        text = (
            "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"<b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {stats['clicks']}\n"
            f"‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {stats['referrals_count']}\n"
            f"‚Ä¢ –ü–ª–∞—Ç—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_referrals']}\n\n"
            f"<b>–ó–∞—Ä–∞–±–æ—Ç–æ–∫:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_earned']} ‚≠ê\n"
            f"‚Ä¢ –ù–∞ —Ö–æ–ª–¥–µ (21 –¥–µ–Ω—å): {stats['pending_amount']} ‚≠ê\n"
            f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {stats['total_earned'] - stats['pending_amount']} ‚≠ê"
        )
        if stats['referrals_count'] > 0:
            avg_earning = stats['total_earned'] / stats['referrals_count']
            text += f"\n‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {avg_earning:.1f} ‚≠ê"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥" if lang == 'ru' else "‚óÄÔ∏è Back",
                callback_data="back_to_affiliate"
            )
        ]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()


@router.callback_query(F.data == "affiliate_referrals")
async def show_referrals(callback: CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    referrals = await get_referral_history(user_id, limit=10)
    
    if not referrals:
        if lang == 'en':
            text = "üë• <b>Your referrals</b>\n\nYou don't have any referrals yet.\nShare your link to start earning!"
        else:
            text = "üë• <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!"
    else:
        if lang == 'en':
            text = "üë• <b>Your referrals (last 10)</b>\n\n"
            for ref in referrals:
                status = "‚úÖ Active" if ref['is_active'] else "‚è≥ Inactive"
                joined = ref['joined_at'].strftime('%d.%m.%Y')
                text += f"‚Ä¢ User {ref['user_id'][:6]}...\n"
                text += f"  Joined: {joined}\n"
                text += f"  Status: {status}\n"
                if ref['total_payments'] > 0:
                    text += f"  Payments: {ref['total_payments']}\n"
                    text += f"  Spent: {ref['total_spent']} ‚≠ê\n"
                text += "\n"
        else:
            text = "üë• <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)</b>\n\n"
            for ref in referrals:
                status = "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π" if ref['is_active'] else "‚è≥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
                joined = ref['joined_at'].strftime('%d.%m.%Y')
                text += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ref['user_id'][:6]}...\n"
                text += f"  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {joined}\n"
                text += f"  –°—Ç–∞—Ç—É—Å: {status}\n"
                if ref['total_payments'] > 0:
                    text += f"  –ü–ª–∞—Ç–µ–∂–µ–π: {ref['total_payments']}\n"
                    text += f"  –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {ref['total_spent']} ‚≠ê\n"
                text += "\n"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥" if lang == 'ru' else "‚óÄÔ∏è Back",
                callback_data="back_to_affiliate"
            )
        ]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()


@router.callback_query(F.data == "affiliate_commissions")
async def show_commissions(callback: CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–ª–∞—Ç"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∏—Å—Å–∏–π
    commissions = await get_commission_history(user_id, limit=10)
    
    if not commissions:
        if lang == 'en':
            text = "üí∏ <b>Payment history</b>\n\nYou don't have any payments yet.\nYour referrals need to make purchases."
        else:
            text = "üí∏ <b>–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–ª–∞—Ç.\n–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫–∏."
    else:
        if lang == 'en':
            text = "üí∏ <b>Payment history (last 10)</b>\n\n"
            for comm in commissions:
                date = comm['created_at'].strftime('%d.%m.%Y %H:%M')
                status_emoji = {
                    'pending': '‚è≥',
                    'hold': 'üîí',
                    'paid': '‚úÖ',
                    'cancelled': '‚ùå',
                    'refunded': '‚Ü©Ô∏è'
                }.get(comm['status'], '‚ùì')
                
                text += f"{status_emoji} {date}\n"
                text += f"  Amount: {comm['commission_amount']} ‚≠ê\n"
                text += f"  From payment: {comm['payment_amount']} ‚≠ê\n"
                text += f"  Status: {comm['status_display']}\n"
                if comm['hold_until'] and comm['status'] == 'hold':
                    hold_date = comm['hold_until'].strftime('%d.%m.%Y')
                    text += f"  Available after: {hold_date}\n"
                text += "\n"
        else:
            text = "üí∏ <b>–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)</b>\n\n"
            for comm in commissions:
                date = comm['created_at'].strftime('%d.%m.%Y %H:%M')
                status_emoji = {
                    'pending': '‚è≥',
                    'hold': 'üîí',
                    'paid': '‚úÖ',
                    'cancelled': '‚ùå',
                    'refunded': '‚Ü©Ô∏è'
                }.get(comm['status'], '‚ùì')
                
                text += f"{status_emoji} {date}\n"
                text += f"  –°—É–º–º–∞: {comm['commission_amount']} ‚≠ê\n"
                text += f"  –° –ø–ª–∞—Ç–µ–∂–∞: {comm['payment_amount']} ‚≠ê\n"
                text += f"  –°—Ç–∞—Ç—É—Å: {comm['status_display']}\n"
                if comm['hold_until'] and comm['status'] == 'hold':
                    hold_date = comm['hold_until'].strftime('%d.%m.%Y')
                    text += f"  –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ: {hold_date}\n"
                text += "\n"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥" if lang == 'ru' else "‚óÄÔ∏è Back",
                callback_data="back_to_affiliate"
            )
        ]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_affiliate")
async def back_to_affiliate(callback: CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é affiliate"""
    await cmd_affiliate(callback.message, state, lang)
    await callback.answer()