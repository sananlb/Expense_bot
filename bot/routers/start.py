"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
"""
from aiogram import Router, F, types
from aiogram.filters import Command, CommandObject
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
import asyncio
import logging

from bot.utils import get_text
from bot.services.profile import get_or_create_profile, get_user_settings
from bot.keyboards import main_menu_keyboard, back_close_keyboard
from bot.services.category import create_default_categories, create_default_income_categories
from bot.utils.message_utils import send_message_with_cleanup, delete_message_with_effect
from bot.utils.commands import update_user_commands
from bot.services.affiliate import process_referral_link  # –ù–æ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Telegram Stars
from expenses.models import Subscription, Profile, ReferralBonus
from django.utils import timezone
from datetime import timedelta

logger = logging.getLogger(__name__)

router = Router(name="start")


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext, command: CommandObject, lang: str = 'ru'):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ –∫–æ–º–∞–Ω–¥–µ
    referral_code = None
    if command.args:
        # –§–æ—Ä–º–∞—Ç: /start ref_ABCD1234
        args = command.args.strip()
        if args.startswith('ref_'):
            referral_code = args[4:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å ref_
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile = await get_or_create_profile(
        telegram_id=user_id,
        language_code=message.from_user.language_code
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ –Ω–∞–ª–∏—á–∏—é –ø–æ–¥–ø–∏—Å–æ–∫)
    is_new_user = not await Subscription.objects.filter(profile=profile).aexists()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —è–∑—ã–∫—É —Å–∏—Å—Ç–µ–º—ã Telegram
    if profile.language_code:
        display_lang = profile.language_code
    else:
        # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É —è–∑—ã–∫—É Telegram
        user_language_code = message.from_user.language_code or 'en'
        display_lang = 'ru' if user_language_code.startswith('ru') else 'en'
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        profile.language_code = display_lang
        await profile.asave()
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    categories_created = await create_default_categories(user_id)
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
    income_categories_created = await create_default_income_categories(user_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    referral_message = ""
    if is_new_user and referral_code:
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É Telegram Stars
            affiliate_referral = await process_referral_link(user_id, referral_code)
            
            if affiliate_referral:
                # –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ Telegram Stars
                if display_lang == 'en':
                    referral_message = "\n\n‚≠ê You joined via an affiliate link! Your friend will receive commission from your purchases."
                else:
                    referral_message = "\n\n‚≠ê –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–µ! –í–∞—à –¥—Ä—É–≥ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é —Å –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫."
                
                logger.info(f"New user {user_id} registered via Telegram Stars affiliate link from {affiliate_referral.referrer.telegram_id}")
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ Telegram Stars, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
                # –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ –∫–æ–¥—É (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –±–æ–Ω—É—Å–Ω—ã–º–∏ –¥–Ω—è–º–∏)
                referrer = await Profile.objects.filter(referral_code=referral_code).afirst()
                if referrer and referrer.telegram_id != user_id:
                    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
                    profile.referrer = referrer
                    await profile.asave()
                    
                    if display_lang == 'en':
                        referral_message = "\n\nüéÅ You joined via a referral link! After paying for your first subscription, your friend will receive a bonus."
                    else:
                        referral_message = "\n\nüéÅ –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç –±–æ–Ω—É—Å."
                    
                    logger.info(f"New user {user_id} registered with referral code from {referrer.telegram_id}")
        except Exception as e:
            logger.error(f"Error processing referral code: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥–ø–∏—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ beta_tester)
    if not profile.is_beta_tester:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        existing_trial = await profile.subscriptions.filter(
            type='trial'
        ).aexists()
        
        has_active_subscription = await profile.subscriptions.filter(
            is_active=True,
            end_date__gt=timezone.now()
        ).aexists()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
        # 1. –≠—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        # 2. –£ –Ω–µ–≥–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        # 3. –£ –Ω–µ–≥–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        # 4. –û–Ω –Ω–µ beta_tester
        if is_new_user and not has_active_subscription and not existing_trial:
            trial_end = timezone.now() + timedelta(days=7)
            await Subscription.objects.acreate(
                profile=profile,
                type='trial',
                payment_method='trial',
                amount=0,
                start_date=timezone.now(),
                end_date=trial_end,
                is_active=True
            )
            logger.info(f"Created trial subscription for new user {user_id}")
    else:
        logger.info(f"User {user_id} is a beta tester, skipping trial subscription")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_commands(message.bot, user_id)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    if display_lang == 'en':
        text = """<b>ü™ô Coins - smart finance tracking</b>

<b>üí∏ Adding expenses and income:</b>
Send a text or voice message:
"Coffee", "Gas 4050", "Bonus +40000"
The amount and category will be selected based on your previous entries.

<b>üìÅ Categories:</b>
Customize categories for yourself - add your own, delete unnecessary ones. The system will automatically determine the category for each entry.

<b>üí≥ Bank card cashbacks:</b>
Add information about cashbacks on your bank cards. All cashbacks are calculated automatically and displayed in reports. Pin the cashback message in the chat for one-click access.

<b>üìã Transaction diary:</b>
View the history of all transactions for any period in a convenient format. The diary shows expenses and income by day with totals.

<b>üìä Reports:</b>
Request a report in natural language:
"Show expenses for July", "How much did I earn this month"
Get beautiful PDF reports with charts"""
    else:
        text = """<b>ü™ô Coins - —É–º–Ω—ã–π —É—á–µ—Ç –≤–∞—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤</b>

<b>üí∏ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
"–ö–æ—Ñ–µ", "–î–∏–∑–µ–ª—å 4050", "–ü—Ä–µ–º–∏—è +40000"
–°—É–º–º–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–¥–±–µ—Ä—É—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.

<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>
–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥ —Å–µ–±—è - –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏, —É–¥–∞–ª—è–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏.

<b>üí≥ –ö–µ—à–±—ç–∫–∏ –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –∫–∞—Ä—Ç–∞–º:</b>
–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ—à–±–µ–∫–∞—Ö –ø–æ –≤–∞—à–∏–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –∫–∞—Ä—Ç–∞–º. –í—Å–µ –∫–µ—à–±–µ–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –æ—Ç—á–µ—Ç–∞—Ö. –ó–∞–∫—Ä–µ–ø–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–µ—à–±—ç–∫–æ–º –≤ —á–∞—Ç–µ, —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –æ–¥–Ω–æ–º—É –∫–ª–∏–∫—É.

<b>üìã –î–Ω–µ–≤–Ω–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π:</b>
–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –ª—é–±–æ–π –ø–µ—Ä–∏–æ–¥ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –î–Ω–µ–≤–Ω–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º —Å –∏—Ç–æ–≥–∞–º–∏.

<b>üìä –û—Ç—á–µ—Ç—ã:</b>
–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –æ—Ç—á–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:
"–ü–æ–∫–∞–∂–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –∏—é–ª—å", "–°–∫–æ–ª—å–∫–æ —è –∑–∞—Ä–∞–±–æ—Ç–∞–ª –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"
–ü–æ–ª—É—á–∞–π—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ PDF –æ—Ç—á–µ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    text += referral_message
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    await send_message_with_cleanup(message, state, text, parse_mode="HTML")




@router.callback_query(F.data == "menu")
async def callback_menu(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ callback"""
    text = f"{get_text('main_menu', lang)}\n\n{get_text('choose_action', lang)}"
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–±—ç–∫–∞
    user_settings = await get_user_settings(callback.from_user.id)
    cashback_enabled = user_settings.cashback_enabled if hasattr(user_settings, 'cashback_enabled') else True
    
    sent_message = await send_message_with_cleanup(
        callback, state, text,
        reply_markup=main_menu_keyboard(lang, cashback_enabled)
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.update_data(main_menu_message_id=sent_message.message_id)
    
    await callback.answer()






@router.callback_query(F.data == "start")
async def callback_start(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ —á–µ—Ä–µ–∑ callback"""
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_commands(callback.bot, callback.from_user.id)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    if lang == 'en':
        text = """<b>ü™ô Coins - smart finance tracking</b>

<b>üí∏ Adding expenses:</b>
Send a text or voice message:
"Coffee 200" or "Gas 4095 station"

<b>üìÅ Expense categories:</b>
Customize categories for yourself - add your own, delete unnecessary ones. The system will automatically determine the category for each expense.

<b>üí≥ Bank card cashbacks:</b>
Add information about cashbacks on your bank cards. All cashbacks are calculated automatically and displayed in reports. Pin the cashback message in the chat for one-click access.

<b>üìä Expense reports:</b>
Request a report in natural language:
"Show expenses for July" or "How much did I spend yesterday"
Get beautiful PDF reports with charts"""
    else:
        text = """<b>ü™ô Coins - —É–º–Ω—ã–π —É—á–µ—Ç –≤–∞—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤</b>

<b>üí∏ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
"–ö–æ—Ñ–µ", "–î–∏–∑–µ–ª—å 4050", "–ü—Ä–µ–º–∏—è +40000"
–°—É–º–º–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–¥–±–µ—Ä—É—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.

<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>
–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥ —Å–µ–±—è - –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏, —É–¥–∞–ª—è–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏.

<b>üí≥ –ö–µ—à–±—ç–∫–∏ –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –∫–∞—Ä—Ç–∞–º:</b>
–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ—à–±–µ–∫–∞—Ö –ø–æ –≤–∞—à–∏–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –∫–∞—Ä—Ç–∞–º. –í—Å–µ –∫–µ—à–±–µ–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –æ—Ç—á–µ—Ç–∞—Ö. –ó–∞–∫—Ä–µ–ø–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–µ—à–±—ç–∫–æ–º –≤ —á–∞—Ç–µ, —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –æ–¥–Ω–æ–º—É –∫–ª–∏–∫—É.

<b>üìã –î–Ω–µ–≤–Ω–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π:</b>
–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –ª—é–±–æ–π –ø–µ—Ä–∏–æ–¥ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –î–Ω–µ–≤–Ω–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º —Å –∏—Ç–æ–≥–∞–º–∏.

<b>üìä –û—Ç—á–µ—Ç—ã:</b>
–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –æ—Ç—á–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:
"–ü–æ–∫–∞–∂–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –∏—é–ª—å", "–°–∫–æ–ª—å–∫–æ —è –∑–∞—Ä–∞–±–æ—Ç–∞–ª –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"
–ü–æ–ª—É—á–∞–π—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ PDF –æ—Ç—á–µ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    
    try:
        await callback.message.edit_text(text, parse_mode="HTML")
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await send_message_with_cleanup(callback, state, text, parse_mode="HTML")
    
    await callback.answer()


@router.callback_query(F.data == "close")
async def close_message(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await callback.message.delete()
    # –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é
    # –ù–ï —Ç—Ä–æ–≥–∞–µ–º —Ñ–ª–∞–≥ persistent_cashback_menu - –æ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ cashback.py
    await state.update_data(
        last_menu_message_id=None
    )