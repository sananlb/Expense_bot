"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
"""
from aiogram import Router, F, types
from aiogram.filters import Command, CommandObject
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
import asyncio
import logging
from typing import Optional

from bot.utils import get_text
from bot.constants import get_privacy_url_for
from bot.services.profile import get_or_create_profile, get_user_settings
from bot.keyboards import main_menu_keyboard, back_close_keyboard
from bot.services.category import create_default_categories, create_default_income_categories
from bot.utils.message_utils import send_message_with_cleanup, delete_message_with_effect
from bot.utils.commands import update_user_commands
from bot.services.affiliate import process_referral_link  # –ù–æ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Telegram Stars
from expenses.models import Subscription, Profile, Expense, Income
from django.utils import timezone
from datetime import timedelta

logger = logging.getLogger(__name__)

router = Router(name="start")


def get_welcome_message(lang: str = 'ru', referral_message: str = '') -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞

    Args:
        lang: –Ø–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è ('ru' –∏–ª–∏ 'en')
        referral_message: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ

    Returns:
        –ì–æ—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if lang == 'en':
        text = """<b>ü™ô Coins - smart finance tracking</b>

<b>üí∏ Adding expenses and income:</b>
Send a text or voice message:
"Coffee", "Gas 4050", "Bonus +40000"
The amount and category will be selected based on your previous entries.
You can backdate entries, e.g., "10.09 1200 groceries" or "coffee 340 10.09.2025".

<b>üìÅ Categories:</b>
Customize categories for yourself - add your own, delete unnecessary ones. AI will automatically determine the category for each entry.

<b>üí≥ Bank card cashbacks:</b>
Add information about cashbacks on your bank cards. All cashbacks are calculated automatically and displayed in reports. Pin the cashback message in the chat for one-click access.

<b>üìã Transaction diary:</b>
View the history of all transactions for any period in a convenient format. The diary shows expenses and income by day with totals.

<b>üìä Reports:</b>
Request a report in natural language:
"Show expenses for July", "How much did I earn this month"
Get beautiful PDF reports with charts

<b>üè† Household:</b>
Track finances together with your family. Switch between personal and family views. Create a household and add members by sending them an invite link."""
    else:
        text = """<b>ü™ô Coins - —É–º–Ω—ã–π —É—á–µ—Ç –≤–∞—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤</b>

<b>üí∏ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
"–ö–æ—Ñ–µ", "–î–∏–∑–µ–ª—å 4050", "–ü—Ä–µ–º–∏—è +40000"
–°—É–º–º–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–¥–±–µ—Ä—É—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.
–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–Ω–∏–º —á–∏—Å–ª–æ–º: –Ω–∞–ø—Ä–∏–º–µ—Ä, "10.09 1200 –ø—Ä–æ–¥—É–∫—Ç—ã" –∏–ª–∏ "–∫–æ—Ñ–µ 340 10.09.2025".

<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>
–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥ —Å–µ–±—è - –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏, —É–¥–∞–ª—è–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ. –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏.

<b>üí≥ –ö–µ—à–±—ç–∫–∏ –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –∫–∞—Ä—Ç–∞–º:</b>
–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ—à–±–µ–∫–∞—Ö –ø–æ –≤–∞—à–∏–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –∫–∞—Ä—Ç–∞–º. –í—Å–µ –∫–µ—à–±–µ–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –æ—Ç—á–µ—Ç–∞—Ö. –ó–∞–∫—Ä–µ–ø–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–µ—à–±—ç–∫–æ–º –≤ —á–∞—Ç–µ, —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –æ–¥–Ω–æ–º—É –∫–ª–∏–∫—É.

<b>üìã –î–Ω–µ–≤–Ω–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π:</b>
–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –ª—é–±–æ–π –ø–µ—Ä–∏–æ–¥ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –î–Ω–µ–≤–Ω–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º —Å –∏—Ç–æ–≥–∞–º–∏.

<b>üìä –û—Ç—á–µ—Ç—ã:</b>
–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –æ—Ç—á–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:
"–ü–æ–∫–∞–∂–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –∏—é–ª—å", "–°–∫–æ–ª—å–∫–æ —è –∑–∞—Ä–∞–±–æ—Ç–∞–ª –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"
–ü–æ–ª—É—á–∞–π—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ PDF –æ—Ç—á–µ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏

<b>üè† –°–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç:</b>
–í–µ–¥–∏—Ç–µ –æ–±—â–∏–π —É—á–µ—Ç —Å —Å–µ–º—å—ë–π. –ü–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É –ª–∏—á–Ω—ã–º –∏ —Å–µ–º–µ–π–Ω—ã–º —Ä–µ–∂–∏–º–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –°–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é –∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∏–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ."""

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if referral_message:
        text += referral_message

    return text


@router.message(Command("start"))
async def cmd_start(
    message: types.Message,
    state: FSMContext,
    command: Optional[CommandObject] = None,
    lang: str = 'ru'
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç –≤ –∫–æ–º–∞–Ω–¥–µ
    referral_code = None
    family_token = None
    start_args = None
    if command and command.args:
        start_args = command.args.strip()
    else:
        data = await state.get_data()
        stored_args = data.get('start_command_args')
        if stored_args:
            start_args = stored_args.strip()

    if start_args:
        if start_args.startswith('ref_'):
            # –§–æ—Ä–º–∞—Ç: /start ref_ABCD1234
            referral_code = start_args[4:]
        elif start_args.startswith('family_'):
            # –§–æ—Ä–º–∞—Ç: /start family_TOKEN
            family_token = start_args[7:]
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile = await get_or_create_profile(
        telegram_id=user_id,
        language_code=message.from_user.language_code
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    # –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—ã–º, –µ—Å–ª–∏ —É –Ω–µ–≥–æ:
    # 1. –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ç—Ä–∞—Ç–∞—Ö
    # 2. –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –¥–æ—Ö–æ–¥–∞—Ö
    # 3. –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫ (–≤–∫–ª—é—á–∞—è –∏—Å—Ç—ë–∫—à–∏–µ)
    has_expenses = await Expense.objects.filter(profile=profile).aexists()
    has_incomes = await Income.objects.filter(profile=profile).aexists()
    has_subscription_history = await Subscription.objects.filter(profile=profile).aexists()

    is_new_user = not has_expenses and not has_incomes and not has_subscription_history

    logger.info(f"[START] User {user_id} status: has_expenses={has_expenses}, has_incomes={has_incomes}, has_subscription_history={has_subscription_history}, is_new_user={is_new_user}, is_beta_tester={profile.is_beta_tester}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —è–∑—ã–∫—É —Å–∏—Å—Ç–µ–º—ã Telegram
    if profile.language_code:
        display_lang = profile.language_code
    else:
        # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É —è–∑—ã–∫—É Telegram
        user_language_code = message.from_user.language_code or 'en'
        display_lang = 'ru' if user_language_code.startswith('ru') else 'en'
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        profile.language_code = display_lang
        await profile.asave()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —Å–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç
    if family_token:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        from bot.routers.household import process_family_invite
        await process_family_invite(message, family_token)
        return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    if not profile.accepted_privacy:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã /start –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏
        await state.update_data(start_command_args=start_args)
        short = get_text('short_privacy_for_acceptance', display_lang)
        policy_url = get_privacy_url_for(display_lang)
        text_priv = (
            f"<b>üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b>\n\n"
            f"{short}\n\n"
            f"–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: <a href=\"{policy_url}\">–ø–æ —Å—Å—ã–ª–∫–µ</a>"
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=get_text('btn_decline_privacy', display_lang), callback_data='privacy_decline'),
                InlineKeyboardButton(text=get_text('btn_accept_privacy', display_lang), callback_data='privacy_accept'),
            ]
        ])
        await message.answer(text_priv, reply_markup=kb, parse_mode='HTML')
        return

    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    categories_created = await create_default_categories(user_id)
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
    income_categories_created = await create_default_income_categories(user_id)
    
    # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø–æ —Å–µ–º–µ–π–Ω–æ–π —Å—Å—ã–ª–∫–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if family_token:
        try:
            from bot.services.family import get_invite_by_token
            inv = await get_invite_by_token(family_token)
            if inv and inv.is_valid():
                inviter_tid = inv.inviter.telegram_id
                if display_lang == 'en':
                    confirm_text = (
                        "üë• Do you want to share a family budget with user "
                        f"<code>{inviter_tid}</code>?"
                    )
                    yes_text, no_text = "‚úÖ Yes", "‚úñÔ∏è No"
                else:
                    confirm_text = (
                        "üë• –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Å—Ç–∏ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –±—é–¥–∂–µ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º "
                        f"<code>{inviter_tid}</code>?"
                    )
                    yes_text, no_text = "‚úÖ –î–∞", "‚úñÔ∏è –ù–µ—Ç"
                from aiogram.utils.keyboard import InlineKeyboardBuilder
                kb = InlineKeyboardBuilder()
                kb.button(text=yes_text, callback_data=f"family_accept:{inv.token}")
                kb.button(text=no_text, callback_data="close")
                kb.adjust(2)
                await message.answer(confirm_text, reply_markup=kb.as_markup(), parse_mode="HTML")
            else:
                await message.answer(
                    "Invite link is invalid or expired" if display_lang=='en' else "–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è"
                )
        except Exception as e:
            logger.error(f"Error handling family invite: {e}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    referral_message = ""
    if is_new_user and referral_code:
        logger.info(f"[START] Processing referral code '{referral_code}' for new user {user_id}")
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É Telegram Stars
            affiliate_referral = await process_referral_link(user_id, referral_code)
            
            if affiliate_referral:
                # –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ Telegram Stars
                # –í–ê–ñ–ù–û: –ù–ï –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–æ–≤–æ–π!
                if display_lang == 'en':
                    referral_message = "\n\n‚≠ê You joined via an affiliate link! Your friend will receive commission from your purchases."
                else:
                    referral_message = "\n\n‚≠ê –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–µ! –í–∞—à –¥—Ä—É–≥ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é —Å –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫."

                logger.info(f"New user {user_id} registered via Telegram Stars affiliate link from {affiliate_referral.referrer.telegram_id}")
                # –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –±–æ–Ω—É—Å–Ω—ã–º–∏ –¥–Ω—è–º–∏ –ü–û–õ–ù–û–°–¢–¨–Æ –£–î–ê–õ–ï–ù–ê
                # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ Telegram Stars
        except Exception as e:
            logger.error(f"Error processing referral code: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥–ø–∏—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ beta_tester)
    if not profile.is_beta_tester:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        existing_trial = await profile.subscriptions.filter(
            type='trial'
        ).aexists()
        
        has_active_subscription = await profile.subscriptions.filter(
            is_active=True,
            end_date__gt=timezone.now()
        ).aexists()
        
        logger.info(f"[START] Subscription check for user {user_id}: is_new_user={is_new_user}, has_active_subscription={has_active_subscription}, existing_trial={existing_trial}")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
        # 1. –≠—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        # 2. –£ –Ω–µ–≥–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        # 3. –£ –Ω–µ–≥–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        # 4. –û–Ω –Ω–µ beta_tester
        if is_new_user and not has_active_subscription and not existing_trial:
            try:
                trial_end = timezone.now() + timedelta(days=7)
                await Subscription.objects.acreate(
                    profile=profile,
                    type='trial',
                    payment_method='trial',
                    amount=0,
                    start_date=timezone.now(),
                    end_date=trial_end,
                    is_active=True
                )
                logger.info(f"[START] Successfully created trial subscription for new user {user_id}, expires: {trial_end}")
            except Exception as e:
                logger.error(f"[START] Failed to create trial subscription for user {user_id}: {e}")
        else:
            logger.info(f"[START] Not creating trial subscription for user {user_id}: is_new_user={is_new_user}, has_active_subscription={has_active_subscription}, existing_trial={existing_trial}")
    else:
        logger.info(f"[START] User {user_id} is a beta tester, skipping trial subscription")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_commands(message.bot, user_id)

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = get_welcome_message(display_lang, referral_message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    await send_message_with_cleanup(message, state, text, parse_mode="HTML")
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã /start –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await state.update_data(start_command_args=None)




@router.callback_query(F.data == "menu")
async def callback_menu(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ callback"""
    text = f"{get_text('main_menu', lang)}\n\n{get_text('choose_action', lang)}"
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–±—ç–∫–∞
    user_settings = await get_user_settings(callback.from_user.id)
    cashback_enabled = user_settings.cashback_enabled if hasattr(user_settings, 'cashback_enabled') else True
    
    sent_message = await send_message_with_cleanup(
        callback, state, text,
        reply_markup=main_menu_keyboard(lang, cashback_enabled)
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.update_data(main_menu_message_id=sent_message.message_id)
    
    await callback.answer()


@router.callback_query(F.data == 'privacy_accept')
async def privacy_accept(callback: types.CallbackQuery, state: FSMContext):
    try:
        profile = await Profile.objects.aget(telegram_id=callback.from_user.id)
        profile.accepted_privacy = True
        await profile.asave()
        await callback.answer('–°–æ–≥–ª–∞—Å–∏–µ –ø—Ä–∏–Ω—è—Ç–æ')
        try:
            await callback.message.delete()
        except Exception:
            pass

        # –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id
        display_lang = profile.language_code or 'ru'

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        categories_created = await create_default_categories(user_id)
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
        income_categories_created = await create_default_income_categories(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        # –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—ã–º, –µ—Å–ª–∏ —É –Ω–µ–≥–æ:
        # 1. –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ç—Ä–∞—Ç–∞—Ö
        # 2. –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –¥–æ—Ö–æ–¥–∞—Ö
        # 3. –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫ (–≤–∫–ª—é—á–∞—è –∏—Å—Ç—ë–∫—à–∏–µ)
        has_expenses = await Expense.objects.filter(profile=profile).aexists()
        has_incomes = await Income.objects.filter(profile=profile).aexists()
        has_subscription_history = await Subscription.objects.filter(profile=profile).aexists()

        is_new_user = not has_expenses and not has_incomes and not has_subscription_history

        logger.info(f"[PRIVACY_ACCEPT] User {user_id} status: has_expenses={has_expenses}, has_incomes={has_incomes}, has_subscription_history={has_subscription_history}, is_new_user={is_new_user}, is_beta_tester={profile.is_beta_tester}")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –Ω–µ beta_tester)
        if not profile.is_beta_tester and is_new_user:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            existing_trial = await profile.subscriptions.filter(
                type='trial'
            ).aexists()

            has_active_subscription = await profile.subscriptions.filter(
                is_active=True,
                end_date__gt=timezone.now()
            ).aexists()

            logger.info(f"[PRIVACY_ACCEPT] Subscription check for user {user_id}: is_new_user={is_new_user}, has_active_subscription={has_active_subscription}, existing_trial={existing_trial}")

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
            # 1. –≠—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            # 2. –£ –Ω–µ–≥–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            # 3. –£ –Ω–µ–≥–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            # 4. –û–Ω –Ω–µ beta_tester
            if not has_active_subscription and not existing_trial:
                try:
                    trial_end = timezone.now() + timedelta(days=7)
                    await Subscription.objects.acreate(
                        profile=profile,
                        type='trial',
                        payment_method='trial',
                        amount=0,
                        start_date=timezone.now(),
                        end_date=trial_end,
                        is_active=True
                    )
                    logger.info(f"[PRIVACY_ACCEPT] Successfully created trial subscription for new user {user_id}, expires: {trial_end}")
                except Exception as e:
                    logger.error(f"[PRIVACY_ACCEPT] Failed to create trial subscription for user {user_id}: {e}")
            else:
                logger.info(f"[PRIVACY_ACCEPT] Not creating trial subscription for user {user_id}: has_active_subscription={has_active_subscription}, existing_trial={existing_trial}")
        elif profile.is_beta_tester:
            logger.info(f"[PRIVACY_ACCEPT] User {user_id} is a beta tester, skipping trial subscription")

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã /start –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        data = await state.get_data()
        start_args = data.get('start_command_args')

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        referral_message = ""
        if is_new_user and start_args and start_args.startswith('ref_'):
            referral_code = start_args[4:]
            logger.info(f"[PRIVACY_ACCEPT] Processing referral code '{referral_code}' for new user {user_id}")
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É Telegram Stars
                affiliate_referral = await process_referral_link(user_id, referral_code)

                if affiliate_referral:
                    # –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ Telegram Stars
                    if display_lang == 'en':
                        referral_message = "\n\n‚≠ê You joined via an affiliate link! Your friend will receive commission from your purchases."
                    else:
                        referral_message = "\n\n‚≠ê –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–µ! –í–∞—à –¥—Ä—É–≥ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é —Å –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫."

                    logger.info(f"New user {user_id} registered via Telegram Stars affiliate link after privacy acceptance")
            except Exception as e:
                logger.error(f"Error processing referral code after privacy acceptance: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update_user_commands(callback.bot, user_id)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = get_welcome_message(display_lang, referral_message)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(text, parse_mode="HTML")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã /start –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await state.update_data(start_command_args=None)

    except Exception as e:
        import traceback
        logger.error(f"privacy_accept error: {e}\n{traceback.format_exc()}")
        await callback.answer('–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start', show_alert=True)


@router.callback_query(F.data == 'privacy_decline')
async def privacy_decline(callback: types.CallbackQuery):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
    try:
        profile = await Profile.objects.aget(telegram_id=callback.from_user.id)
        display_lang = profile.language_code or 'ru'
    except Exception:
        display_lang = 'ru'
    msg = get_text('privacy_decline_message', display_lang)
    await callback.message.edit_text(msg)
    await callback.answer()






@router.callback_query(F.data == "start")
async def callback_start(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ —á–µ—Ä–µ–∑ callback"""
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_commands(callback.bot, callback.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = get_welcome_message(lang)

    try:
        await callback.message.edit_text(text, parse_mode="HTML")
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await send_message_with_cleanup(callback, state, text, parse_mode="HTML")
    
    await callback.answer()


@router.callback_query(F.data == "close")
async def close_message(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await callback.message.delete()
    # –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é
    # –ù–ï —Ç—Ä–æ–≥–∞–µ–º —Ñ–ª–∞–≥ persistent_cashback_menu - –æ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ cashback.py
    await state.update_data(
        last_menu_message_id=None
    )


@router.callback_query(F.data == "close_menu")
async def close_menu_compat(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ callback 'close_menu' –∫–∞–∫ –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è"""
    await callback.message.delete()
    await state.update_data(
        last_menu_message_id=None
    )
