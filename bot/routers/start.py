"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
"""
from aiogram import Router, F, types
from aiogram.filters import Command, CommandObject
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
import asyncio
import logging

from bot.utils import get_text
from bot.services.profile import get_or_create_profile
from bot.keyboards import main_menu_keyboard, back_close_keyboard
from bot.services.category import create_default_categories
from bot.utils.message_utils import send_message_with_cleanup, delete_message_with_effect
from bot.utils.commands import update_user_commands
from expenses.models import Subscription, Profile, ReferralBonus
from django.utils import timezone
from datetime import timedelta

logger = logging.getLogger(__name__)

router = Router(name="start")


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext, command: CommandObject, lang: str = 'ru'):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    user_id = message.from_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ —Ä—É—Å—Å–∫–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
    user_language_code = message.from_user.language_code or 'en'
    display_lang = 'ru' if user_language_code.startswith('ru') else 'en'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ –∫–æ–º–∞–Ω–¥–µ
    referral_code = None
    if command.args:
        # –§–æ—Ä–º–∞—Ç: /start ref_ABCD1234
        args = command.args.strip()
        if args.startswith('ref_'):
            referral_code = args[4:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å ref_
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile = await get_or_create_profile(
        telegram_id=user_id,
        language_code=message.from_user.language_code
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ –Ω–∞–ª–∏—á–∏—é –ø–æ–¥–ø–∏—Å–æ–∫)
    is_new_user = not await Subscription.objects.filter(profile=profile).aexists()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
    if profile.language_code != display_lang:
        profile.language_code = display_lang
        await profile.asave()
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    categories_created = await create_default_categories(user_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    referral_message = ""
    if is_new_user and referral_code:
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ –∫–æ–¥—É
            referrer = await Profile.objects.filter(referral_code=referral_code).afirst()
            if referrer and referrer.telegram_id != user_id:
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                profile.referrer = referrer
                await profile.asave()
                
                if display_lang == 'en':
                    referral_message = "\n\nüéÅ You joined via a referral link! After paying for your first subscription, your friend will receive a bonus."
                else:
                    referral_message = "\n\nüéÅ –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç –±–æ–Ω—É—Å."
                
                logger.info(f"New user {user_id} registered with referral code from {referrer.telegram_id}")
        except Exception as e:
            logger.error(f"Error processing referral code: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥–ø–∏—Å–∫–∞
    has_subscription = await profile.subscriptions.filter(
        is_active=True,
        end_date__gt=timezone.now()
    ).aexists()
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 7 –¥–Ω–µ–π
    if not has_subscription and is_new_user:
        trial_end = timezone.now() + timedelta(days=7)
        await Subscription.objects.acreate(
            profile=profile,
            type='trial',
            payment_method='trial',
            amount=0,
            start_date=timezone.now(),
            end_date=trial_end,
            is_active=True
        )
        logger.info(f"Created trial subscription for new user {user_id}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_commands(message.bot, user_id)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    if display_lang == 'en':
        text = """<b>ü™ô Coins - your expense tracking assistant</b>

<b>üí∏ Adding expenses:</b>
Send a text or voice message:
"Coffee 200" or "Gas 4095 station"

<b>üìÅ Expense categories:</b>
Customize categories for yourself - add your own, delete unnecessary ones. The system will automatically determine the category for each expense.

<b>üí≥ Bank card cashbacks:</b>
Add information about cashbacks on your bank cards to have it always at hand. All cashbacks are calculated automatically and displayed in reports.

<b>üìä Expense reports:</b>
Request a report in natural language:
"Show expenses for July" or "How much did I spend yesterday"
Get beautiful PDF reports with charts"""
    else:
        text = """<b>ü™ô Coins - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É—á–µ—Ç–µ —Ä–∞—Å—Ö–æ–¥–æ–≤</b>

<b>üí∏ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
"–ö–æ—Ñ–µ 200" –∏–ª–∏ "–î–∏–∑–µ–ª—å 4095 –ê–ó–°"

<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:</b>
–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥ —Å–µ–±—è - –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏, —É–¥–∞–ª—è–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞—Ç—ã.

<b>üí≥ –ö–µ—à–±—ç–∫–∏ –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –∫–∞—Ä—Ç–∞–º:</b>
–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ—à–±–µ–∫–∞—Ö –ø–æ –≤–∞—à–∏–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –∫–∞—Ä—Ç–∞–º, —á—Ç–æ–±—ã –æ–Ω–∞ –≤—Å–µ–≥–¥–∞ –±—ã–ª–∞ –ø–æ–¥ —Ä—É–∫–æ–π. –í—Å–µ –∫–µ—à–±–µ–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –æ—Ç—á–µ—Ç–∞—Ö.

<b>üìä –û—Ç—á–µ—Ç—ã –æ —Ç—Ä–∞—Ç–∞—Ö:</b>
–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –æ—Ç—á–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:
"–ü–æ–∫–∞–∂–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –∏—é–ª—å" –∏–ª–∏ "–°–∫–æ–ª—å–∫–æ —è –ø–æ—Ç—Ä–∞—Ç–∏–ª –≤—á–µ—Ä–∞"
–ü–æ–ª—É—á–∞–π—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ PDF –æ—Ç—á–µ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    text += referral_message
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    await send_message_with_cleanup(message, state, text, parse_mode="HTML")




@router.callback_query(F.data == "menu")
async def callback_menu(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ callback"""
    text = f"{get_text('main_menu', lang)}\n\n{get_text('choose_action', lang)}"
    
    await send_message_with_cleanup(
        callback, state, text,
        reply_markup=main_menu_keyboard(lang)
    )
    await callback.answer()






@router.callback_query(F.data == "start")
async def callback_start(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ —á–µ—Ä–µ–∑ callback"""
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_commands(callback.bot, callback.from_user.id)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    if lang == 'en':
        text = """<b>ü™ô Coins - your expense tracking assistant</b>

<b>üí∏ Adding expenses:</b>
Send a text or voice message:
"Coffee 200" or "Gas 4095 station"

<b>üìÅ Expense categories:</b>
Customize categories for yourself - add your own, delete unnecessary ones. The system will automatically determine the category for each expense.

<b>üí≥ Bank card cashbacks:</b>
Add information about cashbacks on your bank cards to have it always at hand. All cashbacks are calculated automatically and displayed in reports.

<b>üìä Expense reports:</b>
Request a report in natural language:
"Show expenses for July" or "How much did I spend yesterday"
Get beautiful PDF reports with charts"""
    else:
        text = """<b>ü™ô Coins - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É—á–µ—Ç–µ —Ä–∞—Å—Ö–æ–¥–æ–≤</b>

<b>üí∏ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
"–ö–æ—Ñ–µ 200" –∏–ª–∏ "–î–∏–∑–µ–ª—å 4095 –ê–ó–°"

<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:</b>
–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥ —Å–µ–±—è - –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏, —É–¥–∞–ª—è–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞—Ç—ã.

<b>üí≥ –ö–µ—à–±—ç–∫–∏ –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –∫–∞—Ä—Ç–∞–º:</b>
–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ—à–±–µ–∫–∞—Ö –ø–æ –≤–∞—à–∏–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –∫–∞—Ä—Ç–∞–º, —á—Ç–æ–±—ã –æ–Ω–∞ –≤—Å–µ–≥–¥–∞ –±—ã–ª–∞ –ø–æ–¥ —Ä—É–∫–æ–π. –í—Å–µ –∫–µ—à–±–µ–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –æ—Ç—á–µ—Ç–∞—Ö.

<b>üìä –û—Ç—á–µ—Ç—ã –æ —Ç—Ä–∞—Ç–∞—Ö:</b>
–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –æ—Ç—á–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:
"–ü–æ–∫–∞–∂–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –∏—é–ª—å" –∏–ª–∏ "–°–∫–æ–ª—å–∫–æ —è –ø–æ—Ç—Ä–∞—Ç–∏–ª –≤—á–µ—Ä–∞"
–ü–æ–ª—É—á–∞–π—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ PDF –æ—Ç—á–µ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    
    try:
        await callback.message.edit_text(text, parse_mode="HTML")
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await send_message_with_cleanup(callback, state, text, parse_mode="HTML")
    
    await callback.answer()


@router.callback_query(F.data == "close")
async def close_message(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await callback.message.delete()
    # –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é
    await state.update_data(last_menu_message_id=None)