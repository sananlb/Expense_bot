"""
Router for Top-5 quick operations
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from datetime import date, timedelta
from calendar import monthrange
from decimal import Decimal
import logging

from bot.utils import get_text, format_amount
from bot.utils.message_utils import send_message_with_cleanup
from bot.services.expense import create_expense
from bot.services.income import create_income
from bot.services.top5 import (
    calculate_top5_sync, build_top5_keyboard, save_snapshot,
    get_current_cashback_amount,
)
from expenses.models import Profile, Top5Snapshot, Top5Pin
from asgiref.sync import sync_to_async


logger = logging.getLogger(__name__)

router = Router(name="top5")


def _get_rolling_90d_window(today: date) -> tuple[date, date]:
    """–û–∫–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 90 –¥–Ω–µ–π –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è."""
    from datetime import timedelta
    window_end = today
    window_start = today - timedelta(days=89)
    return window_start, window_end


@router.callback_query(F.data == "top5_menu")
async def show_top5(callback: CallbackQuery, state: FSMContext, lang: str = 'ru'):
    try:
        today = date.today()
        window_start, window_end = _get_rolling_90d_window(today)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile = await sync_to_async(Profile.objects.filter(telegram_id=callback.from_user.id).first)()
        if not profile:
            await callback.answer(get_text('error_occurred', lang), show_alert=True)
            return

        # –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å —Å–Ω–µ–ø—à–æ—Ç, –∏–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º
        snapshot = await sync_to_async(Top5Snapshot.objects.filter(profile=profile).first)()
        items = []
        if snapshot and snapshot.window_start == window_start and snapshot.window_end == window_end:
            items = snapshot.items or []
        else:
            items, digest = await calculate_top5_sync(profile, window_start, window_end)
            await save_snapshot(profile, window_start, window_end, items, digest)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        title_line = get_text('top5_info_title', lang)
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –∫—É—Ä—Å–∏–≤–æ–º —á–µ—Ä–µ–∑ HTML
        hint_raw = get_text('top5_info_pin_hint', lang)
        # –£–±–µ—Ä—ë–º markdown-—Å–∏–º–≤–æ–ª—ã –∏ –æ—Å—Ç–∞–≤–∏–º HTML –∫—É—Ä—Å–∏–≤
        hint_line = hint_raw.replace('üí° ', '').replace('_', '').replace('*', '')
        text = f"{title_line}\n\nüí° <i>{hint_line}</i>"

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        if not items:
            text += f"\n\n{get_text('top5_empty', lang)}"
        kb = build_top5_keyboard(items, lang)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∏ –¥—Ä—É–≥–∏–µ –º–µ–Ω—é: —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ
        await send_message_with_cleanup(callback, state, text, reply_markup=kb, parse_mode='HTML')
        await callback.answer()
    except Exception as e:
        logger.error(f"Error showing Top-5: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¢–æ–ø-5", show_alert=True)


@router.callback_query(F.data.startswith("t5:"))
async def handle_top5_click(callback: CallbackQuery, lang: str = 'ru'):
    try:
        key = callback.data.split(':', 1)[1]
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–Ω–µ–ø—à–æ—Ç
        profile = await sync_to_async(Profile.objects.filter(telegram_id=callback.from_user.id).first)()
        if not profile:
            await callback.answer(get_text('error_occurred', lang), show_alert=True)
            return
        snapshot = await sync_to_async(Top5Snapshot.objects.filter(profile=profile).first)()
        item = None
        if snapshot and snapshot.items:
            for it in snapshot.items:
                if it.get('id') == key:
                    item = it
                    break
        if not item:
            await callback.answer(get_text('top5_empty', lang), show_alert=True)
            return

        # –°–æ–∑–¥–∞—ë–º –æ–ø–µ—Ä–∞—Ü–∏—é
        op_type = item.get('op_type')
        title = item.get('title_display') or ''
        category_id = item.get('category_id') or None
        amount = Decimal(str(item.get('amount_norm')))
        currency = (item.get('currency') or 'RUB').upper()

        if op_type == 'income':
            income = await create_income(
                user_id=callback.from_user.id,
                amount=amount,
                category_id=category_id,
                description=title,
                currency=currency
            )
            if income:
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –æ–±—ã—á–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–æ—Ö–æ–¥–∞
                from expenses.models import Income as IncomeModel
                income_obj = await sync_to_async(IncomeModel.objects.select_related('category','profile').get)(id=income.id)
                from bot.utils.expense_messages import format_income_added_message
                msg = await format_income_added_message(income_obj, income_obj.category, lang=lang)
                await callback.message.answer(msg, parse_mode='HTML')
            else:
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ—Ö–æ–¥", show_alert=True)
        else:
            expense = await create_expense(
                user_id=callback.from_user.id,
                amount=amount,
                category_id=category_id,
                description=title,
                currency=currency
            )
            if expense:
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –æ–±—ã—á–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞, —Å –∫–µ—à–±—ç–∫–æ–º
                cb_amount = await get_current_cashback_amount(profile, category_id or 0, amount, date.today())
                from expenses.models import Expense as ExpenseModel
                expense_obj = await sync_to_async(ExpenseModel.objects.select_related('category','profile').get)(id=expense.id)
                cashback_text = ""
                if cb_amount and cb_amount > 0:
                    cb_text = format_amount(float(cb_amount), currency=currency, lang=lang)
                    parts = cb_text.split(' ')
                    if len(parts) == 2:
                        cashback_text = f" (+{parts[0]} {parts[1]})"
                    else:
                        cashback_text = f" (+{cb_text})"
                from bot.utils.expense_messages import format_expense_added_message
                msg = await format_expense_added_message(
                    expense=expense_obj,
                    category=expense_obj.category,
                    cashback_text=cashback_text,
                    lang=lang
                )
                await callback.message.answer(msg, parse_mode='HTML')
            else:
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Ö–æ–¥", show_alert=True)
    except Exception as e:
        logger.error(f"Error handling Top-5 click: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏", show_alert=True)


@router.message(F.pinned_message)
async def on_pinned_message(msg: Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id/message_id, –µ—Å–ª–∏ –∑–∞–∫—Ä–µ–ø–∏–ª–∏ –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¢–æ–ø‚Äë5."""
    try:
        pinned = msg.pinned_message
        if not pinned:
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¢–æ–ø‚Äë5
        if not pinned.from_user or not pinned.from_user.is_bot:
            return
        if not pinned.text:
            return
        if '5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö' not in pinned.text:
            return
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —á–∞—Ç—É (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ chat.id == telegram_id)
        profile = await sync_to_async(Profile.objects.filter(telegram_id=msg.chat.id).first)()
        if not profile:
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∏–Ω
        await sync_to_async(Top5Pin.objects.update_or_create)(
            profile=profile,
            defaults={'chat_id': msg.chat.id, 'message_id': pinned.message_id}
        )
    except Exception as e:
        logger.error(f"Error handling pinned message: {e}")
