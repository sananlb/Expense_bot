"""
–†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF –æ—Ç—á–µ—Ç–∞–º–∏
"""
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, BufferedInputFile
from datetime import datetime, date
import logging
import io

from ..utils.message_utils import send_message_with_cleanup
from ..services.pdf_report import PDFReportService
from ..decorators import require_subscription
from expenses.models import Profile

router = Router(name="pdf_report")
logger = logging.getLogger(__name__)


@router.callback_query(lambda c: c.data == "pdf_report_select_month")
async def show_month_selection(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è PDF –æ—Ç—á–µ—Ç–∞"""
    await callback.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
    now = datetime.now()
    current_year = now.year
    current_month = now.month
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 6 –º–µ—Å—è—Ü–µ–≤
    months = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
              '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
    
    keyboard_buttons = []
    for i in range(6):
        month = current_month - i
        year = current_year
        
        if month <= 0:
            month += 12
            year -= 1
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±—É–¥—É—â–∏–µ –º–µ—Å—è—Ü—ã
        if year > current_year or (year == current_year and month > current_month):
            continue
            
        button_text = f"{months[month-1]} {year}"
        callback_data = f"pdf_report_{year}_{month}"
        
        keyboard_buttons.append([
            InlineKeyboardButton(text=button_text, callback_data=callback_data)
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="show_month_start")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(
        "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è PDF –æ—Ç—á–µ—Ç–∞</b>\n\n"
        "–Ø —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è –≤–∞—Å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("pdf_report_") and not c.data == "pdf_report_select_month")
async def process_pdf_report_request(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞"""
    await callback.answer()
    
    # –ü–∞—Ä—Å–∏–º –≥–æ–¥ –∏ –º–µ—Å—è—Ü
    parts = callback.data.split("_")
    year = int(parts[1])
    month = int(parts[2])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    progress_msg = await callback.message.edit_text(
        "‚è≥ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...</b>\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        pdf_service = PDFReportService()
        pdf_bytes = await pdf_service.generate_monthly_report(
            user_id=callback.from_user.id,
            year=year,
            month=month
        )
        
        if not pdf_bytes:
            await progress_msg.edit_text(
                "‚ùå <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞</b>\n\n"
                "–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ö–æ–¥–æ–≤."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        months = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å',
                  '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']
        filename = f"–û—Ç—á–µ—Ç_Coins_{months[month-1]}_{year}.pdf"
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        pdf_file = BufferedInputFile(pdf_bytes, filename=filename)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
        await callback.message.answer_document(
            document=pdf_file,
            caption=(
                f"üìä <b>–û—Ç—á–µ—Ç –∑–∞ {months[month-1]} {year}</b>\n\n"
                "–í –æ—Ç—á–µ—Ç–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è:\n"
                "‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
                "‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
                "‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ —Ç—Ä–∞—Ç –ø–æ –¥–Ω—è–º\n"
                "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–±–µ–∫–µ\n\n"
                "üí° <i>–°–æ–≤–µ—Ç: —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤</i>"
            )
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        await progress_msg.delete()
        
    except Exception as e:
        logger.error(f"Error generating report: {e}")
        await progress_msg.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


