"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–µ—à–±—ç–∫–æ–≤
"""
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import date, datetime
from decimal import Decimal
from typing import List
import asyncio

from ..services.cashback import (
    get_user_cashbacks, add_cashback, update_cashback, 
    delete_cashback, get_cashback_by_id, format_cashback_note
)
from ..services.category import get_user_categories
from expenses.models import Cashback
from ..utils.message_utils import send_message_with_cleanup, delete_message_with_effect
from ..utils import get_text

router = Router(name="cashback")


async def restore_cashback_menu_if_needed(state: FSMContext, bot, chat_id: int):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∫–µ—à–±–µ–∫–∞ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ"""
    data = await state.get_data()
    if data.get('persistent_cashback_menu'):
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –º–µ—Å—è—Ü
        month = data.get('cashback_menu_month')
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ show_cashback_menu
        from aiogram.types import User, Chat
        fake_user = User(id=chat_id, is_bot=False, first_name="User")
        fake_chat = Chat(id=chat_id, type="private")
        fake_message = types.Message(
            message_id=0,
            date=datetime.now(),
            chat=fake_chat,
            from_user=fake_user,
            text=""
        )
        fake_message.bot = bot
        await show_cashback_menu(fake_message, state, month=month)


class CashbackForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–±—ç–∫–∞"""
    waiting_for_category = State()
    waiting_for_bank = State()
    waiting_for_percent = State()  # –¢–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç –≤–≤–æ–¥–∏—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    choosing_cashback_to_edit = State()
    editing_bank = State()
    editing_percent = State()


@router.message(Command("cashback"))
async def cmd_cashback(message: types.Message, state: FSMContext, lang: str = 'ru'):
    """–ö–æ–º–∞–Ω–¥–∞ /cashback - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ—à–±—ç–∫–∞–º–∏"""
    await show_cashback_menu(message, state, lang)


async def show_cashback_menu(message: types.Message | types.CallbackQuery, state: FSMContext, lang: str = 'ru', month: int = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–µ—à–±—ç–∫–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if isinstance(message, types.CallbackQuery):
        user_id = message.from_user.id
    else:
        user_id = message.from_user.id
    current_date = date.today()
    target_month = month or current_date.month
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –º–µ–Ω—é –∫–µ—à–±–µ–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ
    await state.update_data(
        persistent_cashback_menu=True,
        cashback_menu_month=target_month,
        cashback_menu_message_id=None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–µ—à–±—ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cashbacks = await get_user_cashbacks(user_id, target_month)
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if state:
        state_data = await state.get_data()
        lang = state_data.get('lang', 'ru')
    else:
        lang = 'ru'
    
    # –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
    month_names = {
        1: get_text('january', lang).capitalize(),
        2: get_text('february', lang).capitalize(),
        3: get_text('march', lang).capitalize(),
        4: get_text('april', lang).capitalize(),
        5: get_text('may', lang).capitalize(),
        6: get_text('june', lang).capitalize(),
        7: get_text('july', lang).capitalize(),
        8: get_text('august', lang).capitalize(),
        9: get_text('september', lang).capitalize(),
        10: get_text('october', lang).capitalize(),
        11: get_text('november', lang).capitalize(),
        12: get_text('december', lang).capitalize()
    }
    
    if not cashbacks:
        text = f"üí≥ {get_text('cashbacks', lang)} {month_names[target_month]}\n\n"
        text += f"{get_text('no_cashback_info', lang)}\n\n"
        text += get_text('add_cashback_hint', lang)
        
        # –ï—Å–ª–∏ –∫–µ—à–±–µ–∫–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=get_text('add_cashback', lang), callback_data="cashback_add")],
            [InlineKeyboardButton(text=get_text('close', lang), callback_data="close_cashback_menu")]
        ])
    else:
        text = format_cashback_note(cashbacks, target_month)
        
        # –ï—Å–ª–∏ –∫–µ—à–±–µ–∫–∏ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=get_text('add_cashback', lang), callback_data="cashback_add"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="cashback_edit")
            ],
            [
                InlineKeyboardButton(text=get_text('remove_cashback', lang), callback_data="cashback_remove"),
                InlineKeyboardButton(text=get_text('remove_all_cashback', lang), callback_data="cashback_remove_all")
            ],
            [InlineKeyboardButton(text=get_text('close', lang), callback_data="close_cashback_menu")]
        ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –∫–µ—à–±–µ–∫–∞ –æ—Å–æ–±—ã–º —Å–ø–æ—Å–æ–±–æ–º
    if isinstance(message, (types.Message, types.CallbackQuery)):
        bot = message.bot if hasattr(message, 'bot') else message.message.bot
        chat_id = message.chat.id if hasattr(message, 'chat') else message.message.chat.id
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –∫–µ—à–±–µ–∫–∞ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        data = await state.get_data()
        old_cashback_menu_id = data.get('cashback_menu_message_id')
        if old_cashback_menu_id:
            try:
                await bot.delete_message(chat_id=chat_id, message_id=old_cashback_menu_id)
            except:
                pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
        sent_message = await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–µ–Ω—é –∫–µ—à–±–µ–∫–∞ –≤ –û–ë–ê –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç—ã
        await state.update_data(
            cashback_menu_message_id=sent_message.message_id,
            last_menu_message_id=sent_message.message_id,  # –í–ê–ñ–ù–û: —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ last_menu –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            persistent_cashback_menu=True,
            cashback_menu_month=target_month
        )


@router.callback_query(lambda c: c.data == "cashback_menu")
async def callback_cashback_menu(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–µ—à–±—ç–∫–æ–≤ —á–µ—Ä–µ–∑ callback"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    from bot.services.subscription import check_subscription, subscription_required_message, get_subscription_button
    
    has_subscription = await check_subscription(callback.from_user.id)
    if not has_subscription:
        await callback.message.edit_text(
            subscription_required_message() + "\n\nüí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ—à–±—ç–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π.",
            reply_markup=get_subscription_button(),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    await show_cashback_menu(callback, state)
    await callback.answer()


@router.callback_query(lambda c: c.data == "close_cashback_menu")
async def close_cashback_menu(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é –∫–µ—à–±–µ–∫–∞"""
    await callback.message.delete()
    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–µ–Ω—é –∫–µ—à–±–µ–∫–∞ –∏ –æ–±–∞ ID
    await state.update_data(
        cashback_menu_message_id=None,
        last_menu_message_id=None,  # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º last_menu_message_id
        persistent_cashback_menu=False
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "cashback_add")
async def add_cashback_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–±—ç–∫–∞"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    lang = data.get('lang', 'ru')
    
    categories = await get_user_categories(user_id)
    
    if not categories:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboard_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    keyboard_buttons.append([
        InlineKeyboardButton(
            text="üåê –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", 
            callback_data="cashback_cat_all"
        )
    ])
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(categories), 2):
        row = [InlineKeyboardButton(
            text=f"{categories[i].icon} {categories[i].name}", 
            callback_data=f"cashback_cat_{categories[i].id}"
        )]
        if i + 1 < len(categories):
            row.append(InlineKeyboardButton(
                text=f"{categories[i + 1].icon} {categories[i + 1].name}", 
                callback_data=f"cashback_cat_{categories[i + 1].id}"
            ))
        keyboard_buttons.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard_buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cashback_menu")])
    
    text = f"{get_text('adding_cashback', lang)}\n\n{get_text('choose_category', lang)}"
    
    try:
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
    except Exception:
        await send_message_with_cleanup(callback, state, 
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
    await state.set_state(CashbackForm.waiting_for_category)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("cashback_cat_"), CashbackForm.waiting_for_category)
async def process_cashback_category(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if callback.data == "cashback_cat_all":
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º None
        await state.update_data(category_id=None)
    else:
        category_id = int(callback.data.split("_")[-1])
        await state.update_data(category_id=category_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    banks = [
        "–¢-–ë–∞–Ω–∫", "–ê–ª—å—Ñ–∞", "–í–¢–ë", "–°–±–µ—Ä", 
        "–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω", "–Ø–Ω–¥–µ–∫—Å", "–û–∑–æ–Ω"
    ]
    
    keyboard_buttons = []
    for i in range(0, len(banks), 2):
        row = [InlineKeyboardButton(text=banks[i], callback_data=f"cashback_bank_{banks[i]}")]
        if i + 1 < len(banks):
            row.append(InlineKeyboardButton(text=banks[i + 1], callback_data=f"cashback_bank_{banks[i + 1]}"))
        keyboard_buttons.append(row)
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cashback_add")])
    keyboard_buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cashback_menu")])
    
    await callback.message.edit_text(
        "üè¶ –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    
    await state.set_state(CashbackForm.waiting_for_bank)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("cashback_bank_"), CashbackForm.waiting_for_bank)
async def process_cashback_bank(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞"""
    bank = callback.data.replace("cashback_bank_", "")
    
    await state.update_data(bank_name=bank)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cashback_add")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cashback_menu")]
    ])
    
    await callback.message.edit_text(
        f"üí≥ <b>–ë–∞–Ω–∫:</b> {bank}\n\n"
        "üí∞ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –∫–µ—à–±—ç–∫–∞:\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ 5\n"
        "‚Ä¢ –í—Å–µ –ø–æ–∫—É–ø–∫–∏ 3.5\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω 10%\n"
        "‚Ä¢ –í —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–∞—Ö 7",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    await state.set_state(CashbackForm.waiting_for_percent)
    await callback.answer()


@router.message(CashbackForm.waiting_for_bank)
async def process_bank_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–∞ —Ç–µ–∫—Å—Ç–æ–º"""
    bank_name = message.text.strip()
    
    if len(bank_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(bank_name=bank_name)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cashback_add")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cashback_menu")]
    ])
    
    await message.answer(
        f"üí≥ <b>–ë–∞–Ω–∫:</b> {bank_name}\n\n"
        "üí∞ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –∫–µ—à–±—ç–∫–∞:\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ 5\n"
        "‚Ä¢ –í—Å–µ –ø–æ–∫—É–ø–∫–∏ 3.5\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω 10%\n"
        "‚Ä¢ –í —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–∞—Ö 7",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    await state.set_state(CashbackForm.waiting_for_percent)


@router.message(CashbackForm.waiting_for_percent)
async def process_percent_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫–µ—à–±—ç–∫–∞"""
    import re
    
    text = message.text.strip()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ - –∏—â–µ–º —á–∏—Å–ª–æ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Å—Ç—Ä–æ–∫–∏
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ - —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∏ —á–∏—Å–ª–æ - —Ç–µ–∫—Å—Ç —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ, —á–∏—Å–ª–æ —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–ø—Ä–æ—Ü–µ–Ω—Ç)?
    only_percent_pattern = r'^(\d+(?:[.,]\d+)?)\s*%?$'
    match = re.match(only_percent_pattern, text)
    
    if match:
        # –¢–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç, –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        percent_str = match.group(1).replace(',', '.')
        description = ''
    else:
        # –ò—â–µ–º —á–∏—Å–ª–æ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ (–æ–ø–∏—Å–∞–Ω–∏–µ + –ø—Ä–æ—Ü–µ–Ω—Ç)
        percent_at_end = r'^(.*?)\s+(\d+(?:[.,]\d+)?)\s*%?$'
        match = re.match(percent_at_end, text)
        
        if match:
            description = match.group(1).strip()
            percent_str = match.group(2).replace(',', '.')
        else:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –í—Å–µ –ø–æ–∫—É–ø–∫–∏ 5"
            )
            return
    
    try:
        percent = float(percent_str)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    if percent > 100:
        await message.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100%")
        return
    
    if percent <= 0:
        await message.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user_id = message.from_user.id
    current_month = date.today().month
    bank_name = data.get('bank_name', '')
    
    # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à–±—ç–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    try:
        cashback = await add_cashback(
            user_id=user_id,
            category_id=data.get('category_id'),
            bank_name=bank_name,
            cashback_percent=percent,
            month=current_month,
            limit_amount=None,  # –ë–µ–∑ –ª–∏–º–∏—Ç–∞
            description=description  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        )
        
        await state.clear()
        
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–µ—à–±—ç–∫–æ–≤ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await show_cashback_menu(message, state)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–µ—à–±–µ–∫–∞

@router.callback_query(lambda c: c.data == "cashback_edit")
async def edit_cashback_list(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–µ—à–±–µ–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = callback.from_user.id
    current_month = date.today().month
    
    cashbacks = await get_user_cashbacks(user_id, current_month)
    
    if not cashbacks:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–µ—à–±—ç–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
        return
    
    keyboard_buttons = []
    for cb in cashbacks:
        if cb.category:
            text = f"{cb.category.name} - {cb.bank_name} {cb.cashback_percent}%"
        else:
            text = f"üåê –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - {cb.bank_name} {cb.cashback_percent}%"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if cb.description:
            text += f" ({cb.description})"
            
        keyboard_buttons.append([
            InlineKeyboardButton(text=text, callback_data=f"edit_cb_{cb.id}")
        ])
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cashback_menu")])
    
    await callback.message.edit_text(
        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–µ—à–±—ç–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    
    await state.set_state(CashbackForm.choosing_cashback_to_edit)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("edit_cb_"), CashbackForm.choosing_cashback_to_edit)
async def edit_cashback_selected(callback: types.CallbackQuery, state: FSMContext):
    """–ö–µ—à–±—ç–∫ –≤—ã–±—Ä–∞–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –±–∞–Ω–∫–∞"""
    cashback_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ—à–±—ç–∫–µ
    cashback = await get_cashback_by_id(callback.from_user.id, cashback_id)
    
    if not cashback:
        await callback.answer("–ö–µ—à–±—ç–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–µ—à–±—ç–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        editing_cashback_id=cashback_id,
        current_bank=cashback.bank_name,
        current_percent=cashback.cashback_percent,
        current_description=cashback.description or '',
        current_category_id=cashback.category_id
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    banks = [
        "–¢-–ë–∞–Ω–∫", "–ê–ª—å—Ñ–∞", "–í–¢–ë", "–°–±–µ—Ä", 
        "–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω", "–Ø–Ω–¥–µ–∫—Å", "–û–∑–æ–Ω"
    ]
    
    keyboard_buttons = []
    for i in range(0, len(banks), 2):
        row = [InlineKeyboardButton(text=banks[i], callback_data=f"edit_bank_{banks[i]}")]
        if i + 1 < len(banks):
            row.append(InlineKeyboardButton(text=banks[i + 1], callback_data=f"edit_bank_{banks[i + 1]}"))
        keyboard_buttons.append(row)
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_edit_bank")])
    keyboard_buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cashback_edit")])
    keyboard_buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cashback_menu")])
    
    text = f"üí≥ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–±—ç–∫–∞</b>\n\n"
    text += f"–¢–µ–∫—É—â–∏–π –±–∞–Ω–∫: {cashback.bank_name}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–Ω–∫ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons),
        parse_mode="HTML"
    )
    
    await state.set_state(CashbackForm.editing_bank)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("edit_bank_"), CashbackForm.editing_bank)
async def process_edit_bank(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –±–∞–Ω–∫–∞"""
    bank = callback.data.replace("edit_bank_", "")
    
    await state.update_data(new_bank=bank)
    await show_edit_percent_prompt(callback, state)
    await callback.answer()


@router.callback_query(lambda c: c.data == "skip_edit_bank", CashbackForm.editing_bank)
async def skip_edit_bank(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–∞"""
    data = await state.get_data()
    await state.update_data(new_bank=data['current_bank'])  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–Ω–∫
    await show_edit_percent_prompt(callback, state)
    await callback.answer()


@router.message(CashbackForm.editing_bank)
async def process_edit_bank_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–∞ —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    bank_name = message.text.strip()
    
    if len(bank_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(new_bank=bank_name)
    await show_edit_percent_prompt(message, state)


async def show_edit_percent_prompt(message_or_callback, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    data = await state.get_data()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_cb_{data['editing_cashback_id']}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cashback_menu")]
    ])
    
    text = f"üí≥ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–±—ç–∫–∞</b>\n\n"
    text += f"–ë–∞–Ω–∫: {data.get('new_bank', data['current_bank'])}\n"
    text += f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {data['current_percent']}%\n"
    if data['current_description']:
        text += f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {data['current_description']}\n"
    text += "\nüí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏ –ø—Ä–æ—Ü–µ–Ω—Ç:\n\n"
    text += "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
    text += "‚Ä¢ 5\n"
    text += "‚Ä¢ –í—Å–µ –ø–æ–∫—É–ø–∫–∏ 3.5\n"
    text += "‚Ä¢ –¢–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω 10%"
    
    if isinstance(message_or_callback, types.CallbackQuery):
        await message_or_callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        await message_or_callback.answer(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    
    await state.set_state(CashbackForm.editing_percent)


@router.message(CashbackForm.editing_percent)
async def process_edit_percent(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞"""
    import re
    
    text = message.text.strip()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–∞—Ä—Å–∏–Ω–≥, —á—Ç–æ –∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    only_percent_pattern = r'^(\d+(?:[.,]\d+)?)\s*%?$'
    match = re.match(only_percent_pattern, text)
    
    if match:
        # –¢–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç, –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        percent_str = match.group(1).replace(',', '.')
        description = ''
    else:
        # –ò—â–µ–º —á–∏—Å–ª–æ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ (–æ–ø–∏—Å–∞–Ω–∏–µ + –ø—Ä–æ—Ü–µ–Ω—Ç)
        percent_at_end = r'^(.*?)\s+(\d+(?:[.,]\d+)?)\s*%?$'
        match = re.match(percent_at_end, text)
        
        if match:
            description = match.group(1).strip()
            percent_str = match.group(2).replace(',', '.')
        else:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –í—Å–µ –ø–æ–∫—É–ø–∫–∏ 5"
            )
            return
    
    try:
        percent = float(percent_str)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    if percent > 100:
        await message.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100%")
        return
    
    if percent <= 0:
        await message.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user_id = message.from_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à–±—ç–∫
    try:
        cashback = await update_cashback(
            user_id=user_id,
            cashback_id=data['editing_cashback_id'],
            bank_name=data.get('new_bank', data['current_bank']),
            cashback_percent=percent,
            description=description
        )
        
        await state.clear()
        
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–µ—à–±—ç–∫–æ–≤ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await show_cashback_menu(message, state)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
        await state.clear()


# –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ waiting_for_bank_and_percent

# –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ—Å–ª–µ —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
# –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã –ø–æ—Å–ª–µ —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–±–µ–∫–∞.
# –¢–µ–ø–µ—Ä—å –±–∞–Ω–∫ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –≤–≤–æ–¥—è—Ç—Å—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.

'''

async def ask_for_description(message: types.Message, state: FSMContext):
    # –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –∫–µ—à–±—ç–∫–∞
    data = await state.get_data()
    lang = data.get('lang', 'ru')
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cashback_menu")]
    ])
    
    text = "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–µ—à–±—ç–∫–∞\n\n"
    text += "–ù–∞–ø—Ä–∏–º–µ—Ä: —Ç–æ–ª—å–∫–æ –≤ –ü—è—Ç—ë—Ä–æ—á–∫–µ, —Ç–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω, –∫—Ä–æ–º–µ –∞–ª–∫–æ–≥–æ–ª—è\n\n"
    text += "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
    
    if isinstance(message, types.CallbackQuery):
        await message.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


async def ask_for_percent(message: types.Message | types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫–µ—à–±—ç–∫–∞"""
    # –ö–Ω–æ–ø–∫–∏ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
    keyboard_buttons = []
    percents = ["1%", "2%", "3%", "5%", "7%", "10%", "15%"]
    
    # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    for i in range(0, len(percents), 2):
        row = []
        for j in range(2):
            if i + j < len(percents):
                row.append(InlineKeyboardButton(
                    text=percents[i + j], 
                    callback_data=f"cashback_percent_{percents[i + j].replace('%', '')}"
                ))
        keyboard_buttons.append(row)
    
    # –£–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    text = "üí∞ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∫–µ—à–±—ç–∫–∞:\n\n" \
           "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
    if isinstance(message, types.CallbackQuery):
        await message.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
    else:
        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º send_message_with_cleanup
        from ..utils.message_utils import send_message_with_cleanup
        await send_message_with_cleanup(
            message, state, text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )


@router.callback_query(lambda c: c.data.startswith("cashback_percent_"), CashbackForm.waiting_for_percent)
async def process_cashback_percent_button(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫–Ω–æ–ø–∫–æ–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–µ—à–±—ç–∫–∞"""
    percent = callback.data.split("_")[-1]
    await state.update_data(cashback_percent=float(percent))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à–±—ç–∫ –±–µ–∑ –ª–∏–º–∏—Ç–∞ –∏ –º–µ—Å—è—Ü–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞)
    data = await state.get_data()
    user_id = callback.from_user.id
    current_month = date.today().month
    
    try:
        cashback = await add_cashback(
            user_id=user_id,
            category_id=data['category_id'],
            bank_name=data['bank_name'],
            cashback_percent=float(percent),
            month=current_month,
            limit_amount=None,  # –ë–µ–∑ –ª–∏–º–∏—Ç–∞
            description=data.get('description', '')
        )
        
        await state.clear()
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–µ—à–±—ç–∫–æ–≤
        await show_cashback_menu(callback, state)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        await state.clear()


async def ask_for_limit(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ª–∏–º–∏—Ç–∞ –∫–µ—à–±—ç–∫–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ë–µ–∑ –ª–∏–º–∏—Ç–∞", callback_data="cashback_no_limit")],
        [InlineKeyboardButton(text="1000 ‚ÇΩ", callback_data="cashback_limit_1000")],
        [InlineKeyboardButton(text="2000 ‚ÇΩ", callback_data="cashback_limit_2000")],
        [InlineKeyboardButton(text="3000 ‚ÇΩ", callback_data="cashback_limit_3000")],
        [InlineKeyboardButton(text="5000 ‚ÇΩ", callback_data="cashback_limit_5000")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cashback_menu")]
    ])
    
    await message.edit_text(
        "üí∏ –ï—Å—Ç—å –ª–∏ –ª–∏–º–∏—Ç –∫–µ—à–±—ç–∫–∞ –≤ –º–µ—Å—è—Ü?\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É:",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("cashback_limit_") or c.data == "cashback_no_limit", CashbackForm.waiting_for_limit)
async def process_cashback_limit_button(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∏–º–∏—Ç–∞ –∫–Ω–æ–ø–∫–æ–π"""
    if callback.data == "cashback_no_limit":
        limit = None
    else:
        limit = float(callback.data.split("_")[-1])
    
    await state.update_data(limit_amount=limit)
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –º–µ—Å—è—Ü
    await ask_for_month(callback.message, state)
    await state.set_state(CashbackForm.waiting_for_month)
    await callback.answer()


async def ask_for_month(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –º–µ—Å—è—Ü–∞ –¥–ª—è –∫–µ—à–±—ç–∫–∞"""
    current_month = date.today().month
    
    month_names = {
        1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
        5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
        9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
    }
    
    keyboard_buttons = []
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–µ 3 –º–µ—Å—è—Ü–∞
    for i in range(4):
        month = ((current_month - 1 + i) % 12) + 1
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=month_names[month], 
                callback_data=f"cashback_month_{month}"
            )
        ])
    
    # –£–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    await message.edit_text(
        "üìÖ –ù–∞ –∫–∞–∫–æ–π –º–µ—Å—è—Ü –¥–µ–π—Å—Ç–≤—É–µ—Ç –∫–µ—à–±—ç–∫?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )


@router.callback_query(lambda c: c.data.startswith("cashback_month_"), CashbackForm.waiting_for_month)
async def process_cashback_month(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–µ—à–±—ç–∫–∞"""
    month = int(callback.data.split("_")[-1])
    data = await state.get_data()
    
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à–±—ç–∫
    try:
        cashback = await add_cashback(
            user_id=user_id,
            category_id=data['category_id'],
            bank_name=data['bank_name'],
            cashback_percent=data['cashback_percent'],
            month=month,
            limit_amount=data.get('limit_amount'),
            description=data.get('description', '')
        )
        
        await state.clear()
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–µ—à–±—ç–∫–æ–≤
        await show_cashback_menu(callback, state)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        await state.clear()


@router.callback_query(lambda c: c.data == "cashback_remove")
async def remove_cashback_list(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–µ—à–±—ç–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    current_month = date.today().month
    
    cashbacks = await get_user_cashbacks(user_id, current_month)
    
    if not cashbacks:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–µ—à–±—ç–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        return
    
    keyboard_buttons = []
    for cb in cashbacks:
        if cb.category:
            text = f"{cb.category.name} - {cb.bank_name} {cb.cashback_percent}%"
        else:
            text = f"üåê –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - {cb.bank_name} {cb.cashback_percent}%"
        keyboard_buttons.append([
            InlineKeyboardButton(text=text, callback_data=f"remove_cb_{cb.id}")
        ])
    
    # –£–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    await callback.message.edit_text(
        "‚ûñ –í—ã–±–µ—Ä–∏—Ç–µ –∫–µ—à–±—ç–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(last_menu_message_id=callback.message.message_id)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("remove_cb_"))
async def confirm_remove_cashback(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–µ—à–±—ç–∫–∞"""
    cashback_id = int(callback.data.split("_")[-1])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_remove_cb_{cashback_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cashback_menu")
        ]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–µ—à–±—ç–∫?",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("confirm_remove_cb_"))
async def remove_cashback_confirmed(callback: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–µ—à–±—ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"""
    cashback_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    success = await delete_cashback(user_id, cashback_id)
    
    if success:
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–µ—à–±—ç–∫–æ–≤
        await show_cashback_menu(callback, state)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–µ—à–±—ç–∫", show_alert=True)


@router.callback_query(lambda c: c.data == "cashback_other_month")
async def select_other_month(callback: types.CallbackQuery):
    """–í—ã–±–æ—Ä –¥—Ä—É–≥–æ–≥–æ –º–µ—Å—è—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–µ—à–±—ç–∫–æ–≤"""
    month_names = {
        1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
        5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
        9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
    }
    
    keyboard_buttons = []
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ 12 –º–µ—Å—è—Ü–µ–≤
    for i in range(0, 12, 3):
        row = []
        for j in range(3):
            if i + j < 12:
                month = i + j + 1
                row.append(InlineKeyboardButton(
                    text=month_names[month][:3],  # –°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    callback_data=f"view_cb_month_{month}"
                ))
        keyboard_buttons.append(row)
    
    # –£–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("view_cb_month_"))
async def view_cashback_month(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–µ—à–±—ç–∫–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü"""
    month = int(callback.data.split("_")[-1])
    await show_cashback_menu(callback, state, month=month)
    await callback.answer()


@router.callback_query(lambda c: c.data == "cashback_remove_all")
async def confirm_remove_all_cashback(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–µ—à–±—ç–∫–æ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cashback_menu"),
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="confirm_remove_all")
        ]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∫–µ—à–±—ç–∫–∏?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "confirm_remove_all")
async def remove_all_cashback_confirmed(callback: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–µ—à–±—ç–∫–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"""
    user_id = callback.from_user.id
    current_month = date.today().month
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–µ—à–±—ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cashbacks = await get_user_cashbacks(user_id, current_month)
    
    if cashbacks:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–µ—à–±—ç–∫–∏
        deleted_count = 0
        for cashback in cashbacks:
            success = await delete_cashback(user_id, cashback.id)
            if success:
                deleted_count += 1
        
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–µ—à–±—ç–∫–æ–≤
        await show_cashback_menu(callback, state)
    else:
        await callback.answer("–ù–µ—Ç –∫–µ—à–±—ç–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º
# –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–∞–Ω–∫–∞ —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –±–∞–Ω–∫ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –≤–≤–æ–¥—è—Ç—Å—è –≤–º–µ—Å—Ç–µ


@router.callback_query(lambda c: c.data == "skip_description", CashbackForm.waiting_for_description)
async def skip_description(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è"""
    await state.update_data(description='')
    await ask_for_percent(callback.message, state)
    await state.set_state(CashbackForm.waiting_for_percent)
    await callback.answer()


@router.message(CashbackForm.waiting_for_description)
async def process_description_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    description = message.text.strip()
    
    if len(description) > 200:
        await send_message_with_cleanup(message, state, "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(description=description)
    await ask_for_percent(message, state)
    await state.set_state(CashbackForm.waiting_for_percent)


@router.message(CashbackForm.waiting_for_percent)
async def process_percent_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–µ—à–±—ç–∫–∞"""
    try:
        # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª % –µ—Å–ª–∏ –µ—Å—Ç—å
        percent_text = message.text.strip().replace('%', '').replace(',', '.')
        percent = float(percent_text)
        
        if percent <= 0 or percent > 100:
            await send_message_with_cleanup(message, state, "‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à–±—ç–∫ –±–µ–∑ –ª–∏–º–∏—Ç–∞ –∏ –º–µ—Å—è—Ü–∞
        data = await state.get_data()
        user_id = message.from_user.id
        current_month = date.today().month
        
        cashback = await add_cashback(
            user_id=user_id,
            category_id=data['category_id'],
            bank_name=data['bank_name'],
            cashback_percent=percent,
            month=current_month,
            limit_amount=None,
            description=data.get('description', '')
        )
        
        await state.clear()
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–µ—à–±—ç–∫–æ–≤
        await show_cashback_menu(message, state)
        
    except ValueError:
        await send_message_with_cleanup(message, state, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 5.5)")


@router.message(CashbackForm.waiting_for_limit)
async def process_limit_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞"""
    try:
        limit_text = message.text.strip().replace(' ', '').replace(',', '.')
        limit = float(limit_text)
        
        if limit <= 0:
            await send_message_with_cleanup(message, state, "‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        await state.update_data(limit_amount=limit)
        await ask_for_month(message, state)
        await state.set_state(CashbackForm.waiting_for_month)
        
    except ValueError:
        await send_message_with_cleanup(message, state, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 1000.50)")
'''  # –ö–æ–Ω–µ—Ü –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞