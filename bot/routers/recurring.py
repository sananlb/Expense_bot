"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã)
"""
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import date
from decimal import Decimal
import asyncio
import logging
from expenses.models import RecurringPayment

logger = logging.getLogger(__name__)

from ..services.recurring import (
    get_user_recurring_payments, create_recurring_payment, 
    update_recurring_payment, delete_recurring_payment, 
    get_recurring_payment_by_id
)
from ..services.category import get_user_categories
from ..services.income import get_user_income_categories
from ..utils.message_utils import send_message_with_cleanup
from ..utils import get_text
from ..utils.category_helpers import get_category_display_name
from ..utils.validators import validate_amount, parse_description_amount
from ..utils.formatters import format_currency, format_date
from ..decorators import rate_limit

router = Router(name="recurring")


class RecurringForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    waiting_for_description = State()
    waiting_for_amount = State()
    waiting_for_category = State()
    waiting_for_day = State()
    waiting_for_edit_data = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    editing_amount = State()
    editing_description = State()
    editing_day = State()


@router.message(Command("recurring"))
async def cmd_recurring(message: types.Message, state: FSMContext, lang: str = 'ru'):
    """–ö–æ–º–∞–Ω–¥–∞ /recurring - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏"""
    await show_recurring_menu(message, state, lang)


async def show_recurring_menu(message: types.Message | types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if isinstance(message, types.CallbackQuery):
        user_id = message.from_user.id
    else:
        user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    payments = await get_user_recurring_payments(user_id)
    
    text = f"<b>{get_text('recurring_payments', lang)}</b>\n\nüí° {get_text('recurring_hint', lang)}"
    
    if payments:
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ —Ç–∏–ø–∞–º
        income_payments = [p for p in payments if p.operation_type == RecurringPayment.OPERATION_TYPE_INCOME]
        expense_payments = [p for p in payments if p.operation_type == RecurringPayment.OPERATION_TYPE_EXPENSE]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É: –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞, –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ü–µ
        def sort_by_status(payments_list):
            active = [p for p in payments_list if p.is_active]
            paused = [p for p in payments_list if not p.is_active]
            return active + paused
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Ö–æ–¥—ã
        if income_payments:
            text += f"\n\n{get_text('recurring_income_section', lang)}"
            sorted_income = sort_by_status(income_payments)
            
            for payment in sorted_income:
                status = "‚úÖ" if payment.is_active else "‚è∏"
                text += f"\n\n{status} <b>{payment.description}</b>\n"
                text += f"{get_text('recurring_amount', lang)}: <i>+{format_currency(payment.amount, payment.currency or 'RUB')}</i>\n"
                text += f"{get_text('recurring_date', lang)}: <i>{get_text('day_of_month', lang).format(day=payment.day_of_month)}</i>\n"
                if payment.category:
                    category_name = get_category_display_name(payment.category, lang)
                    text += f"{get_text('recurring_category', lang)}: <i>{category_name}</i>"
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã
        if expense_payments:
            text += f"\n\n{get_text('recurring_expense_section', lang)}"
            sorted_expense = sort_by_status(expense_payments)
            
            for payment in sorted_expense:
                status = "‚úÖ" if payment.is_active else "‚è∏"
                text += f"\n\n{status} <b>{payment.description}</b>\n"
                text += f"{get_text('recurring_amount', lang)}: <i>{format_currency(payment.amount, payment.currency or 'RUB')}</i>\n"
                text += f"{get_text('recurring_date', lang)}: <i>{get_text('day_of_month', lang).format(day=payment.day_of_month)}</i>\n"
                if payment.category:
                    category_name = get_category_display_name(payment.category, lang)
                    text += f"{get_text('recurring_category', lang)}: <i>{category_name}</i>"
    else:
        text += f"\n\n{get_text('no_recurring_payments', lang)}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
    keyboard_buttons = [
        [InlineKeyboardButton(text=get_text('add_recurring', lang), callback_data="add_recurring")]
    ]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∏
    if payments:
        keyboard_buttons.append(
            [InlineKeyboardButton(text=get_text('edit_recurring', lang), callback_data="edit_recurring")]
        )
        keyboard_buttons.append(
            [InlineKeyboardButton(text=get_text('delete_recurring', lang), callback_data="delete_recurring")]
        )
    
    keyboard_buttons.append(
        [InlineKeyboardButton(text=get_text('close', lang), callback_data="close")]
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await send_message_with_cleanup(message, state, text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(lambda c: c.data == "recurring_menu")
async def callback_recurring_menu(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ callback"""
    await show_recurring_menu(callback, state, lang)
    await callback.answer()


@router.callback_query(lambda c: c.data == "add_recurring")
async def add_recurring_start(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    await callback.message.edit_text(
        f"<b>{get_text('add_recurring_payment', lang)}</b>\n\n{get_text('recurring_payment_hint', lang)}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=get_text('back', lang), callback_data="recurring_menu")]
        ]),
        parse_mode="HTML"
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(last_menu_message_id=callback.message.message_id)
    await state.set_state(RecurringForm.waiting_for_description)
    await callback.answer()


@router.message(RecurringForm.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    text = message.text.strip()
    user_id = message.from_user.id
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –≤–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ —Å—É–º–º—ã
    try:
        parsed = parse_description_amount(text, allow_only_amount=True)
        description = parsed['description']
        amount = parsed['amount']
        is_income = parsed.get('is_income', False)
    except ValueError as e:
        logger.warning(f"Invalid recurring payment input from user {message.from_user.id}: {e}")
        await send_message_with_cleanup(message, state, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—É–º–º—É.")
        return
    
    await state.update_data(description=description, amount=amount, is_income=is_income)
    
    # –¢–µ–ø–µ—Ä—å —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data = await state.get_data()
    lang = data.get('lang', 'ru')
    await show_category_selection(message, state, lang)


# –£–¥–∞–ª–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—É–º–º—ã - —Ç–µ–ø–µ—Ä—å —Å—É–º–º–∞ –≤–≤–æ–¥–∏—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º


async def show_category_selection(message: types.Message, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = message.chat.id if hasattr(message, 'chat') else message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —ç—Ç–æ –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥
    data = await state.get_data()
    is_income = data.get('is_income', False)
    
    if is_income:
        # –î–ª—è –¥–æ—Ö–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
        from ..services.income import get_user_income_categories
        categories = await get_user_income_categories(user_id)
    else:
        # –î–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = await get_user_categories(user_id)
    
    if not categories:
        await send_message_with_cleanup(message, state,
            get_text('no_categories_create_first', lang),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=get_text('to_categories', lang), callback_data="categories_menu")]
            ])
        )
        await state.clear()
        return
    
    keyboard_buttons = []
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(categories), 2):
        category_name_1 = get_category_display_name(categories[i], lang)
        row = [InlineKeyboardButton(
            text=f"{category_name_1}", 
            callback_data=f"recurring_cat_{categories[i].id}"
        )]
        if i + 1 < len(categories):
            category_name_2 = get_category_display_name(categories[i + 1], lang)
            row.append(InlineKeyboardButton(
                text=f"{category_name_2}", 
                callback_data=f"recurring_cat_{categories[i + 1].id}"
            ))
        keyboard_buttons.append(row)
    
    keyboard_buttons.append([InlineKeyboardButton(text=get_text('back', lang), callback_data="recurring_menu")])
    
    if isinstance(message, types.CallbackQuery):
        await message.message.edit_text(
            get_text('select_payment_category', lang),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
    else:
        await send_message_with_cleanup(message, state,
            get_text('select_payment_category', lang),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
    
    await state.set_state(RecurringForm.waiting_for_category)


@router.callback_query(lambda c: c.data.startswith("recurring_cat_"), RecurringForm.waiting_for_category)
async def process_category(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[-1])
    await state.update_data(category_id=category_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–Ω—è –º–µ—Å—è—Ü–∞
    keyboard_buttons = []
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–Ω–∏
    popular_days = [1, 5, 10, 15, 20, 25, 30]
    
    for i in range(0, len(popular_days), 3):
        row = []
        for j in range(3):
            if i + j < len(popular_days):
                day = popular_days[i + j]
                row.append(InlineKeyboardButton(
                    text=get_text('day_number', lang).format(day=day), 
                    callback_data=f"recurring_day_{day}"
                ))
        keyboard_buttons.append(row)
    
    keyboard_buttons.append([InlineKeyboardButton(text=get_text('back', lang), callback_data="back_to_category_selection")])
    
    await callback.message.edit_text(
        get_text('choose_payment_day', lang),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    
    await state.set_state(RecurringForm.waiting_for_day)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("recurring_day_"), RecurringForm.waiting_for_day)
async def process_day_button(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –∫–Ω–æ–ø–∫–æ–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    day = int(callback.data.split("_")[-1])
    data = await state.get_data()
    
    user_id = callback.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    try:
        is_income = data.get('is_income', False)
        description = data['description']
        
        payment = await create_recurring_payment(
            user_id=user_id,
            category_id=data['category_id'],
            amount=data['amount'],
            description=description,
            day_of_month=day,
            is_income=is_income
        )
        
        await state.clear()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã
        try:
            await callback.message.delete()
        except:
            pass
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        await show_recurring_menu(callback, state, lang)
        await callback.answer(get_text('recurring_payment_added', lang))
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        await state.clear()


# –£–¥–∞–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã - —Ç–µ–ø–µ—Ä—å —Å—É–º–º–∞ –≤–≤–æ–¥–∏—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º


@router.message(RecurringForm.waiting_for_day)
async def process_day_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–Ω—è —Ç–µ–∫—Å—Ç–æ–º"""
    data = await state.get_data()
    user_id = message.from_user.id
    
    try:
        day = int(message.text.strip())
        
        if day < 1 or day > 30:
            data = await state.get_data()
            lang = data.get('lang', 'ru')
            await send_message_with_cleanup(message, state, get_text('day_should_be_1_30', lang))
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        payment = await create_recurring_payment(
            user_id=user_id,
            category_id=data['category_id'],
            amount=data['amount'],
            description=data['description'],
            day_of_month=day
        )
        
        await state.clear()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        await show_recurring_menu(message, state)
        
    except ValueError:
        data = await state.get_data()
        lang = data.get('lang', 'ru')
        await send_message_with_cleanup(message, state, get_text('enter_day_1_30', lang))


@router.callback_query(lambda c: c.data == "edit_recurring")
async def edit_recurring_list(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = callback.from_user.id
    payments = await get_user_recurring_payments(user_id)
    
    if not payments:
        await callback.answer(get_text('no_recurring_payments', lang), show_alert=True)
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–∏: –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞, –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ü–µ
    active_payments = [p for p in payments if p.is_active]
    paused_payments = [p for p in payments if not p.is_active]
    sorted_payments = active_payments + paused_payments
    
    keyboard_buttons = []
    for payment in sorted_payments:
        status = "‚úÖ" if payment.is_active else "‚è∏"
        text = f"{status} {payment.description} - {payment.amount:.0f} ‚ÇΩ"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=text, 
                callback_data=f"edit_recurring_{payment.id}"
            )
        ])
    
    keyboard_buttons.append([InlineKeyboardButton(text=get_text('back', lang), callback_data="recurring_menu")])
    
    await callback.message.edit_text(
        get_text('select_payment_to_edit', lang),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(last_menu_message_id=callback.message.message_id)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("edit_recurring_"))
async def edit_recurring_menu(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    payment_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    payment = await get_recurring_payment_by_id(user_id, payment_id)
    if not payment:
        await callback.answer(get_text('payment_not_found', lang), show_alert=True)
        return
    
    status_text = get_text('payment_active', lang) if payment.is_active else get_text('payment_paused', lang)
    toggle_text = get_text('pause_payment', lang) if payment.is_active else get_text('resume_payment', lang)
    
    text = get_text('edit_payment_text', lang).format(
        description=payment.description,
        amount=format_currency(payment.amount, 'RUB'),
        category=get_category_display_name(payment.category, lang) if payment.category else ('–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' if lang == 'ru' else 'No Category'),
        day=payment.day_of_month,
        status=status_text
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        editing_payment_id=payment_id,
        old_category_id=payment.category.id,
        old_day=payment.day_of_month
    )
    await state.set_state(RecurringForm.waiting_for_edit_data)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=get_text('edit_amount', lang), callback_data=f"edit_amount_{payment_id}"),
            InlineKeyboardButton(text=get_text('edit_description', lang), callback_data=f"edit_description_{payment_id}")
        ],
        [
            InlineKeyboardButton(text=get_text('edit_category', lang), callback_data=f"edit_category_{payment_id}"),
            InlineKeyboardButton(text=get_text('edit_day', lang), callback_data=f"edit_day_{payment_id}")
        ],
        [InlineKeyboardButton(text=toggle_text, callback_data=f"toggle_recurring_{payment_id}")],
        [InlineKeyboardButton(text=get_text('back', lang), callback_data="recurring_menu")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(lambda c: c.data == "back_to_category_selection")
async def back_to_category_selection(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    await show_category_selection(callback, state, lang)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("toggle_recurring_"))
async def toggle_recurring(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
    payment_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    payment = await get_recurring_payment_by_id(user_id, payment_id)
    if payment:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        new_status = not payment.is_active
        await update_recurring_payment(user_id, payment_id, is_active=new_status)
        
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        await callback.answer(get_text('payment_status_changed', lang))
        await show_recurring_menu(callback, state, lang)
    else:
        await callback.answer(get_text('payment_not_found', lang), show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
@router.callback_query(lambda c: c.data.startswith("edit_amount_"))
async def edit_amount_start(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã"""
    payment_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    payment = await get_recurring_payment_by_id(user_id, payment_id)
    if not payment:
        await callback.answer(get_text('payment_not_found', lang), show_alert=True)
        return
    
    await state.update_data(editing_payment_id=payment_id)
    await state.set_state(RecurringForm.editing_amount)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_text('back', lang), callback_data=f"edit_recurring_{payment_id}")]
    ])
    
    current_amount = format_currency(payment.amount, payment.currency or 'RUB')
    text = f"{get_text('enter_new_amount', lang)}\n\n–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: <i>{current_amount}</i>"
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("edit_description_"))
async def edit_description_start(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    payment_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    payment = await get_recurring_payment_by_id(user_id, payment_id)
    if not payment:
        await callback.answer(get_text('payment_not_found', lang), show_alert=True)
        return
    
    await state.update_data(editing_payment_id=payment_id)
    await state.set_state(RecurringForm.editing_description)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_text('back', lang), callback_data=f"edit_recurring_{payment_id}")]
    ])
    
    text = f"{get_text('enter_new_description', lang)}\n\n–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <i>{payment.description}</i>"
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("edit_day_"))
async def edit_day_start(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è –º–µ—Å—è—Ü–∞"""
    payment_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    payment = await get_recurring_payment_by_id(user_id, payment_id)
    if not payment:
        await callback.answer(get_text('payment_not_found', lang), show_alert=True)
        return
    
    await state.update_data(editing_payment_id=payment_id)
    await state.set_state(RecurringForm.editing_day)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_text('back', lang), callback_data=f"edit_recurring_{payment_id}")]
    ])
    
    text = f"{get_text('enter_new_day', lang)}\n\n–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: <i>{payment.day_of_month} —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞</i>"
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("edit_category_"))
async def edit_category_start(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    payment_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    payment = await get_recurring_payment_by_id(user_id, payment_id)
    if not payment:
        await callback.answer(get_text('payment_not_found', lang), show_alert=True)
        return
    
    await state.update_data(editing_payment_id=payment_id, edit_field='category')
    await state.set_state(RecurringForm.waiting_for_category)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if payment.operation_type == RecurringPayment.OPERATION_TYPE_INCOME:
        categories = await get_user_income_categories(user_id)
        cat_display = get_category_display_name(payment.category, lang) if payment.category else ('–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' if lang == 'ru' else 'No Category')
        text = f"{get_text('choose_new_category', lang)}\n\nüí∞ –î–æ—Ö–æ–¥: <i>{cat_display}</i>"
    else:
        categories = await get_user_categories(user_id)
        cat_display = get_category_display_name(payment.category, lang) if payment.category else ('–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' if lang == 'ru' else 'No Category')
        text = f"{get_text('choose_new_category', lang)}\n\nüí∏ –†–∞—Å—Ö–æ–¥: <i>{cat_display}</i>"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard_buttons = []
    for i, category in enumerate(categories):
        if i % 2 == 0:
            keyboard_buttons.append([])
        keyboard_buttons[-1].append(
            InlineKeyboardButton(
                text=get_category_display_name(category, lang),
                callback_data=f"set_category_{payment_id}_{category.id}"
            )
        )
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    keyboard_buttons.append([
        InlineKeyboardButton(text=get_text('back', lang), callback_data=f"edit_recurring_{payment_id}")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("set_category_"))
async def set_category(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    parts = callback.data.split("_")
    payment_id = int(parts[2])
    category_id = int(parts[3])
    user_id = callback.from_user.id
    
    payment = await get_recurring_payment_by_id(user_id, payment_id)
    if not payment:
        await callback.answer(get_text('payment_not_found', lang), show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if payment.operation_type == RecurringPayment.OPERATION_TYPE_INCOME:
        await update_recurring_payment(user_id, payment_id, income_category_id=category_id)
    else:
        await update_recurring_payment(user_id, payment_id, expense_category_id=category_id)
    
    await state.clear()
    await callback.answer()
    await show_recurring_menu(callback, state, lang)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
@router.message(RecurringForm.editing_amount)
async def process_edit_amount(message: types.Message, state: FSMContext, lang: str = 'ru'):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Å—É–º–º—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    text = message.text.strip()
    user_id = message.from_user.id
    data = await state.get_data()
    payment_id = data.get('editing_payment_id')
    
    if not payment_id:
        await send_message_with_cleanup(message, state, get_text('payment_not_found', lang))
        return
    
    try:
        amount = await validate_amount(text)
    except ValueError:
        await send_message_with_cleanup(message, state, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É
    await update_recurring_payment(user_id, payment_id, amount=amount)
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
    await show_recurring_menu(message, state, lang)


@router.message(RecurringForm.editing_description)
async def process_edit_description(message: types.Message, state: FSMContext, lang: str = 'ru'):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    text = message.text.strip()
    user_id = message.from_user.id
    data = await state.get_data()
    payment_id = data.get('editing_payment_id')
    
    if not payment_id:
        await send_message_with_cleanup(message, state, get_text('payment_not_found', lang))
        return
    
    if len(text) > 200:
        await send_message_with_cleanup(message, state, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    
    # –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É
    if text:
        text = text[0].upper() + text[1:] if len(text) > 1 else text.upper()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    await update_recurring_payment(user_id, payment_id, description=text)
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
    await show_recurring_menu(message, state, lang)


@router.message(RecurringForm.editing_day)
async def process_edit_day(message: types.Message, state: FSMContext, lang: str = 'ru'):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    text = message.text.strip()
    user_id = message.from_user.id
    data = await state.get_data()
    payment_id = data.get('editing_payment_id')
    
    if not payment_id:
        await send_message_with_cleanup(message, state, get_text('payment_not_found', lang))
        return
    
    try:
        day = int(text)
        if not (1 <= day <= 30):
            raise ValueError("Day out of range")
    except ValueError:
        await send_message_with_cleanup(message, state, get_text('enter_day_1_30', lang))
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å
    await update_recurring_payment(user_id, payment_id, day_of_month=day)
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
    await show_recurring_menu(message, state, lang)


@router.message(RecurringForm.waiting_for_edit_data)
async def process_edit_data(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    text = message.text.strip()
    data = await state.get_data()
    user_id = message.from_user.id
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –≤–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ —Å—É–º–º—ã
    try:
        parsed = parse_description_amount(text, allow_only_amount=True)
        description = parsed['description']
        amount = parsed['amount']
    except ValueError as e:
        logger.warning(f"Invalid recurring payment input from user {message.from_user.id}: {e}")
        await send_message_with_cleanup(message, state, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—É–º–º—É.")
        return
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–ª–∞—Ç–µ–∂
    await delete_recurring_payment(user_id, data['editing_payment_id'])
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    try:
        payment = await create_recurring_payment(
            user_id=user_id,
            category_id=data['old_category_id'],
            amount=amount,
            description=description,
            day_of_month=data['old_day']
        )
        
        await state.clear()
        
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        await show_recurring_menu(message, state)
    except Exception as e:
        logger.error(f"Error updating recurring payment for user {message.from_user.id}: {e}")
        await send_message_with_cleanup(message, state, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


@router.callback_query(lambda c: c.data == "delete_recurring")
async def delete_recurring_list(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    payments = await get_user_recurring_payments(user_id)
    
    if not payments:
        await callback.answer(get_text('no_recurring_payments', lang), show_alert=True)
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–∏: –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞, –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ü–µ
    active_payments = [p for p in payments if p.is_active]
    paused_payments = [p for p in payments if not p.is_active]
    sorted_payments = active_payments + paused_payments
    
    keyboard_buttons = []
    for payment in sorted_payments:
        status = "‚úÖ" if payment.is_active else "‚è∏"
        text = f"{status} {payment.description} - {payment.amount:.0f} ‚ÇΩ"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=text, 
                callback_data=f"del_recurring_{payment.id}"
            )
        ])
    
    keyboard_buttons.append([InlineKeyboardButton(text=get_text('back_arrow', lang), callback_data="recurring_menu")])
    
    await callback.message.edit_text(
        get_text('select_payment_to_delete', lang),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(last_menu_message_id=callback.message.message_id)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("del_recurring_"))
async def delete_recurring_confirm(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    success = await delete_recurring_payment(user_id, payment_id)
    
    if success:
        await callback.answer(get_text('payment_deleted', lang))
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        await show_recurring_menu(callback, state, lang)
    else:
        await callback.answer(get_text('payment_delete_failed', lang), show_alert=True)
