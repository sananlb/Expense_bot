"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
"""
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import date
from decimal import Decimal
import asyncio

from ..services.recurring import (
    get_user_recurring_payments, create_recurring_payment, 
    update_recurring_payment, delete_recurring_payment, 
    get_recurring_payment_by_id
)
from ..services.category import get_user_categories
from ..utils.message_utils import send_message_with_cleanup
from ..utils import get_text

router = Router(name="recurring")


class RecurringForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    waiting_for_description = State()
    waiting_for_amount = State()
    waiting_for_category = State()
    waiting_for_day = State()


@router.message(Command("recurring"))
async def cmd_recurring(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /recurring - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏"""
    await show_recurring_menu(message, state)


async def show_recurring_menu(message: types.Message | types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if isinstance(message, types.CallbackQuery):
        user_id = message.from_user.id
    else:
        user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    payments = await get_user_recurring_payments(user_id)
    
    text = "üîÑ <b>–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏</b>\n\n–í–∞—à–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:"
    
    if payments:
        text += "\n"
        for payment in payments:
            status = "‚úÖ" if payment.is_active else "‚è∏"
            text += f"\n\n{status} {payment.description}\n"
            text += f"üí∞ {payment.amount:,.0f} ‚ÇΩ - {payment.category.name}\n"
            text += f"üìÖ –ö–∞–∂–¥–æ–µ {payment.day_of_month} —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞"
    else:
        text += "\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_recurring")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_recurring")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="delete_recurring")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
    ])
    
    await send_message_with_cleanup(message, state, text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(lambda c: c.data == "recurring_menu")
async def callback_recurring_menu(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ callback"""
    await callback.message.delete()
    await show_recurring_menu(callback.message, state)
    await callback.answer()


@router.callback_query(lambda c: c.data == "add_recurring")
async def add_recurring_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    await callback.message.edit_text(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ö–≤–∞—Ä—Ç–∏—Ä–∞, –ò–Ω—Ç–µ—Ä–Ω–µ—Ç):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="recurring_menu")]
        ])
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(last_menu_message_id=callback.message.message_id)
    await state.set_state(RecurringForm.waiting_for_description)
    await callback.answer()


@router.message(RecurringForm.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    description = message.text.strip()
    
    if len(description) > 200:
        await send_message_with_cleanup(message, state, "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(description=description)
    
    # –ö–Ω–æ–ø–∫–∏ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏
    keyboard_buttons = []
    amounts = ["1000", "2000", "5000", "10000", "20000", "50000"]
    
    # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    for i in range(0, len(amounts), 2):
        row = []
        for j in range(2):
            if i + j < len(amounts):
                row.append(InlineKeyboardButton(
                    text=f"{int(amounts[i + j]):,} ‚ÇΩ".replace(",", " "), 
                    callback_data=f"recurring_amount_{amounts[i + j]}"
                ))
        keyboard_buttons.append(row)
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="recurring_menu")])
    
    await send_message_with_cleanup(message, state,
        "üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    
    await state.set_state(RecurringForm.waiting_for_amount)


@router.callback_query(lambda c: c.data.startswith("recurring_amount_"), RecurringForm.waiting_for_amount)
async def process_amount_button(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –∫–Ω–æ–ø–∫–æ–π"""
    amount = float(callback.data.split("_")[-1])
    await state.update_data(amount=amount)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await show_category_selection(callback.message, state)
    await callback.answer()


async def show_category_selection(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = message.chat.id if hasattr(message, 'chat') else message.from_user.id
    categories = await get_user_categories(user_id)
    
    if not categories:
        await send_message_with_cleanup(message, state,
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìÅ –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="categories_menu")]
            ])
        )
        await state.clear()
        return
    
    keyboard_buttons = []
    for cat in categories:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"{cat.name}", 
                callback_data=f"recurring_cat_{cat.id}"
            )
        ])
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="recurring_menu")])
    
    if isinstance(message, types.CallbackQuery):
        await message.message.edit_text(
            "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
    else:
        await message.edit_text(
            "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
    
    await state.set_state(RecurringForm.waiting_for_category)


@router.callback_query(lambda c: c.data.startswith("recurring_cat_"), RecurringForm.waiting_for_category)
async def process_category(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[-1])
    await state.update_data(category_id=category_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–Ω—è –º–µ—Å—è—Ü–∞
    keyboard_buttons = []
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–Ω–∏
    popular_days = [1, 5, 10, 15, 20, 25, 30]
    
    for i in range(0, len(popular_days), 3):
        row = []
        for j in range(3):
            if i + j < len(popular_days):
                day = popular_days[i + j]
                row.append(InlineKeyboardButton(
                    text=f"{day} —á–∏—Å–ª–æ", 
                    callback_data=f"recurring_day_{day}"
                ))
        keyboard_buttons.append(row)
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="recurring_menu")])
    
    await callback.message.edit_text(
        "üìÖ –í –∫–∞–∫–æ–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂?\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    
    await state.set_state(RecurringForm.waiting_for_day)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("recurring_day_"), RecurringForm.waiting_for_day)
async def process_day_button(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –∫–Ω–æ–ø–∫–æ–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    day = int(callback.data.split("_")[-1])
    data = await state.get_data()
    
    user_id = callback.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    try:
        payment = await create_recurring_payment(
            user_id=user_id,
            category_id=data['category_id'],
            amount=data['amount'],
            description=data['description'],
            day_of_month=day
        )
        
        await state.clear()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        await show_recurring_menu(callback, state)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        await state.clear()


@router.message(RecurringForm.waiting_for_amount)
async def process_amount_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Ç–µ–∫—Å—Ç–æ–º"""
    try:
        amount_text = message.text.strip().replace(' ', '').replace(',', '.')
        amount = float(amount_text)
        
        if amount <= 0:
            await send_message_with_cleanup(message, state, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        await state.update_data(amount=amount)
        await show_category_selection(message, state)
        
    except ValueError:
        await send_message_with_cleanup(message, state, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")


@router.message(RecurringForm.waiting_for_day)
async def process_day_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–Ω—è —Ç–µ–∫—Å—Ç–æ–º"""
    try:
        day = int(message.text.strip())
        
        if day < 1 or day > 30:
            await send_message_with_cleanup(message, state, "‚ùå –î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 30")
            return
        
        data = await state.get_data()
        user_id = message.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        payment = await create_recurring_payment(
            user_id=user_id,
            category_id=data['category_id'],
            amount=data['amount'],
            description=data['description'],
            day_of_month=day
        )
        
        await state.clear()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        await show_recurring_menu(message, state)
        
    except ValueError:
        await send_message_with_cleanup(message, state, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30")


@router.callback_query(lambda c: c.data == "edit_recurring")
async def edit_recurring_list(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = callback.from_user.id
    payments = await get_user_recurring_payments(user_id)
    
    if not payments:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π", show_alert=True)
        return
    
    keyboard_buttons = []
    for payment in payments:
        status = "‚úÖ" if payment.is_active else "‚è∏"
        text = f"{status} {payment.description} - {payment.amount:,.0f} ‚ÇΩ"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=text, 
                callback_data=f"toggle_recurring_{payment.id}"
            )
        ])
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="recurring_menu")])
    
    await callback.message.edit_text(
        "‚úèÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª–∞—Ç–µ–∂ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(last_menu_message_id=callback.message.message_id)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("toggle_recurring_"))
async def toggle_recurring(callback: types.CallbackQuery, state: FSMContext):
    """–í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
    payment_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    payment = await get_recurring_payment_by_id(user_id, payment_id)
    if payment:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        new_status = not payment.is_active
        await update_recurring_payment(user_id, payment_id, is_active=new_status)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        await edit_recurring_list(callback, state)
    else:
        await callback.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@router.callback_query(lambda c: c.data == "delete_recurring")
async def delete_recurring_list(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    payments = await get_user_recurring_payments(user_id)
    
    if not payments:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π", show_alert=True)
        return
    
    keyboard_buttons = []
    for payment in payments:
        text = f"{payment.description} - {payment.amount:,.0f} ‚ÇΩ"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=text, 
                callback_data=f"del_recurring_{payment.id}"
            )
        ])
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="recurring_menu")])
    
    await callback.message.edit_text(
        "üóë –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(last_menu_message_id=callback.message.message_id)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("del_recurring_"))
async def delete_recurring_confirm(callback: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    success = await delete_recurring_payment(user_id, payment_id)
    
    if success:
        await callback.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ —É–¥–∞–ª–µ–Ω")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        await show_recurring_menu(callback, state)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–ª–∞—Ç–µ–∂", show_alert=True)