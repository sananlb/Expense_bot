"""
–†–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ —á–µ—Ä–µ–∑ Telegram Stars
"""
from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
from django.utils import timezone
from decimal import Decimal
from dateutil.relativedelta import relativedelta
import logging

from expenses.models import Profile, Subscription, PromoCode, PromoCodeUsage, ReferralBonus
from bot.utils.message_utils import send_message_with_cleanup

logger = logging.getLogger(__name__)

router = Router(name='subscription')


class PromoCodeStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    waiting_for_promo = State()


# –¶–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫ –≤ Telegram Stars
SUBSCRIPTION_PRICES = {
    'month': {
        'stars': 100,
        'months': 1,
        'title': '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü',
        'description': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 1 –º–µ—Å—è—Ü'
    },
    'six_months': {
        'stars': 500,
        'months': 6,
        'title': '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤',
        'description': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤'
    }
}


def get_subscription_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text="‚≠ê –ù–∞ –º–µ—Å—è—Ü - 100 –∑–≤—ë–∑–¥",
        callback_data="subscription_buy_month"
    )
    builder.button(
        text="‚≠ê –ù–∞ 6 –º–µ—Å—è—Ü–µ–≤ - 500 –∑–≤—ë–∑–¥",
        callback_data="subscription_buy_six_months"
    )
    builder.button(
        text="üéüÔ∏è –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥",
        callback_data="subscription_promo"
    )
    builder.button(
        text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
        callback_data="close"
    )
    
    builder.adjust(1)
    return builder.as_markup()


async def get_subscription_info_text(profile: Profile) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    active_subscription = await profile.subscriptions.filter(
        is_active=True,
        end_date__gt=timezone.now()
    ).order_by('-end_date').afirst()
    
    if active_subscription:
        days_left = (active_subscription.end_date - timezone.now()).days
        subscription_type = active_subscription.get_type_display()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
        if active_subscription.type == 'trial':
            emoji = "üéÅ"
            subscription_type = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
        else:
            emoji = "‚úÖ"
            
        return (
            f"{emoji} <b>–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            f"–¢–∏–ø: {subscription_type}\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {active_subscription.end_date.strftime('%d.%m.%Y')}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ."
        )
    else:
        return (
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            "–° –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:\n"
            "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
            "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ—à–±—ç–∫–∞–º–∏\n"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ PDF\n"
            "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ç\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:"
        )


@router.callback_query(F.data == "menu_subscription")
async def show_subscription_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π
    data = await state.get_data()
    invoice_msg_id = data.get('invoice_msg_id')
    subscription_back_msg_id = data.get('subscription_back_msg_id')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–æ–π—Å–æ–º, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if invoice_msg_id:
        try:
            await callback.bot.delete_message(
                chat_id=callback.from_user.id,
                message_id=invoice_msg_id
            )
        except:
            pass
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    if subscription_back_msg_id:
        try:
            await callback.bot.delete_message(
                chat_id=callback.from_user.id,
                message_id=subscription_back_msg_id
            )
        except:
            pass
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ ID
    await state.update_data(invoice_msg_id=None, subscription_back_msg_id=None)
    
    profile = await Profile.objects.aget(telegram_id=callback.from_user.id)
    
    text = await get_subscription_info_text(profile)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
    await send_message_with_cleanup(
        callback.message, 
        state, 
        text, 
        reply_markup=get_subscription_keyboard(), 
        parse_mode="HTML"
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("subscription_buy_"))
async def process_subscription_purchase(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ callback_data
    # subscription_buy_month -> month
    # subscription_buy_six_months -> six_months
    callback_parts = callback.data.split("subscription_buy_")[1]
    
    if callback_parts == "month":
        sub_type = "month"
    elif callback_parts == "six_months":
        sub_type = "six_months"
    else:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
        return
    
    sub_info = SUBSCRIPTION_PRICES[sub_type]
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.answer()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except:
        pass
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
    invoice_msg = await callback.bot.send_invoice(
        chat_id=callback.from_user.id,
        title=sub_info['title'],
        description=sub_info['description'],
        payload=f"subscription_{sub_type}_{callback.from_user.id}",
        currency="XTR",  # Telegram Stars
        prices=[
            LabeledPrice(
                label=sub_info['title'],
                amount=sub_info['stars']
            )
        ],
        start_parameter=f"sub_{sub_type}",
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        is_flexible=False
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è", callback_data="menu_subscription")
    
    back_msg = await callback.bot.send_message(
        chat_id=callback.from_user.id,
        text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏",
        reply_markup=builder.as_markup()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–±–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –ø—Ä–∏ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ
    await state.update_data(
        invoice_msg_id=invoice_msg.message_id,
        subscription_back_msg_id=back_msg.message_id
    )
    
    await callback.answer()




@router.message(Command("subscription"))
async def cmd_subscription(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    profile = await Profile.objects.aget(telegram_id=message.from_user.id)
    
    text = await get_subscription_info_text(profile)
    
    await send_message_with_cleanup(
        message, 
        state,
        text,
        reply_markup=get_subscription_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "subscription_promo")
async def ask_promocode(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except:
        pass
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_subscription")
    
    await callback.message.answer(
        "üéüÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    
    await state.set_state(PromoCodeStates.waiting_for_promo)
    await callback.answer()


@router.message(PromoCodeStates.waiting_for_promo)
async def process_promocode(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    promo_code = message.text.strip().upper()
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = await Profile.objects.aget(telegram_id=user_id)
        
        # –ò—â–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        try:
            promocode = await PromoCode.objects.aget(code=promo_code)
        except PromoCode.DoesNotExist:
            await message.answer(
                "‚ùå <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                parse_mode="HTML"
            )
            await state.clear()
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
            text = await get_subscription_info_text(profile)
            await send_message_with_cleanup(
                message, 
                state,
                text,
                reply_markup=get_subscription_keyboard(),
                parse_mode="HTML"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞
        if not promocode.is_valid():
            await message.answer(
                "‚ùå <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π.",
                parse_mode="HTML"
            )
            await state.clear()
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
            text = await get_subscription_info_text(profile)
            await send_message_with_cleanup(
                message, 
                state,
                text,
                reply_markup=get_subscription_keyboard(),
                parse_mode="HTML"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
        usage_exists = await PromoCodeUsage.objects.filter(
            promocode=promocode,
            profile=profile
        ).aexists()
        
        if usage_exists:
            await message.answer(
                "‚ùå <b>–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥</b>\n\n"
                "–ö–∞–∂–¥—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.",
                parse_mode="HTML"
            )
            await state.clear()
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
            text = await get_subscription_info_text(profile)
            await send_message_with_cleanup(
                message, 
                state,
                text,
                reply_markup=get_subscription_keyboard(),
                parse_mode="HTML"
            )
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        if promocode.discount_type == 'days':
            # –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏
            days_to_add = int(promocode.discount_value)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
            active_sub = await profile.subscriptions.filter(
                is_active=True,
                end_date__gt=timezone.now()
            ).order_by('-end_date').afirst()
            
            if active_sub:
                # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                active_sub.end_date = active_sub.end_date + timedelta(days=days_to_add)
                await active_sub.asave()
                subscription = active_sub
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
                start_date = timezone.now()
                end_date = start_date + timedelta(days=days_to_add)
                
                subscription = await Subscription.objects.acreate(
                    profile=profile,
                    type='month',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–µ—Å—è—á–Ω–∞—è
                    payment_method='stars',
                    amount=0,  # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É
                    start_date=start_date,
                    end_date=end_date,
                    is_active=True
                )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
            await PromoCodeUsage.objects.acreate(
                promocode=promocode,
                profile=profile,
                subscription=subscription
            )
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            promocode.used_count += 1
            await promocode.asave()
            
            await message.answer(
                f"‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {days_to_add} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription.end_date.strftime('%d.%m.%Y')}",
                parse_mode="HTML"
            )
            
        else:
            # –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã —Å–æ —Å–∫–∏–¥–∫–æ–π
            await state.update_data(active_promocode=promocode.id)
            
            discount_text = promocode.get_discount_display()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–µ–Ω–∞–º–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π
            builder = InlineKeyboardBuilder()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π
            month_price = SUBSCRIPTION_PRICES['month']['stars']
            six_months_price = SUBSCRIPTION_PRICES['six_months']['stars']
            
            month_discounted = int(promocode.apply_discount(month_price))
            six_months_discounted = int(promocode.apply_discount(six_months_price))
            
            builder.button(
                text=f"‚≠ê –ù–∞ –º–µ—Å—è—Ü - {month_discounted} –∑–≤—ë–∑–¥ {discount_text}",
                callback_data="subscription_buy_month_promo"
            )
            builder.button(
                text=f"‚≠ê –ù–∞ 6 –º–µ—Å—è—Ü–µ–≤ - {six_months_discounted} –∑–≤—ë–∑–¥ {discount_text}",
                callback_data="subscription_buy_six_months_promo"
            )
            builder.button(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="menu_subscription"
            )
            
            builder.adjust(1)
            
            await message.answer(
                f"‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
                f"–ü—Ä–æ–º–æ–∫–æ–¥: {promocode.code}\n"
                f"–°–∫–∏–¥–∫–∞: {discount_text}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π:",
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error processing promocode: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
        await state.clear()


@router.callback_query(F.data.startswith("subscription_buy_") & F.data.endswith("_promo"))
async def process_subscription_purchase_with_promo(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º"""
    data = await state.get_data()
    promocode_id = data.get('active_promocode')
    
    if not promocode_id:
        await callback.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    promocode = await PromoCode.objects.aget(id=promocode_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
    if "_month_" in callback.data:
        sub_type = "month"
    else:
        sub_type = "six_months"
    
    sub_info = SUBSCRIPTION_PRICES[sub_type]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É
    original_price = sub_info['stars']
    discounted_price = int(promocode.apply_discount(original_price))
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.answer()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except:
        pass
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ —Å–∫–∏–¥–∫–æ–π
    invoice_msg = await callback.bot.send_invoice(
        chat_id=callback.from_user.id,
        title=f"{sub_info['title']} (—Å–æ —Å–∫–∏–¥–∫–æ–π)",
        description=f"{sub_info['description']}\n\nüí∏ –ü—Ä–æ–º–æ–∫–æ–¥: {promocode.code} {promocode.get_discount_display()}\n‚ú® –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {discounted_price} –∑–≤—ë–∑–¥ (–≤–º–µ—Å—Ç–æ {original_price})",
        payload=f"subscription_{sub_type}_{callback.from_user.id}_promo_{promocode.id}",
        currency="XTR",  # Telegram Stars
        prices=[
            LabeledPrice(
                label=f"{sub_info['title']} {promocode.get_discount_display()}",
                amount=discounted_price
            )
        ],
        start_parameter=f"sub_{sub_type}_promo",
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        is_flexible=False
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è", callback_data="menu_subscription")
    
    back_msg = await callback.bot.send_message(
        chat_id=callback.from_user.id,
        text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏",
        reply_markup=builder.as_markup()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–±–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –ø—Ä–∏ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ
    await state.update_data(
        invoice_msg_id=invoice_msg.message_id,
        subscription_back_msg_id=back_msg.message_id
    )
    
    await callback.answer()


# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
@router.pre_checkout_query()
async def process_pre_checkout_updated(pre_checkout_query: PreCheckoutQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∞–Ω–∏–µ–º Stars"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º payload
    payload_parts = pre_checkout_query.invoice_payload.split("_")
    
    if len(payload_parts) < 4 or payload_parts[0] != "subscription":
        await pre_checkout_query.answer(
            ok=False,
            error_message="–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞"
        )
        return
    
    # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É
    await pre_checkout_query.answer(ok=True)


# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@router.message(F.successful_payment)
async def process_successful_payment_updated(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    invoice_msg_id = data.get('invoice_msg_id')
    subscription_back_msg_id = data.get('subscription_back_msg_id')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if subscription_back_msg_id:
        try:
            await message.bot.delete_message(
                chat_id=message.from_user.id,
                message_id=subscription_back_msg_id
            )
        except:
            pass
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    await state.clear()
    
    payment = message.successful_payment
    payload_parts = payment.invoice_payload.split("_")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
    if payload_parts[2] == "months":
        sub_type = f"{payload_parts[1]}_{payload_parts[2]}"
        user_id = int(payload_parts[3])
        promocode_id = int(payload_parts[5]) if len(payload_parts) > 5 and payload_parts[4] == "promo" else None
    else:
        sub_type = payload_parts[1]
        user_id = int(payload_parts[2])
        promocode_id = int(payload_parts[4]) if len(payload_parts) > 4 and payload_parts[3] == "promo" else None
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile = await Profile.objects.aget(telegram_id=user_id)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    sub_info = SUBSCRIPTION_PRICES[sub_type]
    start_date = timezone.now()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è
    active_sub = await profile.subscriptions.filter(
        is_active=True,
        end_date__gt=timezone.now()
    ).order_by('-end_date').afirst()
    
    if active_sub:
        start_date = active_sub.end_date
    
    # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
    end_date = start_date + relativedelta(months=sub_info['months'])
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
    subscription = await Subscription.objects.acreate(
        profile=profile,
        type=sub_type,
        payment_method='stars',
        amount=payment.total_amount,  # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞
        telegram_payment_charge_id=payment.telegram_payment_charge_id,
        start_date=start_date,
        end_date=end_date,
        is_active=True
    )
    
    # –ï—Å–ª–∏ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —ç—Ç–æ
    if promocode_id:
        try:
            promocode = await PromoCode.objects.aget(id=promocode_id)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            await PromoCodeUsage.objects.acreate(
                promocode=promocode,
                profile=profile,
                subscription=subscription
            )
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            promocode.used_count += 1
            await promocode.asave()
            
            discount_text = f"\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥: {promocode.code} {promocode.get_discount_display()}"
        except:
            discount_text = ""
    else:
        discount_text = ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
    if profile.referrer and sub_type in ['month', 'six_months']:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        previous_paid_subs = await profile.subscriptions.filter(
            type__in=['month', 'six_months'],
            id__lt=subscription.id  # –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ —Ç–µ–∫—É—â–µ–π
        ).acount()
        
        if previous_paid_subs == 0:
            # –≠—Ç–æ –ø–µ—Ä–≤–∞—è –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            referrer = profile.referrer
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –±–æ–Ω—É—Å–µ
            bonus = await ReferralBonus.objects.acreate(
                referrer=referrer,
                referred=profile,
                bonus_days=30,
                subscription=subscription,
                is_activated=False
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            referrer_active_sub = await referrer.subscriptions.filter(
                is_active=True,
                end_date__gt=timezone.now()
            ).order_by('-end_date').afirst()
            
            if referrer_active_sub:
                # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                referrer_active_sub.end_date = referrer_active_sub.end_date + timedelta(days=30)
                await referrer_active_sub.asave()
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π
                bonus_start = timezone.now()
                bonus_end = bonus_start + timedelta(days=30)
                
                await Subscription.objects.acreate(
                    profile=referrer,
                    type='month',
                    payment_method='stars',
                    amount=0,  # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                    start_date=bonus_start,
                    end_date=bonus_end,
                    is_active=True
                )
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ–Ω—É—Å
            bonus.is_activated = True
            bonus.activated_at = timezone.now()
            await bonus.asave()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            try:
                await message.bot.send_message(
                    referrer.telegram_id,
                    "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                    "–í–∞—à –¥—Ä—É–≥ –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n"
                    "–í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>30 –¥–Ω–µ–π</b> –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –Ω–∞—Å!",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Failed to notify referrer {referrer.telegram_id}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {sub_info['title']}\n"
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y')}{discount_text}\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞! üôè",
        parse_mode="HTML"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç—å
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")
    
    await message.answer(
        "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=builder.as_markup()
    )