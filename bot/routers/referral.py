"""
–†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""
from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging

from expenses.models import Profile, ReferralBonus
from bot.utils.message_utils import send_message_with_cleanup
from bot.services.subscription import check_subscription

logger = logging.getLogger(__name__)

router = Router(name='referral')


def get_referral_keyboard(has_code: bool = False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    
    if not has_code:
        builder.button(
            text="üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É",
            callback_data="referral_generate"
        )
    else:
        builder.button(
            text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É",
            callback_data="referral_copy"
        )
        builder.button(
            text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data="referral_stats"
        )
    
    builder.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
        callback_data="menu_main"
    )
    
    builder.adjust(1)
    return builder.as_markup()


async def get_referral_info_text(profile: Profile, bot_username: str) -> tuple[str, bool]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    has_code = bool(profile.referral_code)
    
    if not has_code:
        text = (
            "üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
            "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"
            "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ñ–æ—Ä–º–∏—Ç –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, "
            "–≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>30 –¥–Ω–µ–π</b> –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É."
        )
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        referral_link = f"https://t.me/{bot_username}?start=ref_{profile.referral_code}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_referrals = await profile.referrals.acount()
        active_referrals = await profile.referrals.filter(
            subscriptions__is_active=True,
            subscriptions__type__in=['month', 'six_months']
        ).distinct().acount()
        
        # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å—ã
        total_bonuses = await ReferralBonus.objects.filter(
            referrer=profile,
            is_activated=True
        ).acount()
        
        text = (
            f"üéÅ <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
            f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n"
            f"<code>{referral_link}</code>\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {total_referrals}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_referrals}\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: {total_bonuses} √ó 30 –¥–Ω–µ–π\n\n"
            f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ —Å –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 30 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
        )
    
    return text, has_code


@router.callback_query(F.data == "menu_referral")
async def show_referral_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    has_subscription = await check_subscription(callback.from_user.id)
    if not has_subscription:
        await callback.answer(
            "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π",
            show_alert=True
        )
        return
    
    profile = await Profile.objects.aget(telegram_id=callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
    bot_info = await callback.bot.get_me()
    bot_username = bot_info.username
    
    text, has_code = await get_referral_info_text(profile, bot_username)
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_referral_keyboard(has_code),
            parse_mode="HTML"
        )
    except Exception:
        await send_message_with_cleanup(
            callback, 
            state, 
            text, 
            reply_markup=get_referral_keyboard(has_code), 
            parse_mode="HTML"
        )
    
    await callback.answer()


@router.callback_query(F.data == "referral_generate")
async def generate_referral_code(callback: CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞"""
    profile = await Profile.objects.aget(telegram_id=callback.from_user.id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
    profile.generate_referral_code()
    
    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
    bot_info = await callback.bot.get_me()
    bot_username = bot_info.username
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text, has_code = await get_referral_info_text(profile, bot_username)
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_referral_keyboard(has_code),
            parse_mode="HTML"
        )
    except Exception:
        await send_message_with_cleanup(
            callback, 
            state, 
            text, 
            reply_markup=get_referral_keyboard(has_code), 
            parse_mode="HTML"
        )
    
    await callback.answer("‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")


@router.callback_query(F.data == "referral_copy")
async def copy_referral_link(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    profile = await Profile.objects.aget(telegram_id=callback.from_user.id)
    
    if not profile.referral_code:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
    bot_info = await callback.bot.get_me()
    bot_username = bot_info.username
    
    referral_link = f"https://t.me/{bot_username}?start=ref_{profile.referral_code}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.answer(
        f"<b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n\n"
        f"<code>{referral_link}</code>\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ—ë.",
        parse_mode="HTML"
    )
    
    await callback.answer("üìã –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")


@router.callback_query(F.data == "referral_stats")
async def show_referral_stats(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    profile = await Profile.objects.aget(telegram_id=callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    referrals = profile.referrals.select_related().all()
    
    text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>\n\n"
    
    if not await referrals.aexists():
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π."
    else:
        async for i, ref in enumerate(referrals, 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            has_paid_sub = await ref.subscriptions.filter(
                is_active=True,
                type__in=['month', 'six_months']
            ).aexists()
            
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞" if has_paid_sub else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–µ–Ω –ª–∏ –±–æ–Ω—É—Å
            bonus = await ReferralBonus.objects.filter(
                referrer=profile,
                referred=ref,
                is_activated=True
            ).afirst()
            
            bonus_text = " (–±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω)" if bonus else ""
            
            text += f"{i}. {status}{bonus_text}\n"
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_referral")
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except Exception:
        await send_message_with_cleanup(
            callback,
            state,
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    
    await callback.answer()


@router.message(Command("referral"))
async def cmd_referral(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    has_subscription = await check_subscription(message.from_user.id)
    if not has_subscription:
        await message.answer(
            "‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π!",
            parse_mode="HTML"
        )
        return
    
    profile = await Profile.objects.aget(telegram_id=message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
    bot_info = await message.bot.get_me()
    bot_username = bot_info.username
    
    text, has_code = await get_referral_info_text(profile, bot_username)
    
    await send_message_with_cleanup(
        message, 
        state,
        text,
        reply_markup=get_referral_keyboard(has_code),
        parse_mode="HTML"
    )