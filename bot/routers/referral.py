"""
–†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —à–∞—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞
"""
from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
from urllib.parse import quote
from expenses.models import Profile, AffiliateLink, AffiliateReferral
from bot.utils.message_utils import send_message_with_cleanup
from bot.services.subscription import check_subscription
from bot.utils import get_user_language, get_text
from bot.services.affiliate import (
    get_or_create_affiliate_link,
    get_referrer_stats,
    get_reward_history,
)

logger = logging.getLogger(__name__)

router = Router(name='referral')


def get_referral_keyboard(lang: str = 'ru', share_url: str = None, share_text: str = None):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é Telegram
    if share_url and share_text:
        share_link = f"https://t.me/share/url?url={quote(share_url)}&text={quote(share_text)}"
        builder.row(
            InlineKeyboardButton(
                text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è" if lang == 'ru' else "üì§ Share",
                url=share_link
            )
        )

    builder.button(
        text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" if lang == 'ru' else "üìä Statistics",
        callback_data="referral_stats"
    )
    builder.button(
        text="üìÖ –ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤" if lang == 'ru' else "üìÖ Bonus history",
        callback_data="referral_rewards"
    )
    builder.button(
        text=get_text('back', lang),
        callback_data="menu_subscription"
    )
    builder.button(
        text=get_text('close', lang),
        callback_data="close"
    )

    builder.adjust(1)
    return builder.as_markup()


async def get_referral_info_text(profile: Profile, bot_username: str, lang: str = 'ru') -> tuple[str, bool, str, str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π

    Returns:
        tuple: (display_text, has_code, share_text, share_url)
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    affiliate_link = await get_or_create_affiliate_link(profile.telegram_id, bot_username)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_referrer_stats(profile.telegram_id)

    rewards_months = stats['rewarded_months']
    if lang == 'en':
        share_message = (
            "Try Coins Bot ‚Äî I've used it to get my budget in order! "
            "Track expenses easily right in Telegram."
        )
        text = (
            "üîó <b>Share with friends</b>\n\n"
            "Click the 'Share' button below to invite friends!\n\n"
            "üéÅ <b>Bonus</b>\n"
            "When a friend buys their first subscription, we'll extend yours for the same period (one time)."
        )
    else:
        share_message = (
            "–ü–æ–ø—Ä–æ–±—É–π Coins Bot ‚Äî —è —Å –µ–≥–æ –ø–æ–º–æ—â—å—é –Ω–∞–≤—ë–ª –ø–æ—Ä—è–¥–æ–∫ –≤ –±—é–¥–∂–µ—Ç–µ! "
            "–õ–µ–≥–∫–æ –≤–µ–¥—É —É—á—ë—Ç —Ç—Ä–∞—Ç –ø—Ä—è–º–æ –≤ Telegram."
        )
        text = (
            "üîó <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π!\n\n"
            "üéÅ <b>–ë–æ–Ω—É—Å</b>\n"
            "–ö–æ–≥–¥–∞ –¥—Ä—É–≥ –∫—É–ø–∏—Ç –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É, –º—ã –ø—Ä–æ–¥–ª–∏–º –≤–∞—à—É –Ω–∞ —Ç–∞–∫–æ–π –∂–µ —Å—Ä–æ–∫ (–æ–¥–∏–Ω —Ä–∞–∑)."
        )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –∫–æ–¥–∞, —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –∏ URL
    return text, True, share_message, affiliate_link.telegram_link


@router.callback_query(F.data == "menu_referral")
async def show_referral_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    has_subscription = await check_subscription(callback.from_user.id)
    if not has_subscription:
        lang = await get_user_language(callback.from_user.id)
        await callback.answer(
            get_text('referral_subscription_required', lang),
            show_alert=True
        )
        return

    profile = await Profile.objects.aget(telegram_id=callback.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
    bot_info = await callback.bot.get_me()
    bot_username = bot_info.username

    lang = await get_user_language(callback.from_user.id)
    text, has_code, share_text, share_url = await get_referral_info_text(profile, bot_username, lang)

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_referral_keyboard(lang, share_url, share_text),
            parse_mode="HTML"
        )
    except Exception:
        await send_message_with_cleanup(
            callback,
            state,
            text,
            reply_markup=get_referral_keyboard(lang, share_url, share_text),
            parse_mode="HTML"
        )

    await callback.answer()


@router.callback_query(F.data == "referral_stats")
async def show_referral_stats(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    bot_info = await callback.bot.get_me()
    affiliate_link = await get_or_create_affiliate_link(user_id, bot_info.username)

    stats = await get_referrer_stats(user_id)

    if lang == 'en':
        text = (
            "üìä <b>Statistics</b>\n\n"
            f"‚Ä¢ Link clicks: {stats['clicks']}\n"
            f"‚Ä¢ Users attracted: {stats['referrals_count']}\n"
            f"‚Ä¢ Conversion rate: {stats['conversion_rate']}%\n"
            f"‚Ä¢ Total months rewarded: {stats['rewarded_months']}\n"
        )
    else:
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ: {stats['clicks']}\n"
            f"‚Ä¢ –ü—Ä–∏–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['referrals_count']}\n"
            f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['conversion_rate']}%\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –º–µ—Å—è—Ü–µ–≤ –ø–æ–¥–∞—Ä–µ–Ω–æ: {stats['rewarded_months']}\n"
        )

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    builder = InlineKeyboardBuilder()
    builder.button(text=get_text('back', lang), callback_data="menu_referral")
    builder.button(text=get_text('close', lang), callback_data="close")
    builder.adjust(1)

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except Exception:
        await send_message_with_cleanup(
            callback,
            state,
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

    await callback.answer()


@router.callback_query(F.data == "referral_rewards")
async def show_referral_rewards(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–æ–Ω—É—Å–æ–≤"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)

    rewards = await get_reward_history(user_id, limit=10)

    if lang == 'en':
        text = "üìÖ <b>Bonus history</b>\n\n"
        if not rewards:
            text += "No referral activity yet.\n\n"
            text += "üí° <i>Share your link ‚Äî the first paid plan of a friend will extend your subscription.</i>"
        else:
            for reward in rewards:
                if reward['reward_granted']:
                    granted_at = reward['reward_granted_at'].strftime('%d.%m.%Y') if reward['reward_granted_at'] else '‚Äî'
                    months_text = '1 month' if reward['reward_months'] == 1 else f"{reward['reward_months']} months"
                    text += (
                        f"‚úÖ {granted_at}\n"
                        f"   Bonus: {months_text}\n"
                        f"   Referred user: {reward['referred_user_id']}\n\n"
                    )
                else:
                    joined = reward['joined_at'].strftime('%d.%m.%Y') if reward.get('joined_at') else '‚Äî'
                    text += (
                        f"‚è≥ {joined}\n"
                        "   Waiting for the first payment\n"
                        f"   Referred user: {reward['referred_user_id']}\n\n"
                    )
    else:
        text = "üìÖ <b>–ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤</b>\n\n"
        if not rewards:
            text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n\n"
            text += "üí° <i>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π: –ø–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –¥—Ä—É–≥–∞ –ø—Ä–æ–¥–ª–∏—Ç –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É.</i>"
        else:
            for reward in rewards:
                if reward['reward_granted']:
                    granted_at = reward['reward_granted_at'].strftime('%d.%m.%Y') if reward['reward_granted_at'] else '‚Äî'
                    months_text = '1 –º–µ—Å—è—Ü' if reward['reward_months'] == 1 else f"{reward['reward_months']} –º–µ—Å—è—Ü–µ–≤"
                    text += (
                        f"‚úÖ {granted_at}\n"
                        f"   –ë–æ–Ω—É—Å: {months_text}\n"
                        f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {reward['referred_user_id']}\n\n"
                    )
                else:
                    joined = reward['joined_at'].strftime('%d.%m.%Y') if reward.get('joined_at') else '‚Äî'
                    text += (
                        f"‚è≥ {joined}\n"
                        "   –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–≤—É—é –æ–ø–ª–∞—Ç—É\n"
                        f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {reward['referred_user_id']}\n\n"
                    )

    builder = InlineKeyboardBuilder()
    builder.button(text=get_text('back', lang), callback_data="menu_referral")
    builder.button(text=get_text('close', lang), callback_data="close")
    builder.adjust(1)

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except Exception:
        await send_message_with_cleanup(
            callback,
            state,
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

    await callback.answer()


@router.message(Command("referral"))
async def cmd_referral(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    has_subscription = await check_subscription(message.from_user.id)
    if not has_subscription:
        lang = await get_user_language(message.from_user.id)
        await message.answer(
            get_text('referral_sub_required_full', lang),
            parse_mode="HTML"
        )
        return

    profile = await Profile.objects.aget(telegram_id=message.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
    bot_info = await message.bot.get_me()
    bot_username = bot_info.username

    lang = await get_user_language(message.from_user.id)
    text, _, share_text, share_url = await get_referral_info_text(profile, bot_username, lang)

    await send_message_with_cleanup(
        message,
        state,
        text,
        reply_markup=get_referral_keyboard(lang, share_url, share_text),
        parse_mode="HTML"
    )
