"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã Telegram Stars
"""
from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
from datetime import datetime, timedelta
from django.utils import timezone
from django.db.models import Q, Sum, Count
from asgiref.sync import sync_to_async

from expenses.models import Profile, AffiliateLink, AffiliateReferral, AffiliateCommission, AffiliateProgram
from bot.utils.message_utils import send_message_with_cleanup
from bot.services.subscription import check_subscription
from bot.utils import get_user_language, get_text
from bot.services.affiliate import (
    get_or_create_affiliate_link,
    get_referrer_stats,
    get_commission_history,
    get_or_create_affiliate_program
)

logger = logging.getLogger(__name__)

router = Router(name='referral')


def get_referral_keyboard(lang: str = 'ru'):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    builder = InlineKeyboardBuilder()

    builder.button(
        text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" if lang == 'ru' else "üìä Detailed statistics",
        callback_data="referral_stats"
    )
    builder.button(
        text="üìÖ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç" if lang == 'ru' else "üìÖ Payment history",
        callback_data="referral_commissions"
    )
    builder.button(
        text=get_text('close', lang),
        callback_data="close"
    )

    builder.adjust(1)
    return builder.as_markup()


async def get_referral_info_text(profile: Profile, bot_username: str, lang: str = 'ru') -> tuple[str, bool]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ Telegram Stars"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É
    affiliate_link = await get_or_create_affiliate_link(profile.telegram_id, bot_username)

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
    affiliate_program = await get_or_create_affiliate_program(commission_percent=50)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_referrer_stats(profile.telegram_id)

    if lang == 'en':
        text = (
            f"üåü <b>Partner Program</b>\n\n"
            f"Your referral link:\n"
            f"<code>{affiliate_link.telegram_link}</code>\n\n"
            f"üìä <b>Your statistics:</b>\n"
            f"‚Ä¢ Users attracted: {stats['referrals_count']}\n"
            f"‚Ä¢ Paid subscriptions: {stats['active_referrals']}\n"
            f"‚Ä¢ Earned: {stats['total_earned']} ‚≠ê\n"
            f"‚Ä¢ Pending: {stats['pending_amount']} ‚≠ê\n\n"
            f"üí° Share your link and earn {affiliate_program.get_commission_percent()}% commission in Telegram Stars!"
        )
    else:
        text = (
            f"üåü <b>–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
            f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
            f"<code>{affiliate_link.telegram_link}</code>\n\n"
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –ü—Ä–∏–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['referrals_count']}\n"
            f"‚Ä¢ –û–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: {stats['active_referrals']}\n"
            f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_earned']} ‚≠ê\n"
            f"‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['pending_amount']} ‚≠ê\n\n"
            f"üí° –î–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ {affiliate_program.get_commission_percent()}% –∫–æ–º–∏—Å—Å–∏–∏ –∑–≤—ë–∑–¥–∞–º–∏ Telegram!"
        )

    return text, True  # –í—Å–µ–≥–¥–∞ –µ—Å—Ç—å –∫–æ–¥, —Ç–∞–∫ –∫–∞–∫ —Å–æ–∑–¥–∞—ë–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏


@router.callback_query(F.data == "menu_referral")
async def show_referral_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    has_subscription = await check_subscription(callback.from_user.id)
    if not has_subscription:
        lang = await get_user_language(callback.from_user.id)
        await callback.answer(
            get_text('referral_subscription_required', lang),
            show_alert=True
        )
        return

    profile = await Profile.objects.aget(telegram_id=callback.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
    bot_info = await callback.bot.get_me()
    bot_username = bot_info.username

    lang = await get_user_language(callback.from_user.id)
    text, has_code = await get_referral_info_text(profile, bot_username, lang)

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_referral_keyboard(lang),
            parse_mode="HTML"
        )
    except Exception:
        await send_message_with_cleanup(
            callback,
            state,
            text,
            reply_markup=get_referral_keyboard(lang),
            parse_mode="HTML"
        )

    await callback.answer()


@router.callback_query(F.data == "referral_stats")
async def show_referral_stats(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    bot_info = await callback.bot.get_me()
    affiliate_link = await get_or_create_affiliate_link(user_id, bot_info.username)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_referrer_stats(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if lang == 'en':
        text = (
            "üìä <b>Detailed Statistics</b>\n\n"
            f"<b>Your referrals:</b>\n"
            f"‚Ä¢ Users attracted: {stats['referrals_count']}\n"
            f"‚Ä¢ Paid users: {stats['active_referrals']}\n"
            f"‚Ä¢ Conversion rate: {stats['conversion_rate']}%\n\n"
            f"<b>Earnings:</b>\n"
            f"‚Ä¢ Earned: {stats['total_earned']} ‚≠ê\n"
            f"‚Ä¢ Pending: {stats['pending_amount']} ‚≠ê"
        )
        if stats['referrals_count'] > 0:
            avg_earning = stats['total_earned'] / stats['referrals_count'] if stats['referrals_count'] > 0 else 0
            text += f"\n‚Ä¢ Average per user: {avg_earning:.1f} ‚≠ê"
    else:
        text = (
            "üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"<b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b>\n"
            f"‚Ä¢ –ü—Ä–∏–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['referrals_count']}\n"
            f"‚Ä¢ –û–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: {stats['active_referrals']}\n"
            f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['conversion_rate']}%\n\n"
            f"<b>–ó–∞—Ä–∞–±–æ—Ç–æ–∫:</b>\n"
            f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_earned']} ‚≠ê\n"
            f"‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['pending_amount']} ‚≠ê"
        )
        if stats['referrals_count'] > 0:
            avg_earning = stats['total_earned'] / stats['referrals_count'] if stats['referrals_count'] > 0 else 0
            text += f"\n‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {avg_earning:.1f} ‚≠ê"

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    builder = InlineKeyboardBuilder()
    builder.button(text=get_text('back', lang), callback_data="menu_referral")
    builder.button(text=get_text('close', lang), callback_data="close")
    builder.adjust(1)

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except Exception:
        await send_message_with_cleanup(
            callback,
            state,
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

    await callback.answer()


@router.callback_query(F.data == "referral_commissions")
async def show_referral_commissions(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∏—Å—Å–∏–π"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∏—Å—Å–∏–π
    commissions = await get_commission_history(user_id, limit=10)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    if lang == 'en':
        text = "üìÖ <b>Payment History</b>\n\n"
        if not commissions:
            text += "No payments yet.\n\n"
            text += "üí° <i>Share your referral link to start earning!</i>"
        else:
            for commission in commissions:
                status_emoji = {
                    'pending': '‚è≥',
                    'hold': 'üîí',
                    'paid': '‚úÖ',
                    'cancelled': '‚ùå',
                    'refunded': '‚Ü©Ô∏è'
                }.get(commission['status'], '‚ùì')

                text += (
                    f"{status_emoji} {commission['created_at'].strftime('%d.%m.%Y')}\n"
                    f"   Amount: {commission['commission_amount']} ‚≠ê\n"
                    f"   Status: {commission['status']}\n"
                )
                if commission['status'] == 'hold' and commission['hold_until']:
                    days_left = (commission['hold_until'] - timezone.now()).days
                    text += f"   Release in: {days_left} days\n"
                text += "\n"
    else:
        text = "üìÖ <b>–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç</b>\n\n"
        if not commissions:
            text += "–í—ã–ø–ª–∞—Ç –ø–æ–∫–∞ –Ω–µ—Ç.\n\n"
            text += "üí° <i>–î–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!</i>"
        else:
            for commission in commissions:
                status_emoji = {
                    'pending': '‚è≥',
                    'hold': 'üîí',
                    'paid': '‚úÖ',
                    'cancelled': '‚ùå',
                    'refunded': '‚Ü©Ô∏è'
                }.get(commission['status'], '‚ùì')

                status_text = {
                    'pending': '–û–∂–∏–¥–∞–Ω–∏–µ',
                    'hold': '–•–æ–ª–¥',
                    'paid': '–í—ã–ø–ª–∞—á–µ–Ω–æ',
                    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–æ',
                    'refunded': '–í–æ–∑–≤—Ä–∞—Ç'
                }.get(commission['status'], commission['status'])

                text += (
                    f"{status_emoji} {commission['created_at'].strftime('%d.%m.%Y')}\n"
                    f"   –°—É–º–º–∞: {commission['commission_amount']} ‚≠ê\n"
                    f"   –°—Ç–∞—Ç—É—Å: {status_text}\n"
                )
                if commission['status'] == 'hold' and commission['hold_until']:
                    days_left = (commission['hold_until'] - timezone.now()).days
                    text += f"   –î–æ –≤—ã–ø–ª–∞—Ç—ã: {days_left} –¥–Ω.\n"
                text += "\n"

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder = InlineKeyboardBuilder()
    builder.button(text=get_text('back', lang), callback_data="menu_referral")
    builder.button(text=get_text('close', lang), callback_data="close")
    builder.adjust(1)

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except Exception:
        await send_message_with_cleanup(
            callback,
            state,
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

    await callback.answer()


@router.message(Command("referral"))
async def cmd_referral(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    has_subscription = await check_subscription(message.from_user.id)
    if not has_subscription:
        lang = await get_user_language(message.from_user.id)
        await message.answer(
            get_text('referral_sub_required_full', lang),
            parse_mode="HTML"
        )
        return

    profile = await Profile.objects.aget(telegram_id=message.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
    bot_info = await message.bot.get_me()
    bot_username = bot_info.username

    lang = await get_user_language(message.from_user.id)
    text, _ = await get_referral_info_text(profile, bot_username, lang)

    await send_message_with_cleanup(
        message,
        state,
        text,
        reply_markup=get_referral_keyboard(lang),
        parse_mode="HTML"
    )