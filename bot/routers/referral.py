"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã Telegram Stars
"""
from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
from expenses.models import Profile, AffiliateLink, AffiliateReferral
from bot.utils.message_utils import send_message_with_cleanup
from bot.services.subscription import check_subscription
from bot.utils import get_user_language, get_text
from bot.services.affiliate import (
    get_or_create_affiliate_link,
    get_referrer_stats,
    get_reward_history,
)

logger = logging.getLogger(__name__)

router = Router(name='referral')


def get_referral_keyboard(lang: str = 'ru'):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    builder = InlineKeyboardBuilder()

    builder.button(
        text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" if lang == 'ru' else "üìä Detailed statistics",
        callback_data="referral_stats"
    )
    builder.button(
        text="üìÖ –ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤" if lang == 'ru' else "üìÖ Bonus history",
        callback_data="referral_rewards"
    )
    builder.button(
        text=get_text('close', lang),
        callback_data="close"
    )

    builder.adjust(1)
    return builder.as_markup()


async def get_referral_info_text(profile: Profile, bot_username: str, lang: str = 'ru') -> tuple[str, bool]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ Telegram Stars"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É
    affiliate_link = await get_or_create_affiliate_link(profile.telegram_id, bot_username)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_referrer_stats(profile.telegram_id)

    rewards_months = stats['rewarded_months']
    if lang == 'en':
        text = (
            "üåü <b>Partner Program</b>\n\n"
            "Your referral link:\n"
            f"<code>{affiliate_link.telegram_link}</code>\n\n"
            "üéÅ <b>Internal bonus</b>\n"
            "Invite a friend: when they buy their first paid plan, your subscription is extended for the same duration once.\n\n"
            "üìä <b>Your stats:</b>\n"
            f"‚Ä¢ Users attracted: {stats['referrals_count']}\n"
            f"‚Ä¢ Bonuses granted: {stats['rewarded_referrals']}\n"
            f"‚Ä¢ Waiting for first payment: {stats['pending_referrals']}\n"
            f"‚Ä¢ Total months rewarded: {rewards_months}\n\n"
            "‚≠ê <b>Telegram Stars affiliate</b>\n"
            "You can also join the official Telegram program: open <i>Settings ‚Üí My Stars ‚Üí Earn Stars</i>, find our bot and subscribe to the campaign. Telegram will track and credit Stars commissions automatically."
        )
    else:
        text = (
            "üåü <b>–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
            "–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
            f"<code>{affiliate_link.telegram_link}</code>\n\n"
            "üéÅ <b>–ù–∞—à –±–æ–Ω—É—Å</b>\n"
            "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π: –∫–æ–≥–¥–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –æ–ø–ª–∞—Ç–∏—Ç –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É, –º—ã –ø—Ä–æ–¥–ª–∏–º –≤–∞—à—É –Ω–∞ —Ç–∞–∫–æ–π –∂–µ —Å—Ä–æ–∫ (–æ–¥–∏–Ω —Ä–∞–∑).\n\n"
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –ü—Ä–∏–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['referrals_count']}\n"
            f"‚Ä¢ –ë–æ–Ω—É—Å—ã –≤—ã–¥–∞–Ω—ã: {stats['rewarded_referrals']}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø–µ—Ä–≤—É—é –æ–ø–ª–∞—Ç—É: {stats['pending_referrals']}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –º–µ—Å—è—Ü–µ–≤ –ø–æ–¥–∞—Ä–µ–Ω–æ: {rewards_months}\n\n"
            "‚≠ê <b>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ Telegram Stars</b>\n"
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é –∑–≤—ë–∑–¥–∞–º–∏? –û—Ç–∫—Ä–æ–π—Ç–µ <i>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ú–æ–∏ –∑–≤—ë–∑–¥—ã ‚Üí –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã</i>, –Ω–∞–π–¥–∏—Ç–µ –Ω–∞—à –±–æ—Ç –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –∫–∞–º–ø–∞–Ω–∏–∏. Telegram —Å–∞–º –Ω–∞—á–∏—Å–ª–∏—Ç –∏ –≤—ã–ø–ª–∞—Ç–∏—Ç –∫–æ–º–∏—Å—Å–∏—é –≤ Stars."
        )

    return text, True  # –í—Å–µ–≥–¥–∞ –µ—Å—Ç—å –∫–æ–¥, —Ç–∞–∫ –∫–∞–∫ —Å–æ–∑–¥–∞—ë–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏


@router.callback_query(F.data == "menu_referral")
async def show_referral_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    has_subscription = await check_subscription(callback.from_user.id)
    if not has_subscription:
        lang = await get_user_language(callback.from_user.id)
        await callback.answer(
            get_text('referral_subscription_required', lang),
            show_alert=True
        )
        return

    profile = await Profile.objects.aget(telegram_id=callback.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
    bot_info = await callback.bot.get_me()
    bot_username = bot_info.username

    lang = await get_user_language(callback.from_user.id)
    text, has_code = await get_referral_info_text(profile, bot_username, lang)

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_referral_keyboard(lang),
            parse_mode="HTML"
        )
    except Exception:
        await send_message_with_cleanup(
            callback,
            state,
            text,
            reply_markup=get_referral_keyboard(lang),
            parse_mode="HTML"
        )

    await callback.answer()


@router.callback_query(F.data == "referral_stats")
async def show_referral_stats(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    bot_info = await callback.bot.get_me()
    affiliate_link = await get_or_create_affiliate_link(user_id, bot_info.username)

    stats = await get_referrer_stats(user_id)

    if lang == 'en':
        text = (
            "üìä <b>Detailed statistics</b>\n\n"
            f"‚Ä¢ Link clicks: {stats['clicks']}\n"
            f"‚Ä¢ Users attracted: {stats['referrals_count']}\n"
            f"‚Ä¢ Bonuses granted: {stats['rewarded_referrals']}\n"
            f"‚Ä¢ Waiting for first payment: {stats['pending_referrals']}\n"
            f"‚Ä¢ Conversion rate: {stats['conversion_rate']}%\n"
            f"‚Ä¢ Total months rewarded: {stats['rewarded_months']}\n"
        )
    else:
        text = (
            "üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ: {stats['clicks']}\n"
            f"‚Ä¢ –ü—Ä–∏–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['referrals_count']}\n"
            f"‚Ä¢ –ë–æ–Ω—É—Å—ã –≤—ã–¥–∞–Ω—ã: {stats['rewarded_referrals']}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø–µ—Ä–≤—É—é –æ–ø–ª–∞—Ç—É: {stats['pending_referrals']}\n"
            f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['conversion_rate']}%\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –º–µ—Å—è—Ü–µ–≤ –ø–æ–¥–∞—Ä–µ–Ω–æ: {stats['rewarded_months']}\n"
        )

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    builder = InlineKeyboardBuilder()
    builder.button(text=get_text('back', lang), callback_data="menu_referral")
    builder.button(text=get_text('close', lang), callback_data="close")
    builder.adjust(1)

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except Exception:
        await send_message_with_cleanup(
            callback,
            state,
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

    await callback.answer()


@router.callback_query(F.data == "referral_rewards")
async def show_referral_rewards(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–æ–Ω—É—Å–æ–≤"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)

    rewards = await get_reward_history(user_id, limit=10)

    if lang == 'en':
        text = "üìÖ <b>Bonus history</b>\n\n"
        if not rewards:
            text += "No referral activity yet.\n\n"
            text += "üí° <i>Share your link ‚Äî the first paid plan of a friend will extend your subscription.</i>"
        else:
            for reward in rewards:
                if reward['reward_granted']:
                    granted_at = reward['reward_granted_at'].strftime('%d.%m.%Y') if reward['reward_granted_at'] else '‚Äî'
                    months_text = '1 month' if reward['reward_months'] == 1 else f"{reward['reward_months']} months"
                    text += (
                        f"‚úÖ {granted_at}\n"
                        f"   Bonus: {months_text}\n"
                        f"   Referred user: {reward['referred_user_id']}\n\n"
                    )
                else:
                    joined = reward['joined_at'].strftime('%d.%m.%Y') if reward.get('joined_at') else '‚Äî'
                    text += (
                        f"‚è≥ {joined}\n"
                        "   Waiting for the first payment\n"
                        f"   Referred user: {reward['referred_user_id']}\n\n"
                    )
    else:
        text = "üìÖ <b>–ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤</b>\n\n"
        if not rewards:
            text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n\n"
            text += "üí° <i>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π: –ø–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –¥—Ä—É–≥–∞ –ø—Ä–æ–¥–ª–∏—Ç –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É.</i>"
        else:
            for reward in rewards:
                if reward['reward_granted']:
                    granted_at = reward['reward_granted_at'].strftime('%d.%m.%Y') if reward['reward_granted_at'] else '‚Äî'
                    months_text = '1 –º–µ—Å—è—Ü' if reward['reward_months'] == 1 else f"{reward['reward_months']} –º–µ—Å—è—Ü–µ–≤"
                    text += (
                        f"‚úÖ {granted_at}\n"
                        f"   –ë–æ–Ω—É—Å: {months_text}\n"
                        f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {reward['referred_user_id']}\n\n"
                    )
                else:
                    joined = reward['joined_at'].strftime('%d.%m.%Y') if reward.get('joined_at') else '‚Äî'
                    text += (
                        f"‚è≥ {joined}\n"
                        "   –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–≤—É—é –æ–ø–ª–∞—Ç—É\n"
                        f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {reward['referred_user_id']}\n\n"
                    )

    builder = InlineKeyboardBuilder()
    builder.button(text=get_text('back', lang), callback_data="menu_referral")
    builder.button(text=get_text('close', lang), callback_data="close")
    builder.adjust(1)

    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except Exception:
        await send_message_with_cleanup(
            callback,
            state,
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

    await callback.answer()


@router.message(Command("referral"))
async def cmd_referral(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    has_subscription = await check_subscription(message.from_user.id)
    if not has_subscription:
        lang = await get_user_language(message.from_user.id)
        await message.answer(
            get_text('referral_sub_required_full', lang),
            parse_mode="HTML"
        )
        return

    profile = await Profile.objects.aget(telegram_id=message.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
    bot_info = await message.bot.get_me()
    bot_username = bot_info.username

    lang = await get_user_language(message.from_user.id)
    text, _ = await get_referral_info_text(profile, bot_username, lang)

    await send_message_with_cleanup(
        message,
        state,
        text,
        reply_markup=get_referral_keyboard(lang),
        parse_mode="HTML"
    )
