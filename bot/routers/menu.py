"""
–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
"""
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from datetime import datetime, date
from decimal import Decimal
import asyncio

from ..services.expense import get_today_summary, get_month_summary
from ..services.cashback import calculate_potential_cashback
from ..utils.message_utils import send_message_with_cleanup, delete_message_with_effect

router = Router(name="menu")




@router.callback_query(lambda c: c.data == "menu")
async def callback_menu(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
    await show_main_menu(callback, state)


async def show_main_menu(message: types.Message | types.CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    text = """üí∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ –¢–ó
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –†–∞—Å—Ö–æ–¥—ã", callback_data="expenses_today")],
        [InlineKeyboardButton(text="üí≥ –ö–µ—à–±—ç–∫", callback_data="cashback_menu")],
        [InlineKeyboardButton(text="üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories_menu")],
        [InlineKeyboardButton(text="üîÑ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏", callback_data="recurring_menu")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")],
        [InlineKeyboardButton(text="üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="start")]
    ])
    
    await send_message_with_cleanup(message, state, text, reply_markup=keyboard)


@router.callback_query(lambda c: c.data == "expenses_today")
async def show_today_expenses(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    user_id = callback.from_user.id
    today = date.today()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    summary = await get_today_summary(user_id)
    
    if not summary or summary['total'] == 0:
        text = f"""üìä –°–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, {today.strftime('%d %B')}

üí∞ –í—Å–µ–≥–æ: 0 ‚ÇΩ

–°–µ–≥–æ–¥–Ω—è —Ç—Ä–∞—Ç –ø–æ–∫–∞ –Ω–µ—Ç."""
    else:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        text = f"""üìä –°–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, {today.strftime('%d %B')}

üí∞ –í—Å–µ–≥–æ: {summary['total']:,.0f} ‚ÇΩ

üìä –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for cat in summary['categories']:
            percent = (cat['amount'] / summary['total']) * 100
            text += f"\n{cat['icon']} {cat['name']}: {cat['amount']:,.0f} ‚ÇΩ ({percent:.1f}%)"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫
        cashback = await calculate_potential_cashback(user_id, today, today)
        text += f"\n\nüí≥ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫: {cashback:,.0f} ‚ÇΩ"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç—Ä–∞—Ç
    month_summary = await get_month_summary(user_id, today.month, today.year)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard_buttons = []
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "—Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü
    if month_summary and month_summary.get('total', 0) > 0:
        keyboard_buttons.append([InlineKeyboardButton(text="üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞", callback_data="expenses_month")])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="menu"),
        InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await send_message_with_cleanup(callback, state, text, reply_markup=keyboard)
    await callback.answer()




@router.callback_query(lambda c: c.data == "start")
async def show_start(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (callback –Ω–∞ –∫–Ω–æ–ø–∫—É –ò–Ω—Ñ–æ)"""
    from ..routers.start import get_start_message, get_start_keyboard
    
    text = get_start_message()
    keyboard = get_start_keyboard()
    
    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await send_message_with_cleanup(callback, state, text, reply_markup=keyboard)
    await callback.answer()


