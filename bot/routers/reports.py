"""
Router for expense reports and analytics
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime, date, timedelta
from calendar import monthrange
import logging

from bot.keyboards import expenses_summary_keyboard, month_selection_keyboard, back_close_keyboard
from bot.utils import get_text, format_amount, get_month_name
from bot.services.expense import get_expenses_summary, get_expenses_by_period, get_last_expenses
from bot.utils.message_utils import send_message_with_cleanup
from bot.services.subscription import check_subscription, subscription_required_message, get_subscription_button
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

logger = logging.getLogger(__name__)

router = Router(name="reports")


@router.message(Command("summary"))
async def cmd_summary(message: Message, lang: str = 'ru'):
    """–ö–æ–º–∞–Ω–¥–∞ /summary - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –∑–∞ –º–µ—Å—è—Ü"""
    today = date.today()
    start_date = today.replace(day=1)
    end_date = today
    
    await show_expenses_summary(message, start_date, end_date, lang)


@router.callback_query(F.data == "expenses_today")
async def callback_expenses_today(callback: CallbackQuery, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = date.today()
    
    await show_expenses_summary(
        callback.message,
        today,
        today,
        lang,
        edit=True,
        original_message=callback.message
    )
    await callback.answer()


@router.callback_query(F.data == "show_month_start")
async def callback_show_month_start(callback: CallbackQuery, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞"""
    today = date.today()
    start_date = today.replace(day=1)
    
    await show_expenses_summary(
        callback.message,
        start_date,
        today,
        lang,
        edit=True,
        original_message=callback.message
    )
    await callback.answer()




async def show_expenses_summary(
    message: Message,
    start_date: date,
    end_date: date,
    lang: str,
    edit: bool = False,
    original_message: Message = None
):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        summary = await get_expenses_summary(
            telegram_id=message.from_user.id if not edit else original_message.from_user.id,
            start_date=start_date,
            end_date=end_date
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        if start_date == end_date:
            if start_date == date.today():
                period_text = get_text('today', lang)
            else:
                period_text = start_date.strftime('%d.%m.%Y')
        else:
            month_name = get_month_name(start_date.month, lang)
            if start_date.month == end_date.month and start_date.year == end_date.year:
                period_text = f"{month_name} {start_date.year}"
            else:
                period_text = f"{start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}"
        
        text = f"üìä {get_text('summary', lang)} {period_text}\n\n"
        
        if summary['total'] == 0:
            text += get_text('no_expenses_period', lang)
        else:
            # –û–±—â–∞—è —Å—É–º–º–∞
            text += f"üí∞ {get_text('total', lang)}: {format_amount(summary['total'], summary['currency'], lang)}\n\n"
            
            # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if summary['by_category']:
                text += f"üìä {get_text('by_categories', lang)}:\n"
                for cat in summary['by_category'][:10]:  # –ú–∞–∫—Å–∏–º—É–º 10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    percentage = float(cat['total']) / float(summary['total']) * 100
                    text += f"{cat['icon']} {cat['name']}: {format_amount(cat['total'], summary['currency'], lang)} ({percentage:.1f}%)\n"
                
            # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫
            if summary['potential_cashback'] > 0:
                text += f"\nüí≥ {get_text('potential_cashback', lang)}: {format_amount(summary['potential_cashback'], summary['currency'], lang)}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤–Ω–∏–∑—É –∫—É—Ä—Å–∏–≤–æ–º
        text += "\n\n<i>–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥?</i>"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        today = date.today()
        is_today = start_date == end_date == today
        is_current_month = (start_date.day == 1 and 
                           start_date.month == today.month and 
                           start_date.year == today.year and
                           end_date >= today)
        
        if is_today:
            period = 'today'
            show_pdf = False
        elif is_current_month or (start_date.day == 1 and end_date.month == start_date.month):
            period = 'month'
            show_pdf = True
        else:
            period = 'custom'
            show_pdf = True
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
        from aiogram.fsm.storage.base import StorageKey
        storage_key = StorageKey(
            bot_id=message.bot.id,
            chat_id=message.chat.id if not edit else original_message.chat.id,
            user_id=message.from_user.id if not edit else original_message.from_user.id
        )
        state = FSMContext(
            storage=message.bot.fsm_storage,
            key=storage_key
        )
        await state.update_data(
            report_start_date=start_date,
            report_end_date=end_date,
            current_month=start_date.month if start_date.day == 1 else None,
            current_year=start_date.year if start_date.day == 1 else None
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if edit and original_message:
            await original_message.edit_text(
                text,
                reply_markup=expenses_summary_keyboard(lang, period, show_pdf)
            )
        else:
            await send_message_with_cleanup(
                message, state, text,
                reply_markup=expenses_summary_keyboard(lang, period, show_pdf)
            )
            
    except Exception as e:
        logger.error(f"Error showing expenses summary: {e}")
        error_text = get_text('error_occurred', lang)
        if edit and original_message:
            await original_message.edit_text(error_text)
        else:
            await send_message_with_cleanup(message, state, error_text)


@router.message(Command("report"))
async def cmd_report(message: Message, lang: str = 'ru'):
    """–ö–æ–º–∞–Ω–¥–∞ /report - –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    keyboard = month_selection_keyboard(lang)
    
    await send_message_with_cleanup(
        message, state,
        get_text('choose_month', lang),
        reply_markup=keyboard
    )


@router.callback_query(F.data == "show_diary")
async def callback_show_diary(callback: CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–∞—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –∑–∞–ø–∏—Å–µ–π)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Ä–∞—Å—Ö–æ–¥–æ–≤
        expenses = await get_last_expenses(callback.from_user.id, limit=30)
        
        if not expenses:
            text = "üìî <b>–î–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–∞—Ç</b>\n\n<i>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ç—Ä–∞—Ç–∞—Ö</i>"
        else:
            text = "üìî <b>–î–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–∞—Ç</b>\n<i>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –∑–∞–ø–∏—Å–µ–π</i>\n\n"
            
            current_date = None
            for expense in expenses:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
                if expense.expense_date != current_date:
                    current_date = expense.expense_date
                    text += f"\n<b>{current_date.strftime('%d.%m.%Y')}</b>\n"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—É–º–º—É –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                time_str = expense.created_at.strftime('%H:%M')
                description = expense.description or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                if len(description) > 30:
                    description = description[:27] + "..."
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É —Å –≤–∞–ª—é—Ç–æ–π
                currency = expense.currency or 'RUB'
                amount_str = f"{expense.amount:,.0f}".replace(',', ' ')
                if currency == 'RUB':
                    amount_str += ' ‚ÇΩ'
                elif currency == 'USD':
                    amount_str += ' $'
                elif currency == 'EUR':
                    amount_str += ' ‚Ç¨'
                else:
                    amount_str += f' {currency}'
                
                text += f"  {time_str} ‚Ä¢ {description} ‚Ä¢ {amount_str}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –æ—Ç—á–µ—Ç—É", callback_data="back_to_summary")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing expense diary: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–Ω–µ–≤–Ω–∏–∫–∞", show_alert=True)


@router.callback_query(F.data == "back_to_summary")
async def callback_back_to_summary(callback: CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –æ—Ç—á–µ—Ç—É"""
    data = await state.get_data()
    start_date = data.get('report_start_date')
    end_date = data.get('report_end_date')
    
    if start_date and end_date:
        await show_expenses_summary(
            callback.message,
            start_date,
            end_date,
            lang,
            edit=True,
            original_message=callback.message
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        today = date.today()
        start_date = today.replace(day=1)
        await show_expenses_summary(
            callback.message,
            start_date,
            today,
            lang,
            edit=True,
            original_message=callback.message
        )
    await callback.answer()


@router.callback_query(F.data.startswith("month_"))
async def callback_select_month(callback: CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    month = int(callback.data.split('_')[1])
    year = date.today().year
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ, –±–µ—Ä–µ–º –ø—Ä–æ—à–ª—ã–π –≥–æ–¥
    if month > date.today().month:
        year -= 1
        
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã
    start_date = date(year, month, 1)
    _, last_day = monthrange(year, month)
    end_date = date(year, month, last_day)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    await show_expenses_summary(
        callback.message,
        start_date,
        end_date,
        lang,
        edit=True,
        original_message=callback.message
    )
    await callback.answer()