"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞—Ç - –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞
"""
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import date
import asyncio

from ..services.expense import get_today_summary
from ..services.cashback import calculate_potential_cashback
from ..utils.message_utils import send_message_with_cleanup, delete_message_with_effect
from ..utils import get_text

router = Router(name="expense")


class ExpenseForm(StatesGroup):
    waiting_for_amount = State()
    waiting_for_category = State()
    waiting_for_description = State()


@router.message(Command("expenses"))
async def cmd_expenses(message: types.Message, state: FSMContext, lang: str = 'ru'):
    """–ö–æ–º–∞–Ω–¥–∞ /expenses - –ø–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    user_id = message.from_user.id
    today = date.today()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    summary = await get_today_summary(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
    month_name = get_text(today.strftime('%B').lower(), lang)
    
    if not summary or summary['total'] == 0:
        currency_symbol = get_text('rub', lang) if summary.get('currency', 'RUB') == 'RUB' else summary.get('currency', 'RUB')
        text = f"""üìä {get_text('summary_for', lang)} {get_text('today', lang).lower()}, {today.strftime('%d')} {month_name}

üí∞ {get_text('total', lang)}: 0 {currency_symbol}

{get_text('no_expenses_today', lang)}."""
    else:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –≤–∞–ª—é—Ç
        currency = summary.get('currency', 'RUB')
        currency_symbol = get_text('rub', lang) if currency == 'RUB' else currency
        
        text = f"""üìä {get_text('summary_for', lang)} {get_text('today', lang).lower()}, {today.strftime('%d')} {month_name}

üí∞ {get_text('total', lang)}: {summary['total']:,.0f} {currency_symbol}"""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–∞—Ç—ã –≤ –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç–∞—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        if not summary.get('single_currency', True):
            text += f"\n\nüí± {get_text('other_currencies', lang)}:"
            for curr, amount in summary.get('currency_totals', {}).items():
                if curr != currency and amount > 0:
                    curr_symbol = get_text('rub', lang) if curr == 'RUB' else curr
                    text += f"\n{amount:,.2f} {curr_symbol}"
        
        text += f"\n\nüìä {get_text('by_categories', lang)}:"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for cat in summary['categories']:
            if summary['total'] > 0:
                percent = (cat['amount'] / summary['total']) * 100
                text += f"\n{cat['icon']} {cat['name']}: {cat['amount']:,.0f} {currency_symbol} ({percent:.1f}%)"
            else:
                text += f"\n{cat['icon']} {cat['name']}: {cat['amount']:,.0f} {currency_symbol}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫
        cashback = await calculate_potential_cashback(user_id, today, today)
        text += f"\n\nüí≥ {get_text('potential_cashback', lang)}: {cashback:,.0f} {get_text('rub', lang)}"
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_text('show_month_start', lang), callback_data="expenses_month")],
        [InlineKeyboardButton(text=get_text('close', lang), callback_data="close")]
    ])
    
    await send_message_with_cleanup(message, state, text, reply_markup=keyboard)


@router.callback_query(lambda c: c.data == "expenses_month")
async def show_month_expenses(callback: types.CallbackQuery, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞—Ç—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
    user_id = callback.from_user.id
    today = date.today()
    start_date = today.replace(day=1)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from ..services.expense import get_month_summary
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞ –º–µ—Å—è—Ü
    summary = await get_month_summary(user_id, today.month, today.year)
    
    month_names = {
        1: get_text('january', lang).capitalize(),
        2: get_text('february', lang).capitalize(),
        3: get_text('march', lang).capitalize(),
        4: get_text('april', lang).capitalize(),
        5: get_text('may', lang).capitalize(),
        6: get_text('june', lang).capitalize(),
        7: get_text('july', lang).capitalize(),
        8: get_text('august', lang).capitalize(),
        9: get_text('september', lang).capitalize(),
        10: get_text('october', lang).capitalize(),
        11: get_text('november', lang).capitalize(),
        12: get_text('december', lang).capitalize()
    }
    
    if not summary or summary['total'] == 0:
        text = f"""üìä {get_text('summary_for', lang)} {month_names[today.month]} {today.year}

üí∞ {get_text('total_spent_month', lang)}: 0 {get_text('rub', lang)}

{get_text('no_expenses_this_month', lang)}"""
    else:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        text = f"""üìä {get_text('summary_for', lang)} {month_names[today.month]} {today.year}

üí∞ {get_text('total_spent_month', lang)}: {summary['total']:,.0f} {get_text('rub', lang)}

üìä {get_text('by_categories', lang)}:"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for i, cat in enumerate(summary['categories'][:5]):
            percent = (cat['amount'] / summary['total']) * 100
            text += f"\n{cat['icon']} {cat['name']}: {cat['amount']:,.0f} ‚ÇΩ ({percent:.1f}%)"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫
        cashback = await calculate_potential_cashback(user_id, start_date, today)
        text += f"\n\nüí≥ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫: {cashback:,.0f} ‚ÇΩ"
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å PDF –æ—Ç—á–µ—Ç–æ–º
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF –æ—Ç—á–µ—Ç", callback_data="generate_pdf")],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="expenses_today"),
            InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")
        ]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.text & ~F.text.startswith('/'))
async def handle_text_expense(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç—Ä–∞—Ç–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    if current_state:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç—Ä–∞—Ç—É
        import logging
        logger = logging.getLogger(__name__)
        logger.info(f"Skipping expense handler due to active state: {current_state}")
        return
    
    from ..utils.expense_parser import parse_expense_message
    from ..services.expense import add_expense
    from ..services.category import get_or_create_category
    
    user_id = message.from_user.id
    text = message.text
    
    # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å AI –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    from expenses.models import Profile
    try:
        profile = await Profile.objects.aget(telegram_id=user_id)
    except Profile.DoesNotExist:
        profile = None
    
    parsed = await parse_expense_message(text, user_id=user_id, profile=profile, use_ai=True)
    
    if not parsed:
        # –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç—Ä–∞—Ç—É
        await send_message_with_cleanup(message, state,
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç—Ä–∞—Ç—É.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ –ö–æ—Ñ–µ 200\n"
            "‚Ä¢ –¢–∞–∫—Å–∏ –¥–æ–º–æ–π 450 —Ä—É–±\n"
            "‚Ä¢ –ü–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã 1500"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = await get_or_create_category(user_id, parsed['category'])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç–µ
    amount = parsed['amount']
    currency = parsed.get('currency', 'RUB')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞—Ç—É –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç–µ
    expense = await add_expense(
        user_id=user_id,
        category_id=category.id,
        amount=amount,
        description=parsed['description'],
        currency=currency
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    confidence_text = ""
    if parsed.get('ai_enhanced') and parsed.get('confidence'):
        confidence_text = f"\nü§ñ AI —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {parsed['confidence']*100:.0f}%"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤–∞–ª—é—Ç—ã
    if currency == 'RUB':
        amount_text = f"{expense.amount:,.0f} ‚ÇΩ"
    else:
        amount_text = f"{expense.amount:,.2f} {currency}"
    
    await send_message_with_cleanup(message, state,
        f"‚úÖ –¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        f"üí∞ –°—É–º–º–∞: {amount_text}\n"
        f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.icon} {category.name}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {expense.description}"
        f"{confidence_text}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –¢—Ä–∞—Ç—ã", callback_data="expenses_today"),
                InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_expense_{expense.id}")
            ],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_expense_{expense.id}")]
        ])
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.voice)
async def handle_voice_expense(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    from bot.services.voice_processing import process_voice_expense
    from expenses.models import Profile
    
    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    bot = message.bot
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    user_language = 'ru'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    
    try:
        profile = await Profile.objects.aget(telegram_id=user_id)
        # –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if hasattr(profile, 'language'):
            user_language = profile.language
    except Profile.DoesNotExist:
        pass
    
    # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = await process_voice_expense(message, bot, user_language)
    
    if not text:
        return
    
    # –î–∞–ª—å—à–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        profile = await Profile.objects.aget(telegram_id=user_id)
    except Profile.DoesNotExist:
        profile = None
    
    # –ü–∞—Ä—Å–∏–º —Ç—Ä–∞—Ç—É —Å AI –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    parsed = await parse_expense_message(text, user_id=user_id, profile=profile, use_ai=True)
    
    if not parsed:
        await send_message_with_cleanup(message, state,
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç—Ä–∞—Ç—É –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å —á–µ—Ç—á–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ \"–ö–æ—Ñ–µ –¥–≤–µ—Å—Ç–∏ —Ä—É–±–ª–µ–π\"\n"
            "‚Ä¢ \"–¢–∞–∫—Å–∏ –¥–æ–º–æ–π —á–µ—Ç—ã—Ä–µ—Å—Ç–∞ –ø—è—Ç—å–¥–µ—Å—è—Ç\"\n"
            "‚Ä¢ \"–ü–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã —Ç—ã—Å—è—á–∞ –ø—è—Ç—å—Å–æ—Ç\""
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = await get_or_create_category(user_id, parsed['category'])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç–µ
    amount = parsed['amount']
    currency = parsed.get('currency', 'RUB')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞—Ç—É –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç–µ
    expense = await add_expense(
        user_id=user_id,
        category_id=category.id,
        amount=amount,
        description=parsed['description'],
        currency=currency
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    confidence_text = ""
    if parsed.get('ai_enhanced') and parsed.get('confidence'):
        confidence_text = f"\nü§ñ AI —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {parsed['confidence']*100:.0f}%"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤–∞–ª—é—Ç—ã
    if currency == 'RUB':
        amount_text = f"{expense.amount:,.0f} ‚ÇΩ"
    else:
        amount_text = f"{expense.amount:,.2f} {currency}"
    
    await send_message_with_cleanup(message, state,
        f"‚úÖ –¢—Ä–∞—Ç–∞ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        f"üí∞ –°—É–º–º–∞: {amount_text}\n"
        f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.icon} {category.name}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {expense.description}"
        f"{confidence_text}\n"
        f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: \"{text}\"",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –¢—Ä–∞—Ç—ã", callback_data="expenses_today"),
                InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_expense_{expense.id}")
            ],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_expense_{expense.id}")]
        ])
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ (—á–µ–∫–æ–≤)
@router.message(F.photo)
async def handle_photo_expense(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–æ–≤"""
    await send_message_with_cleanup(message, state, "üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞—Ç—ã
@router.callback_query(lambda c: c.data.startswith("edit_expense_"))
async def edit_expense(callback: types.CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã"""
    expense_id = int(callback.data.split("_")[-1])
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    await callback.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç—ã
@router.callback_query(lambda c: c.data.startswith("delete_expense_"))
async def delete_expense(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç—ã"""
    expense_id = int(callback.data.split("_")[-1])
    from ..services.expense import delete_expense as delete_expense_service
    
    user_id = callback.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Ç—Ä–∞—Ç—É
    success = await delete_expense_service(user_id, expense_id)
    
    if success:
        await callback.message.edit_text("‚úÖ –¢—Ä–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—É", show_alert=True)