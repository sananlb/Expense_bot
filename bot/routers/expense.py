"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞—Ç - –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞
"""
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
# from aiogram.exceptions import CancelHandler  # Not available in aiogram 3.x
from datetime import date, datetime
import asyncio
import logging

from ..services.expense import add_expense, get_month_summary
from ..services.cashback import calculate_potential_cashback, calculate_expense_cashback
from ..services.category import get_or_create_category
from ..services.subscription import check_subscription
from ..utils.message_utils import send_message_with_cleanup, delete_message_with_effect
from ..utils import get_text
from ..utils.expense_parser import parse_expense_message
from ..utils.formatters import format_currency, format_expenses_summary, format_date
from ..utils.validators import validate_amount, parse_description_amount
from ..utils.expense_messages import format_expense_added_message
from ..utils.language import translate_category_name
from ..decorators import require_subscription, rate_limit
from ..keyboards import expenses_summary_keyboard
from expenses.models import Profile

router = Router(name="expense")
logger = logging.getLogger(__name__)


class ExpenseForm(StatesGroup):
    waiting_for_amount = State()
    waiting_for_category = State()
    waiting_for_description = State()
    waiting_for_amount_clarification = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å—É–º–º—ã


class EditExpenseForm(StatesGroup):
    choosing_field = State()
    editing_amount = State()
    editing_description = State()
    editing_category = State()


@router.message(Command("expenses"))
async def cmd_expenses(message: types.Message, state: FSMContext, lang: str = 'ru'):
    """–ö–æ–º–∞–Ω–¥–∞ /expenses - –ø–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = date.today()
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ reports —á–µ—Ä–µ–∑ callback
    from ..routers.reports import callback_expenses_today
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π callback query –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏
    from aiogram.types import CallbackQuery
    
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º show_expenses_summary –Ω–∞–ø—Ä—è–º—É—é
    from ..routers.reports import show_expenses_summary
    await show_expenses_summary(
        message,
        today,
        today,
        lang,
        state=state,
        edit=False
    )


@router.callback_query(lambda c: c.data == "expenses_month")
async def show_month_expenses(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞—Ç—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
    user_id = callback.from_user.id
    today = date.today()
    start_date = today.replace(day=1)
    
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞ –º–µ—Å—è—Ü
    summary = await get_month_summary(user_id, today.month, today.year)
    
    month_names = {
        1: get_text('january', lang).capitalize(),
        2: get_text('february', lang).capitalize(),
        3: get_text('march', lang).capitalize(),
        4: get_text('april', lang).capitalize(),
        5: get_text('may', lang).capitalize(),
        6: get_text('june', lang).capitalize(),
        7: get_text('july', lang).capitalize(),
        8: get_text('august', lang).capitalize(),
        9: get_text('september', lang).capitalize(),
        10: get_text('october', lang).capitalize(),
        11: get_text('november', lang).capitalize(),
        12: get_text('december', lang).capitalize()
    }
    
    if not summary or (not summary.get('currency_totals') or all(v == 0 for v in summary.get('currency_totals', {}).values())):
        text = f"""üìä <b>{month_names[today.month]} {today.year}</b>

üí∏ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –º–µ—Å—è—Ü:</b>
‚Ä¢ 0 {get_text('rub', lang)}

{get_text('no_expenses_this_month', lang)}"""
    else:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        text = f"""üìä <b>{month_names[today.month]} {today.year}</b>

üí∏ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –º–µ—Å—è—Ü:</b>
"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–∞–ª—é—Ç—ã
        currency_totals = summary.get('currency_totals', {})
        for curr, amount in sorted(currency_totals.items()):
            if amount > 0:
                text += f"‚Ä¢ {format_currency(amount, curr)}\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç
        if summary.get('categories'):
            text += f"\nüìÅ <b>{get_text('by_categories', lang)}:</b>"
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            other_amount = {}
            for i, cat in enumerate(summary['categories']):
                if i < 8 and cat['amount'] > 0:
                    translated_name = translate_category_name(cat['name'], lang)
                    text += f"\n{cat['icon']} {translated_name}: {format_currency(cat['amount'], cat['currency'])}"
                elif i >= 8 and cat['amount'] > 0:
                    # –°—É–º–º–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –≤–∞–ª—é—Ç–∞–º
                    curr = cat['currency']
                    if curr not in other_amount:
                        other_amount[curr] = 0
                    other_amount[curr] += cat['amount']
            
            # –î–æ–±–∞–≤–ª—è–µ–º "–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã" –µ—Å–ª–∏ –µ—Å—Ç—å
            if other_amount:
                for curr, amount in other_amount.items():
                    text += f"\nüìä –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {format_currency(amount, curr)}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ 0
        cashback = await calculate_potential_cashback(user_id, start_date, today)
        if cashback > 0:
            text += f"\n\nüí≥ <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫:</b>\n‚Ä¢ {format_currency(cashback, 'RUB')}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤–Ω–∏–∑—É –∫—É—Ä—Å–∏–≤–æ–º
    text += "\n\n<i>–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥?</i>"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_month=today.month, current_year=today.year)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
    if today.month == 1:
        prev_button_month = 12
        prev_button_year = today.year - 1
    else:
        prev_button_month = today.month - 1
        prev_button_year = today.year
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å PDF –æ—Ç—á–µ—Ç–æ–º
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF –æ—Ç—á–µ—Ç", callback_data="pdf_generate_current")],
        [InlineKeyboardButton(
            text=f"‚Üê {month_names[prev_button_month]}",
            callback_data="expenses_prev_month"
        )],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(lambda c: c.data == "expenses_prev_month")
async def show_prev_month_expenses(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞—Ç—ã –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    current_month = data.get('current_month', date.today().month)
    current_year = data.get('current_year', date.today().year)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    if current_month == 1:
        prev_month = 12
        prev_year = current_year - 1
    else:
        prev_month = current_month - 1
        prev_year = current_year
    
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞ –º–µ—Å—è—Ü
    summary = await get_month_summary(user_id, prev_month, prev_year)
    
    month_names = {
        1: get_text('january', lang).capitalize(),
        2: get_text('february', lang).capitalize(),
        3: get_text('march', lang).capitalize(),
        4: get_text('april', lang).capitalize(),
        5: get_text('may', lang).capitalize(),
        6: get_text('june', lang).capitalize(),
        7: get_text('july', lang).capitalize(),
        8: get_text('august', lang).capitalize(),
        9: get_text('september', lang).capitalize(),
        10: get_text('october', lang).capitalize(),
        11: get_text('november', lang).capitalize(),
        12: get_text('december', lang).capitalize()
    }
    
    if not summary or (not summary.get('currency_totals') or all(v == 0 for v in summary.get('currency_totals', {}).values())):
        text = f"""üìä <b>{month_names[prev_month]} {prev_year}</b>

üí∏ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –º–µ—Å—è—Ü:</b>
‚Ä¢ 0 {get_text('rub', lang)}

{get_text('no_expenses_this_month', lang)}"""
    else:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        text = f"""üìä <b>{month_names[prev_month]} {prev_year}</b>

üí∏ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –º–µ—Å—è—Ü:</b>
"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–∞–ª—é—Ç—ã
        currency_totals = summary.get('currency_totals', {})
        for curr, amount in sorted(currency_totals.items()):
            if amount > 0:
                text += f"‚Ä¢ {format_currency(amount, curr)}\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç
        if summary.get('categories'):
            text += f"\nüìÅ <b>{get_text('by_categories', lang)}:</b>"
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            other_amount = {}
            for i, cat in enumerate(summary['categories']):
                if i < 8 and cat['amount'] > 0:
                    translated_name = translate_category_name(cat['name'], lang)
                    text += f"\n{cat['icon']} {translated_name}: {format_currency(cat['amount'], cat['currency'])}"
                elif i >= 8 and cat['amount'] > 0:
                    # –°—É–º–º–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –≤–∞–ª—é—Ç–∞–º
                    curr = cat['currency']
                    if curr not in other_amount:
                        other_amount[curr] = 0
                    other_amount[curr] += cat['amount']
            
            # –î–æ–±–∞–≤–ª—è–µ–º "–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã" –µ—Å–ª–∏ –µ—Å—Ç—å
            if other_amount:
                for curr, amount in other_amount.items():
                    text += f"\nüìä –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {format_currency(amount, curr)}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫
        start_date = date(prev_year, prev_month, 1)
        import calendar
        last_day = calendar.monthrange(prev_year, prev_month)[1]
        end_date = date(prev_year, prev_month, last_day)
        
        cashback = await calculate_potential_cashback(user_id, start_date, end_date)
        if cashback > 0:
            text += f"\n\nüí≥ <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫:</b>\n‚Ä¢ {format_currency(cashback, 'RUB')}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤–Ω–∏–∑—É –∫—É—Ä—Å–∏–≤–æ–º
    text += "\n\n<i>–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥?</i>"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_month=prev_month, current_year=prev_year)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    if prev_month == 1:
        prev_button_month = 12
        prev_button_year = prev_year - 1
    else:
        prev_button_month = prev_month - 1
        prev_button_year = prev_year
    
    if prev_month == 12:
        next_button_month = 1
        next_button_year = prev_year + 1
    else:
        next_button_month = prev_month + 1
        next_button_year = prev_year
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –±—É–¥—É—â–∏–º
    today = date.today()
    is_future = (next_button_year > today.year) or (next_button_year == today.year and next_button_month > today.month)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å PDF –æ—Ç—á–µ—Ç–æ–º
    keyboard_buttons = [
        [InlineKeyboardButton(text="üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF –æ—Ç—á–µ—Ç", callback_data="pdf_generate_current")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    nav_buttons.append(InlineKeyboardButton(
        text=f"‚Üê {month_names[prev_button_month]}",
        callback_data="expenses_prev_month"
    ))
    
    if not is_future:
        nav_buttons.append(InlineKeyboardButton(
            text=f"{month_names[next_button_month]} ‚Üí",
            callback_data="expenses_next_month"
        ))
    
    keyboard_buttons.append(nav_buttons)
    keyboard_buttons.append([InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(lambda c: c.data == "expenses_next_month")
async def show_next_month_expenses(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞—Ç—ã –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    current_month = data.get('current_month', date.today().month)
    current_year = data.get('current_year', date.today().year)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
    if current_month == 12:
        next_month = 1
        next_year = current_year + 1
    else:
        next_month = current_month + 1
        next_year = current_year
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞ –º–µ—Å—è—Ü
    summary = await get_month_summary(user_id, next_month, next_year)
    
    month_names = {
        1: get_text('january', lang).capitalize(),
        2: get_text('february', lang).capitalize(),
        3: get_text('march', lang).capitalize(),
        4: get_text('april', lang).capitalize(),
        5: get_text('may', lang).capitalize(),
        6: get_text('june', lang).capitalize(),
        7: get_text('july', lang).capitalize(),
        8: get_text('august', lang).capitalize(),
        9: get_text('september', lang).capitalize(),
        10: get_text('october', lang).capitalize(),
        11: get_text('november', lang).capitalize(),
        12: get_text('december', lang).capitalize()
    }
    
    if not summary or (not summary.get('currency_totals') or all(v == 0 for v in summary.get('currency_totals', {}).values())):
        text = f"""üìä <b>{month_names[next_month]} {next_year}</b>

üí∏ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –º–µ—Å—è—Ü:</b>
‚Ä¢ 0 {get_text('rub', lang)}

{get_text('no_expenses_this_month', lang)}"""
    else:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        text = f"""üìä <b>{month_names[next_month]} {next_year}</b>

üí∏ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –º–µ—Å—è—Ü:</b>
"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–∞–ª—é—Ç—ã
        currency_totals = summary.get('currency_totals', {})
        for curr, amount in sorted(currency_totals.items()):
            if amount > 0:
                text += f"‚Ä¢ {format_currency(amount, curr)}\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç
        if summary.get('categories'):
            text += f"\nüìÅ <b>{get_text('by_categories', lang)}:</b>"
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            other_amount = {}
            for i, cat in enumerate(summary['categories']):
                if i < 8 and cat['amount'] > 0:
                    translated_name = translate_category_name(cat['name'], lang)
                    text += f"\n{cat['icon']} {translated_name}: {format_currency(cat['amount'], cat['currency'])}"
                elif i >= 8 and cat['amount'] > 0:
                    # –°—É–º–º–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –≤–∞–ª—é—Ç–∞–º
                    curr = cat['currency']
                    if curr not in other_amount:
                        other_amount[curr] = 0
                    other_amount[curr] += cat['amount']
            
            # –î–æ–±–∞–≤–ª—è–µ–º "–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã" –µ—Å–ª–∏ –µ—Å—Ç—å
            if other_amount:
                for curr, amount in other_amount.items():
                    text += f"\nüìä –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {format_currency(amount, curr)}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫
        start_date = date(next_year, next_month, 1)
        import calendar
        last_day = calendar.monthrange(next_year, next_month)[1]
        end_date = date(next_year, next_month, last_day)
        
        cashback = await calculate_potential_cashback(user_id, start_date, end_date)
        if cashback > 0:
            text += f"\n\nüí≥ <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫:</b>\n‚Ä¢ {format_currency(cashback, 'RUB')}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤–Ω–∏–∑—É –∫—É—Ä—Å–∏–≤–æ–º
    text += "\n\n<i>–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥?</i>"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_month=next_month, current_year=next_year)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    if next_month == 1:
        prev_button_month = 12
        prev_button_year = next_year - 1
    else:
        prev_button_month = next_month - 1
        prev_button_year = next_year
    
    if next_month == 12:
        next_button_month = 1
        next_button_year = next_year + 1
    else:
        next_button_month = next_month + 1
        next_button_year = next_year
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –±—É–¥—É—â–∏–º
    today = date.today()
    is_future = (next_button_year > today.year) or (next_button_year == today.year and next_button_month > today.month)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å PDF –æ—Ç—á–µ—Ç–æ–º
    keyboard_buttons = [
        [InlineKeyboardButton(text="üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF –æ—Ç—á–µ—Ç", callback_data="pdf_generate_current")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    nav_buttons.append(InlineKeyboardButton(
        text=f"‚Üê {month_names[prev_button_month]}",
        callback_data="expenses_prev_month"
    ))
    
    if not is_future:
        nav_buttons.append(InlineKeyboardButton(
            text=f"{month_names[next_button_month]} ‚Üí",
            callback_data="expenses_next_month"
        ))
    
    keyboard_buttons.append(nav_buttons)
    keyboard_buttons.append([InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(lambda c: c.data == "expenses_today_view")
async def show_today_expenses(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —Ç—Ä–∞—Ç–∞–º"""
    from bot.routers.reports import show_expenses_summary
    
    today = date.today()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ—Å—è—Ü–∞
    await state.update_data(current_month=None, current_year=None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    await show_expenses_summary(
        callback.message,
        today,
        today,
        lang,
        state=state,
        edit=True,
        original_message=callback.message,
        callback=callback
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "pdf_generate_current")
async def generate_pdf_report(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    month = data.get('current_month', date.today().month)
    year = data.get('current_year', date.today().year)
    
    import asyncio
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ "–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª"
    async def keep_sending_action():
        for _ in range(15):  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 15 —Ä–∞–∑ (–∫–∞–∂–¥—ã–µ 1 —Å–µ–∫ = 15 —Å–µ–∫—É–Ω–¥)
            try:
                await callback.bot.send_chat_action(callback.message.chat.id, "upload_document")
                await asyncio.sleep(1)
            except:
                break
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    action_task = asyncio.create_task(keep_sending_action())
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
        from ..services.pdf_report import PDFReportService
        pdf_service = PDFReportService()
        
        pdf_bytes = await pdf_service.generate_monthly_report(
            user_id=callback.from_user.id,
            year=year,
            month=month
        )
        
        if not pdf_bytes:
            await callback.message.answer(
                "‚ùå <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞</b>\n\n"
                "–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ö–æ–¥–æ–≤.",
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        months = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å',
                  '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']
        filename = f"–û—Ç—á–µ—Ç_Coins_{months[month-1]}_{year}.pdf"
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        from aiogram.types import BufferedInputFile
        pdf_file = BufferedInputFile(pdf_bytes, filename=filename)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
        await callback.message.answer_document(
            document=pdf_file,
            caption=(
                f"üìä <b>–û—Ç—á–µ—Ç –∑–∞ {months[month-1]} {year}</b>\n\n"
                "–í –æ—Ç—á–µ—Ç–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è:\n"
                "‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
                "‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
                "‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ —Ç—Ä–∞—Ç –ø–æ –¥–Ω—è–º\n"
                "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–±–µ–∫–µ\n\n"
                "üí° <i>–°–æ–≤–µ—Ç: —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤</i>"
            )
        )
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–¥–∫–æ–π
        try:
            await callback.message.delete()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        
        
    except Exception as e:
        logger.error(f"Error generating report: {e}")
        await callback.message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        action_task.cancel()
        try:
            await action_task
        except asyncio.CancelledError:
            pass


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
@router.message(EditExpenseForm.editing_amount)
async def process_edit_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Å—É–º–º—ã"""
    try:
        amount = await validate_amount(message.text)
    except ValueError as e:
        await message.answer(f"‚ùå {str(e)}")
        return
    
    data = await state.get_data()
    expense_id = data.get('editing_expense_id')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞—Ç—É
    from ..services.expense import update_expense
    success = await update_expense(message.from_user.id, expense_id, amount=amount)
    
    if success:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞—Ç—É
        await show_updated_expense(message, state, expense_id)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É")


@router.message(EditExpenseForm.editing_description)
async def process_edit_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    description = message.text.strip()
    if not description:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    # –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã, –Ω–µ –º–µ–Ω—è—è —Ä–µ–≥–∏—Å—Ç—Ä –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    if description and len(description) > 0:
        description = description[0].upper() + description[1:] if len(description) > 1 else description.upper()
    
    data = await state.get_data()
    expense_id = data.get('editing_expense_id')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞—Ç—É
    from ..services.expense import update_expense
    success = await update_expense(message.from_user.id, expense_id, description=description)
    
    if success:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞—Ç—É
        await show_updated_expense(message, state, expense_id)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è - –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–ï–†–ï–î –æ—Å–Ω–æ–≤–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
@router.message(ExpenseForm.waiting_for_amount_clarification)
async def handle_amount_clarification(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞—Ç—ã"""
    from ..utils.expense_parser import parse_expense_message
    from ..services.expense import add_expense
    from ..services.category import get_or_create_category
    from ..services.cashback import calculate_expense_cashback
    from ..utils.expense_intent import is_show_expenses_request
    
    user_id = message.from_user.id
    text = message.text.strip()
    
    # –£–õ–£–ß–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    is_show_request, confidence = is_show_expenses_request(text)
    if is_show_request and confidence >= 0.7:
        # –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ —Ç—Ä–∞—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        from bot.utils.state_utils import clear_state_keep_cashback
        await clear_state_keep_cashback(state)
        from ..routers.chat import process_chat_message
        await process_chat_message(message, state, text)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    data = await state.get_data()
    description = data.get('expense_description', '')
    
    if not description:
        from bot.utils.state_utils import clear_state_keep_cashback
        await clear_state_keep_cashback(state)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from expenses.models import Profile
    try:
        profile = await Profile.objects.aget(telegram_id=user_id)
    except Profile.DoesNotExist:
        profile = None
    
    # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    parsed_amount = await parse_expense_message(text, user_id=user_id, profile=profile, use_ai=False)
    
    if not parsed_amount or not parsed_amount.get('amount'):
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 750 –∏–ª–∏ 10.50):\n\n"
            "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /expenses - —Ç—Ä–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "‚Ä¢ \"–ø–æ–∫–∞–∂–∏ —Ç—Ä–∞—Ç—ã –≤—á–µ—Ä–∞\" - —Ç—Ä–∞—Ç—ã –∑–∞ –≤—á–µ—Ä–∞\n"
            "‚Ä¢ \"—Ç—Ä–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é\" - —Ç—Ä–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é"
        )
        return
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—É–º–º—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å AI
    full_text = f"{description} {text}"
    parsed_full = await parse_expense_message(full_text, user_id=user_id, profile=profile, use_ai=True)
    
    # –ï—Å–ª–∏ –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if parsed_full:
        amount = parsed_full['amount']
        currency = parsed_full.get('currency', 'RUB')
        category_name = parsed_full.get('category', '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã')
        final_description = parsed_full.get('description', description)
    else:
        # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        amount = parsed_amount['amount']
        currency = parsed_amount.get('currency', 'RUB')
        category_name = '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã'
        final_description = description
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = await get_or_create_category(user_id, category_name)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞—Ç—É
    expense_date = parsed_full.get('expense_date') if parsed_full else parsed_amount.get('expense_date')
    expense = await add_expense(
        user_id=user_id,
        category_id=category.id,
        amount=amount,
        description=final_description,
        currency=currency,
        expense_date=expense_date  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞
    )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤–∞–ª—é—Ç—ã
    amount_text = format_currency(expense.amount, currency)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–µ—à–±—ç–∫
    cashback_text = ""
    has_subscription = await check_subscription(user_id)
    if has_subscription:
        current_month = datetime.now().month
        cashback = await calculate_expense_cashback(
            user_id=user_id,
            category_id=category.id,
            amount=expense.amount,
            month=current_month
        )
        if cashback > 0:
            cashback_text = f" (+{cashback:.0f} ‚ÇΩ)"
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å—É–º–º—ã
    clarification_message_id = data.get('clarification_message_id')
    if clarification_message_id:
        try:
            await message.bot.delete_message(
                chat_id=user_id,
                message_id=clarification_message_id
            )
        except Exception as e:
            logger.debug(f"Could not delete clarification message: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    from bot.utils.state_utils import clear_state_keep_cashback
    await clear_state_keep_cashback(state)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–º –∑–∞ –¥–µ–Ω—å
    message_text = await format_expense_added_message(
        expense=expense,
        category=category,
        cashback_text=cashback_text
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–∞—Ç–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –∏—Å—á–µ–∑–∞—Ç—å)
    await send_message_with_cleanup(message, state,
        message_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úèÔ∏è  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_expense_{expense.id}")
            ]
        ]),
        parse_mode="HTML",
        keep_message=True  # –ù–µ —É–¥–∞–ª—è—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ —Ç—Ä–∞—Ç—ã
@router.callback_query(lambda c: c.data == "cancel_expense_input")
async def cancel_expense_input(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ —Ç—Ä–∞—Ç—ã –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    clarification_message_id = data.get('clarification_message_id')
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    from bot.utils.state_utils import clear_state_keep_cashback
    await clear_state_keep_cashback(state)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å—É–º–º—ã
    try:
        if clarification_message_id:
            await callback.bot.delete_message(
                chat_id=callback.from_user.id,
                message_id=clarification_message_id
            )
    except Exception as e:
        logger.error(f"Error deleting clarification message: {e}")
    
    # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.text & ~F.text.startswith('/'))
@rate_limit(max_calls=30, period=60)  # 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
async def handle_text_expense(message: types.Message, state: FSMContext, text: str = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç—Ä–∞—Ç–∞–º–∏"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –Ω–∞—á–∞–ª–µ
    from ..services.category import get_or_create_category
    from ..services.expense import add_expense
    from ..services.cashback import calculate_expense_cashback
    from aiogram.fsm.context import FSMContext
    from ..routers.chat import process_chat_message
    import asyncio
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∫—Ä–æ–º–µ –Ω–∞—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã, 
    # –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –≤—ã—à–µ)
    current_state = await state.get_state()
    if current_state:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        logger.info(f"Skipping expense handler due to active state: {current_state}")
        return
    
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç..." —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 2 —Å–µ–∫—É–Ω–¥—ã
    typing_task = None
    typing_cancelled = False
    
    async def delayed_typing():
        nonlocal typing_cancelled
        await asyncio.sleep(2.0)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
        if typing_cancelled:
            return
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
        while not typing_cancelled:
            await asyncio.sleep(4.0)
            if not typing_cancelled:
                try:
                    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
                except:
                    break
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
    typing_task = asyncio.create_task(delayed_typing())
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
    def cancel_typing():
        nonlocal typing_cancelled
        typing_cancelled = True
        if typing_task and not typing_task.done():
            typing_task.cancel()
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω —è–≤–Ω–æ, –±–µ—Ä–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if text is None:
        text = message.text
    
    # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–∫–∞–∑–∞ —Ç—Ä–∞—Ç –î–û –≤—ã–∑–æ–≤–∞ AI –ø–∞—Ä—Å–µ—Ä–∞ (—ç–∫–æ–Ω–æ–º–∏—è —Ç–æ–∫–µ–Ω–æ–≤)
    from ..utils.expense_intent import is_show_expenses_request
    is_show_request, confidence = is_show_expenses_request(text)
    if is_show_request and confidence >= 0.7:
        logger.info(f"Detected show expenses request: '{text}' (confidence: {confidence:.2f})")
        cancel_typing()  # –û—Ç–º–µ–Ω—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
        from ..routers.chat import process_chat_message
        await process_chat_message(message, state, text)
        return
    
    # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å AI –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    from expenses.models import Profile
    try:
        profile = await Profile.objects.aget(telegram_id=user_id)
    except Profile.DoesNotExist:
        profile = None
    
    logger.info(f"Starting parse_expense_message for text: '{text}', user_id: {user_id}")
    parsed = await parse_expense_message(text, user_id=user_id, profile=profile, use_ai=True)
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –ª–æ–≥–æ–≤ –¥–ª—è Windows
    if parsed:
        safe_parsed = {k: v.encode('ascii', 'ignore').decode('ascii') if isinstance(v, str) else v 
                       for k, v in parsed.items()}
        logger.info(f"Parsing completed, result: {safe_parsed}")
    else:
        logger.info("Parsing completed, result: None")
    
    if not parsed:
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –µ–¥–∏–Ω–æ–≥–æ –º–æ–¥—É–ª—è (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ AI –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
        is_show_request, show_confidence = is_show_expenses_request(text)
        if is_show_request and show_confidence >= 0.6:
            logger.info(f"Show expenses request detected after parsing failed: '{text}'")
            cancel_typing()  # –û—Ç–º–µ–Ω—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
            from ..routers.chat import process_chat_message
            await process_chat_message(message, state, text)
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        from ..utils.text_classifier import classify_message, get_expense_indicators
        
        message_type, confidence = classify_message(text)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if confidence > 0.5:
            indicators = get_expense_indicators(text)
            logger.info(f"Classified '{text}' as {message_type} (confidence: {confidence:.2f}), indicators: {indicators}")
        
        # –ï—Å–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø—Ä–µ–¥–µ–ª–∏–ª —ç—Ç–æ –∫–∞–∫ —á–∞—Ç - –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
        if message_type == 'chat':
            logger.info(f"Message classified as chat, redirecting: '{text}'")
            cancel_typing()  # –û—Ç–º–µ–Ω—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
            from ..routers.chat import process_chat_message
            await process_chat_message(message, state, text)
            return
        
        # –ò–Ω–∞—á–µ —ç—Ç–æ —Ç—Ä–∞—Ç–∞ (message_type == 'record')
        might_be_expense = True
        
        if might_be_expense and len(text) > 2:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç—Ä–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥
            from ..services.expense import find_similar_expenses
            from datetime import datetime
            
            similar = await find_similar_expenses(user_id, text)
            
            if similar:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Ö–æ–∂–∏–µ —Ç—Ä–∞—Ç—ã, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—É–º–º—É
                last_expense = similar[0]  # –ë–µ—Ä–µ–º —Å–∞–º—É—é —á–∞—Å—Ç—É—é/–ø–æ—Å–ª–µ–¥–Ω—é—é
                amount = last_expense['amount']
                currency = last_expense['currency']
                category_name = last_expense['category']
                
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category = await get_or_create_category(user_id, category_name)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞—Ç—É
                expense = await add_expense(
                    user_id=user_id,
                    category_id=category.id,
                    amount=amount,
                    description=text,
                    currency=currency,
                    expense_date=parsed.get('expense_date') if parsed else None  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞
                )
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤–∞–ª—é—Ç—ã
                amount_text = format_currency(expense.amount, currency)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–µ—à–±—ç–∫
                cashback_text = ""
                has_subscription = await check_subscription(user_id)
                if has_subscription:
                    current_month = datetime.now().month
                    cashback = await calculate_expense_cashback(
                        user_id=user_id,
                        category_id=category.id,
                        amount=expense.amount,
                        month=current_month
                    )
                    if cashback > 0:
                        cashback_text = f" (+{cashback:.0f} ‚ÇΩ)"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–º –∑–∞ –¥–µ–Ω—å
                message_text = await format_expense_added_message(
                    expense=expense,
                    category=category,
                    cashback_text=cashback_text,
                    similar_expense=True
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–∞—Ç–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –∏—Å—á–µ–∑–∞—Ç—å)
                cancel_typing()
                await send_message_with_cleanup(message, state,
                    message_text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚úèÔ∏è  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_expense_{expense.id}")
                        ]
                    ]),
                    parse_mode="HTML",
                    keep_message=True  # –ù–µ —É–¥–∞–ª—è—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö
                )
            else:
                # –ï—Å–ª–∏ –ø–æ—Ö–æ–∂–∏—Ö —Ç—Ä–∞—Ç –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –¥–≤—É—Ö—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥
                await state.update_data(expense_description=text)
                await state.set_state(ExpenseForm.waiting_for_amount_clarification)
                
                # –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ—Ä—ë–º –∏–∑ middleware –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                lang = 'ru'
                
                cancel_typing()
                
                # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
                cancel_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_expense_input")]
                ])
                
                sent_message = await message.answer(
                    f"üí∞ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—É \"{text}\"?\n\n"
                    f"–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã:",
                    reply_markup=cancel_keyboard
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                await state.update_data(clarification_message_id=sent_message.message_id)
            return
        
        # –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç—Ä–∞—Ç—É - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —á–∞—Ç
        logger.info(f"Expense parser returned None for text: '{text}', processing as chat")
        cancel_typing()
        await process_chat_message(message, state, text)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç—Ä–∞—Ç—ã
    reused_from_last = parsed.get('reused_from_last', False)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = await get_or_create_category(user_id, parsed['category'])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç–µ
    amount = parsed['amount']
    currency = parsed.get('currency', 'RUB')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞—Ç—É –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç–µ
    expense = await add_expense(
        user_id=user_id,
        category_id=category.id,
        amount=amount,
        description=parsed['description'],
        currency=currency,
        expense_date=parsed.get('expense_date')  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (—É–±–∏—Ä–∞–µ–º –≤—ã–≤–æ–¥ AI —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)
    confidence_text = ""
    # if parsed.get('ai_enhanced') and parsed.get('confidence'):
    #     confidence_text = f"\nü§ñ AI —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {parsed['confidence']*100:.0f}%"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤–∞–ª—é—Ç—ã
    amount_text = format_currency(expense.amount, currency)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–µ—à–±—ç–∫
    from datetime import datetime
    
    cashback_text = ""
    has_subscription = await check_subscription(user_id)
    if has_subscription:
        current_month = datetime.now().month
        cashback = await calculate_expense_cashback(
            user_id=user_id,
            category_id=category.id,
            amount=expense.amount,
            month=current_month
        )
        if cashback > 0:
            cashback_text = f" (+{cashback:.0f} ‚ÇΩ)"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–º –∑–∞ –¥–µ–Ω—å
    message_text = await format_expense_added_message(
        expense=expense,
        category=category,
        cashback_text=cashback_text,
        confidence_text=confidence_text,
        reused_from_last=reused_from_last
    )
    
    cancel_typing()
    await send_message_with_cleanup(message, state,
        message_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úèÔ∏è  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_expense_{expense.id}")
            ]
        ]),
        parse_mode="HTML",
        keep_message=True  # –ù–µ —É–¥–∞–ª—è—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö
    )
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É –∑–∞–¥–∞—á–∏
    cancel_typing()
    
    # # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–µ—à–±–µ–∫–∞ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
    # from ..routers.cashback import restore_cashback_menu_if_needed
    # await restore_cashback_menu_if_needed(state, message.bot, message.chat.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.voice)
@rate_limit(max_calls=10, period=60)  # 10 –≥–æ–ª–æ—Å–æ–≤—ã—Ö –≤ –º–∏–Ω—É—Ç—É
async def handle_voice_expense(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    from bot.services.subscription import check_subscription, subscription_required_message, get_subscription_button
    
    has_subscription = await check_subscription(message.from_user.id)
    if not has_subscription:
        await message.answer(
            subscription_required_message() + "\n\n‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π.",
            reply_markup=get_subscription_button(),
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ middleware
    user_language = getattr(message, 'user_language', 'ru')
    bot = message.bot
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å
        from bot.services.voice_recognition import process_voice_for_expense
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
        text = await process_voice_for_expense(message, bot, user_language)
        
    except ImportError:
        # –ï—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
        from bot.services.voice_processing import process_voice_expense
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = await process_voice_expense(message, bot, user_language)
    
    if not text:
        return
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    # –ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –≤ nutrition_bot
    await handle_text_expense(message, state, text=text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ (—á–µ–∫–æ–≤)
@router.message(F.photo)
@rate_limit(max_calls=10, period=60)  # 10 —Ñ–æ—Ç–æ –≤ –º–∏–Ω—É—Ç—É
async def handle_photo_expense(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–æ–≤"""
    await send_message_with_cleanup(message, state, "üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞—Ç—ã
@router.callback_query(lambda c: c.data.startswith("edit_expense_"))
async def edit_expense(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã"""
    expense_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞—Ç–µ
    from ..services.expense import get_last_expense
    from expenses.models import Expense
    
    try:
        expense = await Expense.objects.select_related('category').aget(
            id=expense_id,
            profile__telegram_id=user_id
        )
    except Expense.DoesNotExist:
        await callback.answer(get_text('expense_not_found', lang), show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç—Ä–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(editing_expense_id=expense_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–µ—à–±–µ–∫ –¥–ª—è —ç—Ç–æ–π —Ç—Ä–∞—Ç—ã
    from bot.services.cashback import calculate_expense_cashback
    from datetime import datetime
    
    has_cashback = False
    if not expense.cashback_excluded:  # –ï—Å–ª–∏ –∫–µ—à–±–µ–∫ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω
        current_month = datetime.now().month
        cashback = await calculate_expense_cashback(
            user_id=user_id,
            category_id=expense.category.id if expense.category else None,
            amount=float(expense.amount),
            month=current_month
        )
        has_cashback = cashback > 0
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    translated_category = translate_category_name(expense.category.name, lang)
    buttons = [
        [InlineKeyboardButton(text=f"üí∞ {get_text('sum', lang)}: {expense.amount:.0f} ‚ÇΩ", callback_data="edit_field_amount")],
        [InlineKeyboardButton(text=f"üìù {get_text('description', lang)}: {expense.description}", callback_data="edit_field_description")],
        [InlineKeyboardButton(text=f"üìÅ {get_text('category', lang)}: {translated_category}", callback_data="edit_field_category")],
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –∫–µ—à–±–µ–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω
    if has_cashback and not expense.cashback_excluded:
        buttons.append([InlineKeyboardButton(text="üí∏ –£–±—Ä–∞—Ç—å –∫–µ—à–±–µ–∫", callback_data=f"remove_cashback_{expense_id}")])
    
    buttons.extend([
        [InlineKeyboardButton(text=f"üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_expense_{expense_id}")],
        [InlineKeyboardButton(text=f"‚úÖ {get_text('edit_done', lang)}", callback_data="edit_done")]
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>{get_text('editing_expense', lang)}</b>\n\n"
        f"{get_text('choose_field_to_edit', lang)}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    await state.set_state(EditExpenseForm.choosing_field)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç—ã
@router.callback_query(lambda c: c.data.startswith("remove_cashback_"))
async def remove_cashback(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–µ—à–±–µ–∫–∞ –∏–∑ —Ç—Ä–∞—Ç—ã"""
    expense_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    from expenses.models import Expense
    from bot.services.cashback import calculate_expense_cashback
    from datetime import datetime
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞—Ç—É —Å profile –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã format_expense_added_message
        expense = await Expense.objects.select_related('category', 'profile').aget(
            id=expense_id,
            profile__telegram_id=user_id
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–µ—à–±–µ–∫–∞
        expense.cashback_excluded = True
        await expense.asave()
        
        # –ë–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞—Ç—É
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        from ..utils.expense_messages import format_expense_added_message
        
        # –ö–µ—à–±–µ–∫ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏—Å–∫–ª—é—á–µ–Ω
        message_text = await format_expense_added_message(
            expense=expense,
            category=expense.category,
            cashback_text=""  # –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∫–µ—à–±–µ–∫–∞
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞—Ç—É —Å –∫–Ω–æ–ø–∫–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.message.edit_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úèÔ∏è  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_expense_{expense.id}")
                ]
            ]),
            parse_mode="HTML"
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        from bot.utils.state_utils import clear_state_keep_cashback
        await clear_state_keep_cashback(state)
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await callback.answer()
        
    except Expense.DoesNotExist:
        await callback.answer("‚ùå –¢—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    except Exception as e:
        logger.error(f"Error removing cashback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–µ—à–±–µ–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith("delete_expense_"))
async def delete_expense(callback: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç—ã"""
    expense_id = int(callback.data.split("_")[-1])
    from ..services.expense import delete_expense as delete_expense_service
    
    user_id = callback.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Ç—Ä–∞—Ç—É
    success = await delete_expense_service(user_id, expense_id)
    
    if success:
        await callback.message.delete()
        # # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–µ—à–±–µ–∫–∞ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
        # from ..routers.cashback import restore_cashback_menu_if_needed
        # await restore_cashback_menu_if_needed(state, callback.bot, callback.message.chat.id)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—É", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(lambda c: c.data == "edit_field_amount", EditExpenseForm.choosing_field)
async def edit_field_amount(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã"""
    data = await state.get_data()
    expense_id = data.get('editing_expense_id')
    
    await callback.message.edit_text(
        f"üí∞ <b>{get_text('editing_amount', lang)}</b>\n\n"
        f"{get_text('enter_new_amount', lang)}",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_back_{expense_id}")]
        ])
    )
    await state.set_state(EditExpenseForm.editing_amount)
    await callback.answer()


@router.callback_query(lambda c: c.data == "edit_field_description", EditExpenseForm.choosing_field)
async def edit_field_description(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
    data = await state.get_data()
    expense_id = data.get('editing_expense_id')
    
    await callback.message.edit_text(
        f"üìù <b>{get_text('editing_description', lang)}</b>\n\n"
        f"{get_text('enter_new_description', lang)}",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_back_{expense_id}")]
        ])
    )
    await state.set_state(EditExpenseForm.editing_description)
    await callback.answer()


@router.callback_query(lambda c: c.data == "edit_field_category", EditExpenseForm.choosing_field)
async def edit_field_category(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = callback.from_user.id
    from ..services.category import get_user_categories
    
    categories = await get_user_categories(user_id)
    
    if not categories:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ /categories", show_alert=True)
        return
    
    keyboard_buttons = []
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(categories), 2):
        translated_name = translate_category_name(categories[i].name, lang)
        row = [InlineKeyboardButton(
            text=f"{translated_name}", 
            callback_data=f"expense_cat_{categories[i].id}"
        )]
        if i + 1 < len(categories):
            translated_name_2 = translate_category_name(categories[i + 1].name, lang)
            row.append(InlineKeyboardButton(
                text=f"{translated_name_2}", 
                callback_data=f"expense_cat_{categories[i + 1].id}"
            ))
        keyboard_buttons.append(row)
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")])
    
    await callback.message.edit_text(
        f"üìÅ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>:\n\n"
        f"<i>–ë–æ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç –≤–∞—à –≤—ã–±–æ—Ä –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö —Ç—Ä–∞—Ç</i>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons),
        parse_mode="HTML"
    )
    await state.set_state(EditExpenseForm.editing_category)
    await callback.answer()


@router.callback_query(lambda c: c.data == "edit_cancel")
async def edit_cancel(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ - –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞—Ç—ã –∏–ª–∏ –∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    data = await state.get_data()
    expense_id = data.get('editing_expense_id')
    
    if expense_id:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞—Ç—ã
        lang = data.get('lang', 'ru')
        await show_edit_menu_callback(callback, state, expense_id, lang)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        from bot.utils.state_utils import clear_state_keep_cashback
        await clear_state_keep_cashback(state)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("edit_back_"))
async def edit_back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞—Ç—ã"""
    expense_id = int(callback.data.split("_")[-1])
    data = await state.get_data()
    lang = data.get('lang', 'ru')
    await show_edit_menu_callback(callback, state, expense_id, lang)
    await callback.answer()


@router.callback_query(lambda c: c.data == "edit_done", EditExpenseForm.choosing_field)
async def edit_done(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    expense_id = data.get('editing_expense_id')
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞—Ç—É
    from expenses.models import Expense
    try:
        expense = await Expense.objects.select_related('category', 'profile').aget(
            id=expense_id,
            profile__telegram_id=callback.from_user.id
        )
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–µ—à–±–µ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ –∏ –∫–µ—à–±–µ–∫ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω
        cashback_text = ""
        has_subscription = await check_subscription(callback.from_user.id)
        if has_subscription and expense.category and not expense.cashback_excluded:
            current_month = datetime.now().month
            cashback = await calculate_expense_cashback(
                user_id=callback.from_user.id,
                category_id=expense.category.id,
                amount=expense.amount,
                month=current_month
            )
            if cashback > 0:
                cashback_text = f" (+{cashback:.0f} ‚ÇΩ)"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        from ..utils.expense_messages import format_expense_added_message
        message_text = await format_expense_added_message(
            expense=expense,
            category=expense.category,
            cashback_text=cashback_text
        )
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.message.edit_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úèÔ∏è  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_expense_{expense.id}")
                ]
            ]),
            parse_mode="HTML"
        )
    except Expense.DoesNotExist:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç—ã")
    
    from bot.utils.state_utils import clear_state_keep_cashback
    await clear_state_keep_cashback(state)
    await callback.answer()






@router.callback_query(lambda c: c.data.startswith("expense_cat_"), EditExpenseForm.editing_category)
async def process_edit_category(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[-1])
    
    data = await state.get_data()
    expense_id = data.get('editing_expense_id')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞—Ç–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    from expenses.models import Expense
    try:
        expense = await Expense.objects.aget(id=expense_id)
        old_category_id = expense.category_id
        description = expense.description
    except Expense.DoesNotExist:
        await callback.answer("‚ùå –¢—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞—Ç—É
    from ..services.expense import update_expense
    success = await update_expense(callback.from_user.id, expense_id, category_id=category_id)
    
    if success:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        if old_category_id != category_id:
            from ..services.category import learn_from_category_change
            import asyncio
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ, –Ω–µ –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            asyncio.create_task(
                learn_from_category_change(
                    callback.from_user.id, 
                    expense_id, 
                    category_id, 
                    description
                )
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞—Ç—É
        await show_updated_expense_callback(callback, state, expense_id)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", show_alert=True)


# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ë–ï–ó –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é
# –°—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –¥—Ä—É–≥–æ–µ –º–µ–Ω—é

@router.callback_query(lambda c: c.data == "edit_field_amount")
async def edit_amount_fallback(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ"""
    data = await state.get_data()
    if data.get('editing_expense_id'):
        await state.set_state(EditExpenseForm.choosing_field)
        await edit_amount(callback, state)
    else:
        # –ü—Ä–æ—Å—Ç–æ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.answer()

@router.callback_query(lambda c: c.data == "edit_field_description")
async def edit_description_fallback(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ"""
    data = await state.get_data()
    if data.get('editing_expense_id'):
        await state.set_state(EditExpenseForm.choosing_field)
        await edit_description(callback, state)
    else:
        # –ü—Ä–æ—Å—Ç–æ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.answer()

@router.callback_query(lambda c: c.data == "edit_field_category")
async def edit_category_fallback(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ"""
    data = await state.get_data()
    if data.get('editing_expense_id'):
        await state.set_state(EditExpenseForm.choosing_field)
        await edit_field_category(callback, state, lang)
    else:
        # –ü—Ä–æ—Å—Ç–æ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.answer()

@router.callback_query(lambda c: c.data.startswith("expense_cat_"))
async def process_edit_category_fallback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ"""
    data = await state.get_data()
    expense_id = data.get('editing_expense_id')
    
    if not expense_id:
        # –ü—Ä–æ—Å—Ç–æ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.answer()
        return
    
    await state.set_state(EditExpenseForm.editing_category)
    await process_edit_category(callback, state)

@router.callback_query(lambda c: c.data == "edit_done")
async def finish_edit_fallback(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ"""
    data = await state.get_data()
    if data.get('editing_expense_id'):
        await state.set_state(EditExpenseForm.choosing_field)
        await finish_edit(callback, state)
    else:
        # –ü—Ä–æ—Å—Ç–æ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.answer()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def show_edit_menu(message: types.Message, state: FSMContext, expense_id: int, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    from expenses.models import Expense
    
    try:
        expense = await Expense.objects.select_related('category').aget(
            id=expense_id,
            profile__telegram_id=message.from_user.id
        )
        
        translated_category = translate_category_name(expense.category.name, lang)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üí∞ –°—É–º–º–∞: {expense.amount:.0f} ‚ÇΩ", callback_data="edit_field_amount")],
            [InlineKeyboardButton(text=f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {expense.description}", callback_data="edit_field_description")],
            [InlineKeyboardButton(text=f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {translated_category}", callback_data="edit_field_category")],
            [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="edit_done")]
        ])
        
        await send_message_with_cleanup(message, state,
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.set_state(EditExpenseForm.choosing_field)
    except Expense.DoesNotExist:
        await message.answer("‚ùå –¢—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


async def show_edit_menu_callback(callback: types.CallbackQuery, state: FSMContext, expense_id: int, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è callback"""
    from expenses.models import Expense
    
    try:
        expense = await Expense.objects.select_related('category').aget(
            id=expense_id,
            profile__telegram_id=callback.from_user.id
        )
        
        translated_category = translate_category_name(expense.category.name, lang)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üí∞ –°—É–º–º–∞: {expense.amount:.0f} ‚ÇΩ", callback_data="edit_field_amount")],
            [InlineKeyboardButton(text=f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {expense.description}", callback_data="edit_field_description")],
            [InlineKeyboardButton(text=f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {translated_category}", callback_data="edit_field_category")],
            [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="edit_done")]
        ])
        
        await callback.message.edit_text(
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.set_state(EditExpenseForm.choosing_field)
        await callback.answer()
    except Expense.DoesNotExist:
        await callback.answer("‚ùå –¢—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)


async def show_updated_expense(message: types.Message, state: FSMContext, expense_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞—Ç—É"""
    from expenses.models import Expense
    
    try:
        expense = await Expense.objects.select_related('category', 'profile').aget(
            id=expense_id,
            profile__telegram_id=message.from_user.id
        )
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–µ—à–±–µ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞
        cashback_text = ""
        has_subscription = await check_subscription(message.from_user.id)
        if has_subscription and expense.category:
            current_month = datetime.now().month
            cashback = await calculate_expense_cashback(
                user_id=message.from_user.id,
                category_id=expense.category.id,
                amount=expense.amount,
                month=current_month
            )
            if cashback > 0:
                cashback_text = f" (+{cashback:.0f} ‚ÇΩ)"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–º –∑–∞ –¥–µ–Ω—å
        message_text = await format_expense_added_message(
            expense=expense,
            category=expense.category,
            cashback_text=cashback_text
        )
        
        await send_message_with_cleanup(message, state,
            message_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úèÔ∏è  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_expense_{expense.id}")
                ]
            ]),
            parse_mode="HTML"
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        from bot.utils.state_utils import clear_state_keep_cashback
        await clear_state_keep_cashback(state)
    except Expense.DoesNotExist:
        await message.answer("‚ùå –¢—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        from bot.utils.state_utils import clear_state_keep_cashback
        await clear_state_keep_cashback(state)


async def show_updated_expense_callback(callback: types.CallbackQuery, state: FSMContext, expense_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞—Ç—É –¥–ª—è callback"""
    from expenses.models import Expense
    
    try:
        expense = await Expense.objects.select_related('category', 'profile').aget(
            id=expense_id,
            profile__telegram_id=callback.from_user.id
        )
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–µ—à–±–µ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ –∏ –∫–µ—à–±–µ–∫ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω
        cashback_text = ""
        has_subscription = await check_subscription(callback.from_user.id)
        if has_subscription and expense.category and not expense.cashback_excluded:
            current_month = datetime.now().month
            cashback = await calculate_expense_cashback(
                user_id=callback.from_user.id,
                category_id=expense.category.id,
                amount=expense.amount,
                month=current_month
            )
            if cashback > 0:
                cashback_text = f" (+{cashback:.0f} ‚ÇΩ)"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–º –∑–∞ –¥–µ–Ω—å
        message_text = await format_expense_added_message(
            expense=expense,
            category=expense.category,
            cashback_text=cashback_text
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úèÔ∏è  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_expense_{expense.id}")
                ]
            ]),
            parse_mode="HTML"
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        from bot.utils.state_utils import clear_state_keep_cashback
        await clear_state_keep_cashback(state)
        await callback.answer()
    except Expense.DoesNotExist:
        await callback.answer("‚ùå –¢—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        from bot.utils.state_utils import clear_state_keep_cashback
        await clear_state_keep_cashback(state)