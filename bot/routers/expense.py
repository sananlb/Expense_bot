"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞—Ç - –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞
"""
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
# from aiogram.exceptions import CancelHandler  # Not available in aiogram 3.x
from datetime import date
import asyncio
import logging

from ..services.expense import get_today_summary, add_expense
from ..services.cashback import calculate_potential_cashback
from ..services.category import get_or_create_category
from ..utils.message_utils import send_message_with_cleanup, delete_message_with_effect
from ..utils import get_text
from ..utils.expense_parser import parse_expense_message
from ..utils.formatters import format_currency, format_expenses_summary, format_date
from ..utils.validators import validate_amount, parse_description_amount
from ..decorators import require_subscription, rate_limit
from expenses.models import Profile

router = Router(name="expense")
logger = logging.getLogger(__name__)


class ExpenseForm(StatesGroup):
    waiting_for_amount = State()
    waiting_for_category = State()
    waiting_for_description = State()


class EditExpenseForm(StatesGroup):
    choosing_field = State()
    editing_amount = State()
    editing_description = State()
    editing_category = State()


@router.message(Command("expenses"))
async def cmd_expenses(message: types.Message, state: FSMContext, lang: str = 'ru'):
    """–ö–æ–º–∞–Ω–¥–∞ /expenses - –ø–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    user_id = message.from_user.id
    today = date.today()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    summary = await get_today_summary(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
    month_name = get_text(today.strftime('%B').lower(), lang)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π
    header = f"üìä {get_text('summary_for', lang)} {get_text('today', lang).lower()}, {today.strftime('%d')} {month_name}\n\n"
    
    if not summary or summary['total'] == 0:
        text = header + f"üí∞ {get_text('total', lang)}: {format_currency(0, summary.get('currency', 'RUB'))}\n\n{get_text('no_expenses_today', lang)}."
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text = header + format_expenses_summary(summary, lang)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–∞—Ç—ã –≤ –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç–∞—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        if not summary.get('single_currency', True):
            text += f"\n\nüí± {get_text('other_currencies', lang)}:"
            for curr, amount in summary.get('currency_totals', {}).items():
                if curr != summary.get('currency', 'RUB') and amount > 0:
                    text += f"\n{format_currency(amount, curr)}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫
        cashback = await calculate_potential_cashback(user_id, today, today)
        text += f"\n\nüí≥ {get_text('potential_cashback', lang)}: {format_currency(cashback, 'RUB')}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤–Ω–∏–∑—É –∫—É—Ä—Å–∏–≤–æ–º
    text += "\n\n<i>–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥?</i>"
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –° –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞", callback_data="expenses_month")],
        [InlineKeyboardButton(text=get_text('close', lang), callback_data="close")]
    ])
    
    await send_message_with_cleanup(message, state, text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(lambda c: c.data == "expenses_month")
async def show_month_expenses(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞—Ç—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
    user_id = callback.from_user.id
    today = date.today()
    start_date = today.replace(day=1)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from ..services.expense import get_month_summary
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞ –º–µ—Å—è—Ü
    summary = await get_month_summary(user_id, today.month, today.year)
    
    month_names = {
        1: get_text('january', lang).capitalize(),
        2: get_text('february', lang).capitalize(),
        3: get_text('march', lang).capitalize(),
        4: get_text('april', lang).capitalize(),
        5: get_text('may', lang).capitalize(),
        6: get_text('june', lang).capitalize(),
        7: get_text('july', lang).capitalize(),
        8: get_text('august', lang).capitalize(),
        9: get_text('september', lang).capitalize(),
        10: get_text('october', lang).capitalize(),
        11: get_text('november', lang).capitalize(),
        12: get_text('december', lang).capitalize()
    }
    
    if not summary or summary['total'] == 0:
        text = f"""üìä {get_text('summary_for', lang)} {month_names[today.month]} {today.year}

üí∞ {get_text('total_spent_month', lang)}: 0 {get_text('rub', lang)}

{get_text('no_expenses_this_month', lang)}"""
    else:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        text = f"""üìä {get_text('summary_for', lang)} {month_names[today.month]} {today.year}

üí∞ {get_text('total_spent_month', lang)}: {summary['total']:,.0f} {get_text('rub', lang)}

üìä {get_text('by_categories', lang)}:"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for i, cat in enumerate(summary['categories'][:5]):
            percent = (float(cat['amount']) / float(summary['total'])) * 100
            text += f"\n{cat['icon']} {cat['name']}: {cat['amount']:,.0f} ‚ÇΩ ({percent:.1f}%)"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫
        cashback = await calculate_potential_cashback(user_id, start_date, today)
        text += f"\n\nüí≥ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫: {cashback:,.0f} ‚ÇΩ"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤–Ω–∏–∑—É –∫—É—Ä—Å–∏–≤–æ–º
    text += "\n\n<i>–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥?</i>"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_month=today.month, current_year=today.year)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å PDF –æ—Ç—á–µ—Ç–æ–º
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF –æ—Ç—á–µ—Ç", callback_data="pdf_generate_current")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", callback_data="expenses_prev_month")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(lambda c: c.data == "expenses_prev_month")
async def show_prev_month_expenses(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞—Ç—ã –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    current_month = data.get('current_month', date.today().month)
    current_year = data.get('current_year', date.today().year)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    if current_month == 1:
        prev_month = 12
        prev_year = current_year - 1
    else:
        prev_month = current_month - 1
        prev_year = current_year
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from ..services.expense import get_month_summary
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞ –º–µ—Å—è—Ü
    summary = await get_month_summary(user_id, prev_month, prev_year)
    
    month_names = {
        1: get_text('january', lang).capitalize(),
        2: get_text('february', lang).capitalize(),
        3: get_text('march', lang).capitalize(),
        4: get_text('april', lang).capitalize(),
        5: get_text('may', lang).capitalize(),
        6: get_text('june', lang).capitalize(),
        7: get_text('july', lang).capitalize(),
        8: get_text('august', lang).capitalize(),
        9: get_text('september', lang).capitalize(),
        10: get_text('october', lang).capitalize(),
        11: get_text('november', lang).capitalize(),
        12: get_text('december', lang).capitalize()
    }
    
    if not summary or summary['total'] == 0:
        text = f"""üìä {get_text('summary_for', lang)} {month_names[prev_month]} {prev_year}

üí∞ {get_text('total_spent_month', lang)}: 0 {get_text('rub', lang)}

{get_text('no_expenses_this_month', lang)}"""
    else:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        text = f"""üìä {get_text('summary_for', lang)} {month_names[prev_month]} {prev_year}

üí∞ {get_text('total_spent_month', lang)}: {summary['total']:,.0f} {get_text('rub', lang)}

üìä {get_text('by_categories', lang)}:"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for i, cat in enumerate(summary['categories'][:5]):
            percent = (float(cat['amount']) / float(summary['total'])) * 100
            text += f"\n{cat['icon']} {cat['name']}: {cat['amount']:,.0f} ‚ÇΩ ({percent:.1f}%)"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫
        start_date = date(prev_year, prev_month, 1)
        import calendar
        last_day = calendar.monthrange(prev_year, prev_month)[1]
        end_date = date(prev_year, prev_month, last_day)
        
        cashback = await calculate_potential_cashback(user_id, start_date, end_date)
        text += f"\n\nüí≥ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫: {cashback:,.0f} ‚ÇΩ"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤–Ω–∏–∑—É –∫—É—Ä—Å–∏–≤–æ–º
    text += "\n\n<i>–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥?</i>"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_month=prev_month, current_year=prev_year)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å PDF –æ—Ç—á–µ—Ç–æ–º
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF –æ—Ç—á–µ—Ç", callback_data="pdf_generate_current")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", callback_data="expenses_prev_month")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(lambda c: c.data == "pdf_generate_current")
async def generate_pdf_report(callback: types.CallbackQuery, state: FSMContext, lang: str = 'ru'):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    month = data.get('current_month', date.today().month)
    year = data.get('current_year', date.today().year)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    progress_msg = await callback.message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
        from ..services.pdf_report_weasyprint import PDFReportService
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        pdf_service = PDFReportService()
        pdf_bytes = await pdf_service.generate_monthly_report(
            user_id=callback.from_user.id,
            year=year,
            month=month
        )
        
        if not pdf_bytes:
            await progress_msg.edit_text(
                "‚ùå <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞</b>\n\n"
                "–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ö–æ–¥–æ–≤."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        months = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å',
                  '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']
        filename = f"–û—Ç—á–µ—Ç_Coins_{months[month-1]}_{year}.pdf"
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        from aiogram.types import BufferedInputFile
        pdf_file = BufferedInputFile(pdf_bytes, filename=filename)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
        await callback.message.answer_document(
            document=pdf_file,
            caption=(
                f"üìä <b>–û—Ç—á–µ—Ç –∑–∞ {months[month-1]} {year}</b>\n\n"
                "–í –æ—Ç—á–µ—Ç–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è:\n"
                "‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
                "‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
                "‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ —Ç—Ä–∞—Ç –ø–æ –¥–Ω—è–º\n"
                "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–±–µ–∫–µ\n\n"
                "üí° <i>–°–æ–≤–µ—Ç: —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤</i>"
            )
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        await progress_msg.delete()
        
    except Exception as e:
        logger.error(f"Error generating report: {e}")
        await progress_msg.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
@router.message(EditExpenseForm.editing_amount)
async def process_edit_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Å—É–º–º—ã"""
    try:
        amount = await validate_amount(message.text)
    except ValueError as e:
        await message.answer(f"‚ùå {str(e)}")
        return
    
    data = await state.get_data()
    expense_id = data.get('editing_expense_id')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞—Ç—É
    from ..services.expense import update_expense
    success = await update_expense(message.from_user.id, expense_id, amount=amount)
    
    if success:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞—Ç—É
        await show_updated_expense(message, state, expense_id)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É")


@router.message(EditExpenseForm.editing_description)
async def process_edit_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    description = message.text.strip()
    if not description:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    # –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã
    description = description[0].upper() + description[1:] if description else description
    
    data = await state.get_data()
    expense_id = data.get('editing_expense_id')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞—Ç—É
    from ..services.expense import update_expense
    success = await update_expense(message.from_user.id, expense_id, description=description)
    
    if success:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞—Ç—É
        await show_updated_expense(message, state, expense_id)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.text & ~F.text.startswith('/'))
@rate_limit(max_calls=30, period=60)  # 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
async def handle_text_expense(message: types.Message, state: FSMContext, text: str = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç—Ä–∞—Ç–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    if current_state:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç—Ä–∞—Ç—É
        logger.info(f"Skipping expense handler due to active state: {current_state}")
        return
    
    user_id = message.from_user.id
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω —è–≤–Ω–æ, –±–µ—Ä–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if text is None:
        text = message.text
    
    # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å AI –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    from expenses.models import Profile
    try:
        profile = await Profile.objects.aget(telegram_id=user_id)
    except Profile.DoesNotExist:
        profile = None
    
    parsed = await parse_expense_message(text, user_id=user_id, profile=profile, use_ai=True)
    
    if not parsed:
        # –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç—Ä–∞—Ç—É - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        # –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ chat_router'–æ–º
        logger.info(f"Expense parser returned None for text: '{text}', passing to chat router")
        return  # –í aiogram 3.x –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = await get_or_create_category(user_id, parsed['category'])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç–µ
    amount = parsed['amount']
    currency = parsed.get('currency', 'RUB')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞—Ç—É –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç–µ
    expense = await add_expense(
        user_id=user_id,
        category_id=category.id,
        amount=amount,
        description=parsed['description'],
        currency=currency
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    confidence_text = ""
    if parsed.get('ai_enhanced') and parsed.get('confidence'):
        confidence_text = f"\nü§ñ AI —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {parsed['confidence']*100:.0f}%"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤–∞–ª—é—Ç—ã
    amount_text = format_currency(expense.amount, currency)
    
    await send_message_with_cleanup(message, state,
        f"‚úÖ –¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        f"üí∞ {amount_text}\n"
        f"{expense.description}\n"
        f"{category.icon} {category.name}"
        f"{confidence_text}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_expense_{expense.id}"),
                InlineKeyboardButton(text="üóë –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å", callback_data=f"delete_expense_{expense.id}")
            ]
        ])
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.voice)
@rate_limit(max_calls=10, period=60)  # 10 –≥–æ–ª–æ—Å–æ–≤—ã—Ö –≤ –º–∏–Ω—É—Ç—É
async def handle_voice_expense(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    from bot.services.subscription import check_subscription, subscription_required_message, get_subscription_button
    
    has_subscription = await check_subscription(message.from_user.id)
    if not has_subscription:
        await message.answer(
            subscription_required_message() + "\n\n‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π.",
            reply_markup=get_subscription_button(),
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ middleware
    user_language = getattr(message, 'user_language', 'ru')
    bot = message.bot
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å
        from bot.services.voice_recognition import process_voice_for_expense
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
        text = await process_voice_for_expense(message, bot, user_language)
        
    except ImportError:
        # –ï—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
        from bot.services.voice_processing import process_voice_expense
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = await process_voice_expense(message, bot, user_language)
    
    if not text:
        return
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    # –ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –≤ nutrition_bot
    await handle_text_expense(message, state, text=text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ (—á–µ–∫–æ–≤)
@router.message(F.photo)
@rate_limit(max_calls=10, period=60)  # 10 —Ñ–æ—Ç–æ –≤ –º–∏–Ω—É—Ç—É
async def handle_photo_expense(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–æ–≤"""
    await send_message_with_cleanup(message, state, "üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞—Ç—ã
@router.callback_query(lambda c: c.data.startswith("edit_expense_"))
async def edit_expense(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã"""
    expense_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞—Ç–µ
    from ..services.expense import get_last_expense
    from expenses.models import Expense
    
    try:
        expense = await Expense.objects.select_related('category').aget(
            id=expense_id,
            profile__telegram_id=user_id
        )
    except Expense.DoesNotExist:
        await callback.answer("‚ùå –¢—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç—Ä–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(editing_expense_id=expense_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üí∞ –°—É–º–º–∞: {expense.amount:.0f} ‚ÇΩ", callback_data="edit_field_amount")],
        [InlineKeyboardButton(text=f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {expense.description}", callback_data="edit_field_description")],
        [InlineKeyboardButton(text=f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {expense.category.name}", callback_data="edit_field_category")],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="edit_done")]
    ])
    
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    await state.set_state(EditExpenseForm.choosing_field)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç—ã
@router.callback_query(lambda c: c.data.startswith("delete_expense_"))
async def delete_expense(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç—ã"""
    expense_id = int(callback.data.split("_")[-1])
    from ..services.expense import delete_expense as delete_expense_service
    
    user_id = callback.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Ç—Ä–∞—Ç—É
    success = await delete_expense_service(user_id, expense_id)
    
    if success:
        await callback.message.delete()
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—É", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(lambda c: c.data == "edit_field_amount", EditExpenseForm.choosing_field)
async def edit_field_amount(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã"""
    await callback.message.edit_text(
        "üí∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É–º–º—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É:",
        parse_mode="HTML"
    )
    await state.set_state(EditExpenseForm.editing_amount)
    await callback.answer()


@router.callback_query(lambda c: c.data == "edit_field_description", EditExpenseForm.choosing_field)
async def edit_field_description(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
    await callback.message.edit_text(
        "üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
        parse_mode="HTML"
    )
    await state.set_state(EditExpenseForm.editing_description)
    await callback.answer()


@router.callback_query(lambda c: c.data == "edit_field_category", EditExpenseForm.choosing_field)
async def edit_field_category(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = callback.from_user.id
    from ..services.category import get_user_categories
    
    categories = await get_user_categories(user_id)
    
    keyboard_buttons = []
    for cat in categories:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"{cat.name}", 
                callback_data=f"expense_cat_{cat.id}"
            )
        ])
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")])
    
    await callback.message.edit_text(
        "üìÅ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons),
        parse_mode="HTML"
    )
    await state.set_state(EditExpenseForm.editing_category)
    await callback.answer()


@router.callback_query(lambda c: c.data == "edit_done", EditExpenseForm.choosing_field)
async def edit_done(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    expense_id = data.get('editing_expense_id')
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞—Ç—É
    from expenses.models import Expense
    try:
        expense = await Expense.objects.select_related('category').aget(
            id=expense_id,
            profile__telegram_id=callback.from_user.id
        )
        
        await callback.message.edit_text(
            f"‚úÖ <b>–¢—Ä–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {expense.amount:.0f} ‚ÇΩ\n"
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {expense.category.name}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {expense.description}",
            parse_mode="HTML"
        )
    except Expense.DoesNotExist:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç—ã")
    
    await state.clear()
    await callback.answer()






@router.callback_query(lambda c: c.data.startswith("expense_cat_"), EditExpenseForm.editing_category)
async def process_edit_category(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[-1])
    
    data = await state.get_data()
    expense_id = data.get('editing_expense_id')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞—Ç–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    from expenses.models import Expense
    try:
        expense = await Expense.objects.aget(id=expense_id)
        old_category_id = expense.category_id
        description = expense.description
    except Expense.DoesNotExist:
        await callback.answer("‚ùå –¢—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞—Ç—É
    from ..services.expense import update_expense
    success = await update_expense(callback.from_user.id, expense_id, category_id=category_id)
    
    if success:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        if old_category_id != category_id:
            from ..services.category import learn_from_category_change
            import asyncio
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ, –Ω–µ –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            asyncio.create_task(
                learn_from_category_change(
                    callback.from_user.id, 
                    expense_id, 
                    category_id, 
                    description
                )
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞—Ç—É
        await show_updated_expense_callback(callback, state, expense_id)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", show_alert=True)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def show_edit_menu(message: types.Message, state: FSMContext, expense_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    from expenses.models import Expense
    
    try:
        expense = await Expense.objects.select_related('category').aget(
            id=expense_id,
            profile__telegram_id=message.from_user.id
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üí∞ –°—É–º–º–∞: {expense.amount:.0f} ‚ÇΩ", callback_data="edit_field_amount")],
            [InlineKeyboardButton(text=f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {expense.description}", callback_data="edit_field_description")],
            [InlineKeyboardButton(text=f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {expense.category.name}", callback_data="edit_field_category")],
            [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="edit_done")]
        ])
        
        await send_message_with_cleanup(message, state,
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.set_state(EditExpenseForm.choosing_field)
    except Expense.DoesNotExist:
        await message.answer("‚ùå –¢—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


async def show_edit_menu_callback(callback: types.CallbackQuery, state: FSMContext, expense_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è callback"""
    from expenses.models import Expense
    
    try:
        expense = await Expense.objects.select_related('category').aget(
            id=expense_id,
            profile__telegram_id=callback.from_user.id
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üí∞ –°—É–º–º–∞: {expense.amount:.0f} ‚ÇΩ", callback_data="edit_field_amount")],
            [InlineKeyboardButton(text=f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {expense.description}", callback_data="edit_field_description")],
            [InlineKeyboardButton(text=f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {expense.category.name}", callback_data="edit_field_category")],
            [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="edit_done")]
        ])
        
        await callback.message.edit_text(
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.set_state(EditExpenseForm.choosing_field)
        await callback.answer()
    except Expense.DoesNotExist:
        await callback.answer("‚ùå –¢—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)


async def show_updated_expense(message: types.Message, state: FSMContext, expense_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞—Ç—É"""
    from expenses.models import Expense
    
    try:
        expense = await Expense.objects.select_related('category').aget(
            id=expense_id,
            profile__telegram_id=message.from_user.id
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        currency = expense.currency or 'RUB'
        if currency == 'RUB':
            amount_text = f"{expense.amount:.0f} ‚ÇΩ"
        else:
            amount_text = f"{expense.amount:.2f} {currency}"
        
        await send_message_with_cleanup(message, state,
            f"‚úÖ –¢—Ä–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"üí∞ –°—É–º–º–∞: {amount_text}\n"
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {expense.category.icon} {expense.category.name}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {expense.description}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_expense_{expense.id}"),
                    InlineKeyboardButton(text="üóë –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å", callback_data=f"delete_expense_{expense.id}")
                ]
            ])
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    except Expense.DoesNotExist:
        await message.answer("‚ùå –¢—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()


async def show_updated_expense_callback(callback: types.CallbackQuery, state: FSMContext, expense_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞—Ç—É –¥–ª—è callback"""
    from expenses.models import Expense
    
    try:
        expense = await Expense.objects.select_related('category').aget(
            id=expense_id,
            profile__telegram_id=callback.from_user.id
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        currency = expense.currency or 'RUB'
        if currency == 'RUB':
            amount_text = f"{expense.amount:.0f} ‚ÇΩ"
        else:
            amount_text = f"{expense.amount:.2f} {currency}"
        
        await callback.message.edit_text(
            f"‚úÖ –¢—Ä–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"üí∞ –°—É–º–º–∞: {amount_text}\n"
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {expense.category.icon} {expense.category.name}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {expense.description}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_expense_{expense.id}"),
                    InlineKeyboardButton(text="üóë –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å", callback_data=f"delete_expense_{expense.id}")
                ]
            ])
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        await callback.answer()
    except Expense.DoesNotExist:
        await callback.answer("‚ùå –¢—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.clear()