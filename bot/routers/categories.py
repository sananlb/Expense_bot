"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
"""
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.exceptions import TelegramBadRequest, TelegramNotFound
import asyncio
from typing import List

from ..services.category import (
    get_user_categories, create_category, update_category, 
    delete_category, get_icon_for_category, get_category_by_id,
    add_category_keyword, remove_category_keyword, get_category_keywords
)
from ..utils.message_utils import send_message_with_cleanup
from ..utils import get_text, get_user_language, translate_category_name
from datetime import date

router = Router(name="categories")


class CategoryForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_icon = State()
    waiting_for_custom_icon = State()
    waiting_for_edit_choice = State()
    waiting_for_new_name = State()
    waiting_for_new_icon = State()


class IncomeCategoryForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_icon = State()
    waiting_for_custom_icon = State()
    waiting_for_edit_choice = State()
    waiting_for_new_name = State()
    waiting_for_new_icon = State()
    waiting_for_delete_choice = State()


class CategoryStates(StatesGroup):
    editing_name = State()


@router.message(Command("categories"))
async def cmd_categories(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /categories - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –ù–ï –º–µ–Ω—é –∫–µ—à–±–µ–∫–∞
    data = await state.get_data()
    old_menu_id = data.get('last_menu_message_id')
    cashback_menu_ids = data.get('cashback_menu_ids', [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –º–µ–Ω—é –∫–µ—à–±–µ–∫–∞
    if old_menu_id and old_menu_id not in cashback_menu_ids:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=old_menu_id)
            await state.update_data(last_menu_message_id=None)
        except (TelegramBadRequest, TelegramNotFound):
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç  
    await show_expense_categories_menu(message, state)


async def show_categories_menu(message: types.Message | types.CallbackQuery, state: FSMContext = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞"""
    import logging
    logger = logging.getLogger(__name__)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if isinstance(message, types.CallbackQuery):
        user_id = message.from_user.id
    else:
        user_id = message.from_user.id
    
    logger.info(f"show_categories_menu called for user_id: {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(user_id)
    
    # –ù–æ–≤–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    text = "üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π:"
    
    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç", callback_data="expense_categories_menu")],
        [InlineKeyboardButton(text="üí∞ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤", callback_data="income_categories_menu")],
        [InlineKeyboardButton(text=get_text('close', lang), callback_data="close")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º send_message_with_cleanup –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é
    if state:
        sent_msg = await send_message_with_cleanup(message, state, text, reply_markup=keyboard, parse_mode="HTML")
    else:
        # –ï—Å–ª–∏ state –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        if isinstance(message, types.CallbackQuery):
            sent_msg = await message.bot.send_message(
                chat_id=message.from_user.id,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            sent_msg = await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–µ–Ω—é –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω state
    if state:
        await state.update_data(last_menu_message_id=sent_msg.message_id)


async def show_expense_categories_menu(message: types.Message | types.CallbackQuery, state: FSMContext = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç"""
    import logging
    logger = logging.getLogger(__name__)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if isinstance(message, types.CallbackQuery):
        user_id = message.from_user.id
    else:
        user_id = message.from_user.id
    
    logger.info(f"show_expense_categories_menu called for user_id: {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    from bot.services.subscription import check_subscription
    has_subscription = await check_subscription(user_id)
        
    categories = await get_user_categories(user_id)
    logger.info(f"Found {len(categories)} expense categories for user {user_id}")
    
    text = "üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç</b>\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if categories:
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ get_user_categories
        for i, cat in enumerate(categories):
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            translated_name = translate_category_name(cat.name, lang)
            text += f"‚Ä¢ {translated_name}\n"
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            if i < len(categories) - 1:
                text += "\n"
    else:
        text += get_text('no_categories_yet', lang)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
    if has_subscription:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=get_text('add_button', lang), callback_data="add_category")],
            [InlineKeyboardButton(text=get_text('edit_button', lang), callback_data="edit_categories")],
            [InlineKeyboardButton(text=get_text('delete_button', lang), callback_data="delete_categories")],
            [InlineKeyboardButton(text="üí∞ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤", callback_data="income_categories_menu")],
            [InlineKeyboardButton(text=get_text('close', lang), callback_data="close")]
        ])
    else:
        # –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å
        text += "\n\n" + get_text('categories_subscription_note', lang)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=get_text('get_subscription', lang), callback_data="menu_subscription")],
            [InlineKeyboardButton(text="üí∞ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤", callback_data="income_categories_menu")],
            [InlineKeyboardButton(text=get_text('close', lang), callback_data="close")]
        ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if state:
        sent_msg = await send_message_with_cleanup(message, state, text, reply_markup=keyboard, parse_mode="HTML")
    else:
        # –ï—Å–ª–∏ state –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        if isinstance(message, types.CallbackQuery):
            sent_msg = await message.bot.send_message(
                chat_id=message.from_user.id,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            sent_msg = await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–µ–Ω—é –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω state
    if state:
        await state.update_data(last_menu_message_id=sent_msg.message_id)


async def show_income_categories_menu(message: types.Message | types.CallbackQuery, state: FSMContext = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤"""
    import logging
    logger = logging.getLogger(__name__)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if isinstance(message, types.CallbackQuery):
        user_id = message.from_user.id
    else:
        user_id = message.from_user.id
    
    logger.info(f"show_income_categories_menu called for user_id: {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    from bot.services.subscription import check_subscription
    has_subscription = await check_subscription(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
    from bot.services.income import get_user_income_categories
    income_categories = await get_user_income_categories(user_id)
    logger.info(f"Found {len(income_categories)} income categories for user {user_id}")
    
    text = "üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤</b>\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
    if income_categories:
        for i, cat in enumerate(income_categories):
            translated_name = translate_category_name(cat.name, lang)
            text += f"‚Ä¢ {translated_name}\n"
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            if i < len(income_categories) - 1:
                text += "\n"
    else:
        text += get_text('no_income_categories_yet', lang) if lang == 'en' else "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤."
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
    if has_subscription:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=get_text('add_button', lang), callback_data="add_income_category")],
            [InlineKeyboardButton(text=get_text('edit_button', lang), callback_data="edit_income_categories")],
            [InlineKeyboardButton(text=get_text('delete_button', lang), callback_data="delete_income_categories")],
            [InlineKeyboardButton(text="üí∏ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç", callback_data="expense_categories_menu")],
            [InlineKeyboardButton(text=get_text('close', lang), callback_data="close")]
        ])
    else:
        # –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å
        text += "\n\n" + (get_text('income_categories_subscription_note', lang) if lang == 'en' else "üíé –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–æ—Ö–æ–¥–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=get_text('get_subscription', lang), callback_data="menu_subscription")],
            [InlineKeyboardButton(text="üí∏ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç", callback_data="expense_categories_menu")],
            [InlineKeyboardButton(text=get_text('close', lang), callback_data="close")]
        ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if state:
        sent_msg = await send_message_with_cleanup(message, state, text, reply_markup=keyboard, parse_mode="HTML")
    else:
        # –ï—Å–ª–∏ state –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        if isinstance(message, types.CallbackQuery):
            sent_msg = await message.bot.send_message(
                chat_id=message.from_user.id,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            sent_msg = await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–µ–Ω—é –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω state
    if state:
        await state.update_data(last_menu_message_id=sent_msg.message_id)


@router.callback_query(lambda c: c.data == "categories_menu")
async def callback_categories_menu(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ callback"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞—Ç—ã
    current_state = await state.get_state()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç—Ä–∞—Ç—É
    if current_state and not current_state.startswith("EditExpenseForm"):
        await state.clear()
    
    await callback.message.delete()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç –≤–º–µ—Å—Ç–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    await show_expense_categories_menu(callback, state)
    await callback.answer()


@router.callback_query(lambda c: c.data == "expense_categories_menu")
async def callback_expense_categories_menu(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç"""
    # –£–±–∏—Ä–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ - send_message_with_cleanup —Å–∞–º–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    await show_expense_categories_menu(callback, state)
    await callback.answer()


@router.callback_query(lambda c: c.data == "income_categories_menu")
async def callback_income_categories_menu(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤"""
    # –£–±–∏—Ä–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ - send_message_with_cleanup —Å–∞–º–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    await show_income_categories_menu(callback, state)
    await callback.answer()


@router.callback_query(lambda c: c.data == "add_category")
async def add_category_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    lang = await get_user_language(callback.from_user.id)
    await callback.message.edit_text(
        get_text('adding_category', lang),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=get_text('cancel', lang), callback_data="categories_menu")]
        ])
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(last_menu_message_id=callback.message.message_id)
    await state.set_state(CategoryForm.waiting_for_name)
    await callback.answer()


@router.message(CategoryForm.waiting_for_name)
async def process_category_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    name = message.text.strip()
    
    if len(name) > 50:
        await send_message_with_cleanup(message, state, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    import re
    emoji_pattern = r'^[\U0001F000-\U0001F9FF\U00002600-\U000027BF\U0001F300-\U0001F64F\U0001F680-\U0001F6FF]'
    has_emoji = bool(re.match(emoji_pattern, name))
    
    if has_emoji:
        # –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ —É–∂–µ –µ—Å—Ç—å, —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        user_id = message.from_user.id
        try:
            category = await create_category(user_id, name, '')
            await state.clear()
            # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç
            await show_expense_categories_menu(message, state)
        except ValueError as e:
            await send_message_with_cleanup(message, state, f"‚ùå {str(e)}")
            await state.clear()
    else:
        # –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –Ω–µ—Ç, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–∫–æ–Ω–æ–∫
        await state.update_data(name=name)
        
        icons = [
            ['üí∞', 'üíµ', 'üí≥', 'üí∏', 'üè¶'],
            ['üõí', 'üçΩÔ∏è', '‚òï', 'üçï', 'üë™'],
            ['üöó', 'üöï', 'üöå', '‚úàÔ∏è', '‚õΩ'],
            ['üè†', 'üí°', 'üîß', 'üõ†Ô∏è', 'üè°'],
            ['üëï', 'üëü', 'üëú', 'üíÑ', 'üíç'],
            ['üíä', 'üè•', 'üíâ', 'ü©∫', 'üèãÔ∏è'],
            ['üì±', 'üíª', 'üéÆ', 'üì∑', 'üéß'],
            ['üé≠', 'üé¨', 'üé™', 'üé®', 'üéØ'],
            ['üìö', '‚úèÔ∏è', 'üéì', 'üìñ', 'üñäÔ∏è'],
            ['üéÅ', 'üéâ', 'üéÇ', 'üíê', 'üéà']
        ]
        
        keyboard_buttons = []
        for row in icons:
            buttons_row = [InlineKeyboardButton(text=icon, callback_data=f"set_icon_{icon}") for icon in row]
            keyboard_buttons.append(buttons_row)
        
        keyboard_buttons.append([InlineKeyboardButton(text="‚û°Ô∏è –ë–µ–∑ –∏–∫–æ–Ω–∫–∏", callback_data="no_icon")])
        keyboard_buttons.append([InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π —ç–º–æ–¥–∑–∏", callback_data="custom_icon")])
        keyboard_buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_category_creation")])
        
        await send_message_with_cleanup(
            message, state,
            f"üé® –í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{name}¬ª:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
        await state.set_state(CategoryForm.waiting_for_icon)




@router.callback_query(lambda c: c.data == "custom_icon")
async def custom_icon_start(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–º–æ–¥–∑–∏"""
    await callback.message.edit_text(
        "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="categories_menu")]
        ])
    )
    await state.set_state(CategoryForm.waiting_for_custom_icon)
    await callback.answer()


@router.message(CategoryForm.waiting_for_custom_icon)
async def process_custom_icon(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–º–æ–¥–∑–∏"""
    import re
    
    custom_icon = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏
    emoji_pattern = r'^[\U0001F000-\U0001F9FF\U00002600-\U000027BF\U0001F300-\U0001F64F\U0001F680-\U0001F6FF]+$'
    if not re.match(emoji_pattern, custom_icon) or len(custom_icon) > 2:
        await send_message_with_cleanup(message, state, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏.")
        return
    
    data = await state.get_data()
    name = data.get('name')
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ –º—ã –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    editing_category_id = data.get('editing_category_id')
    if editing_category_id:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        full_name = f"{custom_icon} {name}" if custom_icon else name
        category = await update_category(user_id, editing_category_id, name=full_name)
    else:
        category = await create_category(user_id, name, custom_icon)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except (TelegramBadRequest, TelegramNotFound):
        pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç
    await show_expense_categories_menu(message, state)


@router.callback_query(lambda c: c.data == "no_icon")
async def no_icon_selected(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–µ–∑ –∏–∫–æ–Ω–∫–∏"""
    data = await state.get_data()
    name = data.get('name')
    
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ –º—ã –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    editing_category_id = data.get('editing_category_id')
    if editing_category_id:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
        # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–±–µ–∑ –∏–∫–æ–Ω–∫–∏" name —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        category = await update_category(user_id, editing_category_id, name=name)
    else:
        category = await create_category(user_id, name, '')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∏–∫–æ–Ω–æ–∫
    try:
        await callback.message.delete()
    except Exception:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        pass
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç (–Ω–µ –æ–±—â–µ–µ –º–µ–Ω—é)
    await show_expense_categories_menu(callback, state)
    
    await callback.answer()




@router.callback_query(lambda c: c.data.startswith("set_icon_"))
async def set_category_icon(callback: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–∫–æ–Ω–∫—É"""
    icon = callback.data.replace("set_icon_", "")
    data = await state.get_data()
    name = data.get('name')
    
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ –º—ã –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    editing_category_id = data.get('editing_category_id')
    if editing_category_id:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        full_name = f"{icon} {name}" if icon else name
        category = await update_category(user_id, editing_category_id, name=full_name)
    else:
        category = await create_category(user_id, name, icon)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∏–∫–æ–Ω–æ–∫
    try:
        await callback.message.delete()
    except Exception:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        pass
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç (–Ω–µ –æ–±—â–µ–µ –º–µ–Ω—é)
    await show_expense_categories_menu(callback, state)
    
    await callback.answer()


@router.callback_query(lambda c: c.data == "edit_categories")
async def edit_categories_list(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.clear()
    
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    categories = await get_user_categories(user_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –∏—Å–∫–ª—é—á–∞–µ–º "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
    editable_categories = [cat for cat in categories if '–ø—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã' not in cat.name.lower()]
    
    if not editable_categories:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
        return
    
    keyboard_buttons = []
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(editable_categories), 2):
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        translated_name = translate_category_name(editable_categories[i].name, lang)
        row = [InlineKeyboardButton(
            text=translated_name, 
            callback_data=f"edit_cat_{editable_categories[i].id}"
        )]
        if i + 1 < len(editable_categories):
            translated_name_2 = translate_category_name(editable_categories[i + 1].name, lang)
            row.append(InlineKeyboardButton(
                text=translated_name_2, 
                callback_data=f"edit_cat_{editable_categories[i + 1].id}"
            ))
        keyboard_buttons.append(row)
    keyboard_buttons.append([InlineKeyboardButton(text=get_text('back_arrow', lang), callback_data="expense_categories_menu")])
    
    await callback.message.edit_text(
        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(last_menu_message_id=callback.message.message_id)
    await callback.answer()


@router.callback_query(lambda c: c.data == "delete_categories")
async def delete_categories_list(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    categories = await get_user_categories(user_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –∏—Å–∫–ª—é—á–∞–µ–º "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
    deletable_categories = [cat for cat in categories if '–ø—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã' not in cat.name.lower()]
    
    if not deletable_categories:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        return
    
    keyboard_buttons = []
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(deletable_categories), 2):
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        translated_name = translate_category_name(deletable_categories[i].name, lang)
        row = [InlineKeyboardButton(
            text=translated_name, 
            callback_data=f"del_cat_{deletable_categories[i].id}"
        )]
        if i + 1 < len(deletable_categories):
            translated_name_2 = translate_category_name(deletable_categories[i + 1].name, lang)
            row.append(InlineKeyboardButton(
                text=translated_name_2, 
                callback_data=f"del_cat_{deletable_categories[i + 1].id}"
            ))
        keyboard_buttons.append(row)
    keyboard_buttons.append([InlineKeyboardButton(text=get_text('back_arrow', lang), callback_data="expense_categories_menu")])
    
    await callback.message.edit_text(
        "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(last_menu_message_id=callback.message.message_id)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("del_cat_"))
async def delete_category_direct(callback: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    cat_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    category = await get_category_by_id(user_id, cat_id)
    
    if category:
        success = await delete_category(user_id, cat_id)
        
        if success:
            await callback.answer()
            # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç
            await show_expense_categories_menu(callback, state)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", show_alert=True)
    else:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ skip_edit_name —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


@router.callback_query(lambda c: c.data.startswith("edit_cat_"))
async def edit_category(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    import logging
    logger = logging.getLogger(__name__)
    logger.info(f"edit_category called with data: {callback.data}")
    
    cat_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category = await get_category_by_id(user_id, cat_id)
    
    if category:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(editing_category_id=cat_id, old_category_name=category.name)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        await callback.message.edit_text(
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category.name}¬ª\n\n"
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_cat_name_{cat_id}")],
                [InlineKeyboardButton(text="üé® –ò–∫–æ–Ω–∫—É", callback_data=f"edit_cat_icon_{cat_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_categories")]
            ])
        )
    else:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("edit_cat_name_"))
async def edit_category_name_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    cat_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category = await get_category_by_id(user_id, cat_id)
    
    if category:
        await state.update_data(editing_category_id=cat_id)
        await state.set_state(CategoryStates.editing_name)
        
        await callback.message.edit_text(
            f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category.name}¬ª:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_cat_{cat_id}")]
            ])
        )
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("edit_cat_icon_"))
async def edit_category_icon_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    import re
    
    cat_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category = await get_category_by_id(user_id, cat_id)
    
    if category:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —ç–º–æ–¥–∑–∏
        emoji_pattern = r'^[\U0001F000-\U0001F9FF\U00002600-\U000027BF\U0001F300-\U0001F64F\U0001F680-\U0001F6FF]+\s*'
        name_without_emoji = re.sub(emoji_pattern, '', category.name)
        
        await state.update_data(
            editing_category_id=cat_id,
            name=name_without_emoji
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–∫–æ–Ω–æ–∫
        icons = [
            ['üí∞', 'üíµ', 'üí≥', 'üí∏', 'üè¶'],
            ['üõí', 'üçΩÔ∏è', '‚òï', 'üçï', 'üë™'],
            ['üöó', 'üöï', 'üöå', '‚úàÔ∏è', '‚õΩ'],
            ['üè†', 'üí°', 'üîß', 'üõ†Ô∏è', 'üè°'],
            ['üëï', 'üëü', 'üëú', 'üíÑ', 'üíç'],
            ['üíä', 'üè•', 'üíâ', 'ü©∫', 'üèãÔ∏è'],
            ['üì±', 'üíª', 'üéÆ', 'üì∑', 'üéß'],
            ['üé≠', 'üé¨', 'üé™', 'üé®', 'üéØ'],
            ['üìö', '‚úèÔ∏è', 'üéì', 'üìñ', 'üñäÔ∏è'],
            ['üéÅ', 'üéâ', 'üéÇ', 'üíê', 'üéà']
        ]
        
        keyboard_buttons = []
        for row in icons:
            buttons_row = [InlineKeyboardButton(text=icon, callback_data=f"set_icon_{icon}") for icon in row]
            keyboard_buttons.append(buttons_row)
        
        keyboard_buttons.append([InlineKeyboardButton(text="‚û°Ô∏è –ë–µ–∑ –∏–∫–æ–Ω–∫–∏", callback_data="no_icon")])
        keyboard_buttons.append([InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π —ç–º–æ–¥–∑–∏", callback_data="custom_icon")])
        keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_cat_{cat_id}")])
        
        await callback.message.edit_text(
            f"üé® –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{name_without_emoji}¬ª:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
        await state.set_state(CategoryForm.waiting_for_icon)
    await callback.answer()


@router.message(CategoryStates.editing_name)
async def process_edit_category_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    import logging
    logger = logging.getLogger(__name__)
    logger.info(f"process_edit_category_name called for user {message.from_user.id}")
    
    new_name = message.text.strip()
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    cat_id = data.get('editing_category_id')
    old_name = data.get('old_category_name')
    
    if not cat_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏
    current_category = await get_category_by_id(user_id, cat_id)
    if not current_category:
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—É—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    import re
    emoji_pattern = r'^([\U0001F000-\U0001F9FF\U00002600-\U000027BF\U0001F300-\U0001F64F\U0001F680-\U0001F6FF]+)\s*'
    current_emoji_match = re.match(emoji_pattern, current_category.name)
    current_emoji = current_emoji_match.group(1) if current_emoji_match else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–º–æ–¥–∑–∏ –≤ –Ω–æ–≤–æ–º –Ω–∞–∑–≤–∞–Ω–∏–∏
    new_emoji_match = re.match(emoji_pattern, new_name)
    has_new_emoji = bool(new_emoji_match)
    
    if has_new_emoji:
        # –ï—Å–ª–∏ –≤ –Ω–æ–≤–æ–º –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å —ç–º–æ–¥–∑–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
        final_name = new_name.strip()
    elif current_emoji:
        # –ï—Å–ª–∏ –≤ –Ω–æ–≤–æ–º –Ω–∞–∑–≤–∞–Ω–∏–∏ –Ω–µ—Ç —ç–º–æ–¥–∑–∏, –Ω–æ –µ—Å—Ç—å –≤ —Å—Ç–∞—Ä–æ–º - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∏–∫–æ–Ω–∫—É
        final_name = f"{current_emoji} {new_name.strip()}"
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —ç–º–æ–¥–∑–∏ –Ω–∏ –≤ —Å—Ç–∞—Ä–æ–º, –Ω–∏ –≤ –Ω–æ–≤–æ–º - –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∫–æ–Ω–∫–∏
        final_name = new_name.strip()
    
    # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    new_category = await update_category(user_id, cat_id, name=final_name)
    
    if new_category:
        logger.info(f"Category {cat_id} updated successfully with name: {final_name}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except (TelegramBadRequest, TelegramNotFound):
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç (–Ω–µ –æ–±—â–µ–µ –º–µ–Ω—é)
        await show_expense_categories_menu(message, state)
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="categories_menu")]
            ])
        )


@router.callback_query(lambda c: c.data == "cancel_category")
async def cancel_category(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π"""
    await callback.answer()
    await callback.message.delete()
    # –ü–µ—Ä–µ–¥–∞–µ–º callback –≤–º–µ—Å—Ç–æ callback.message –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    await show_expense_categories_menu(callback, state)


@router.callback_query(lambda c: c.data == "cancel_category_creation")
async def cancel_category_creation(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.clear()
    # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - send_message_with_cleanup –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –µ–≥–æ
    await show_expense_categories_menu(callback, state)
    await callback.answer()


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ê–¢–ï–ì–û–†–ò–ô –î–û–•–û–î–û–í ==========

@router.callback_query(lambda c: c.data == "add_income_category")
async def add_income_category_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    from bot.services.subscription import check_subscription
    if not await check_subscription(callback.from_user.id):
        lang = await get_user_language(callback.from_user.id)
        await callback.answer(get_text('subscription_required', lang), show_alert=True)
        return
    
    lang = await get_user_language(callback.from_user.id)
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="income_categories_menu")]
        ])
    )
    await state.update_data(last_menu_message_id=callback.message.message_id)
    await state.set_state(IncomeCategoryForm.waiting_for_name)
    await callback.answer()


@router.message(IncomeCategoryForm.waiting_for_name)
async def process_income_category_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤"""
    name = message.text.strip()
    
    if len(name) > 50:
        await send_message_with_cleanup(message, state, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    import re
    emoji_pattern = r'^[\U0001F000-\U0001F9FF\U00002600-\U000027BF\U0001F300-\U0001F64F\U0001F680-\U0001F6FF]'
    has_emoji = bool(re.match(emoji_pattern, name))
    
    if has_emoji:
        # –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ —É–∂–µ –µ—Å—Ç—å, —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        user_id = message.from_user.id
        try:
            from bot.services.income import create_income_category
            category = await create_income_category(user_id, name, '')
            await state.clear()
            await show_income_categories_menu(message, state)
        except ValueError as e:
            await send_message_with_cleanup(message, state, f"‚ùå {str(e)}")
            await state.clear()
    else:
        # –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–∫–æ–Ω–æ–∫
        await state.update_data(income_category_name=name)
        
        # –ò–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤
        icons = [
            ['üí∞', 'üíµ', 'üí∏', 'üí¥', 'üí∂'],
            ['üí∑', 'üí≥', 'üè¶', 'üíπ', 'üìà'],
            ['üíº', 'üíª', 'üè¢', 'üè≠', 'üëî'],
            ['üéØ', 'üéÅ', 'üéâ', 'üèÜ', 'üíé'],
            ['üöÄ', '‚ú®', '‚≠ê', 'üåü', 'üí´'],
            ['üì±', 'üéÆ', 'üé¨', 'üé≠', 'üé®'],
            ['üè†', 'üöó', '‚úàÔ∏è', 'üõçÔ∏è', 'üçî'],
            ['üìö', 'üéì', 'üè•', '‚öΩ', 'üé∏']
        ]
        
        keyboard_buttons = []
        for row in icons:
            buttons_row = [InlineKeyboardButton(text=icon, callback_data=f"set_income_icon_{icon}") for icon in row]
            keyboard_buttons.append(buttons_row)
        
        keyboard_buttons.append([InlineKeyboardButton(text="‚û°Ô∏è –ë–µ–∑ –∏–∫–æ–Ω–∫–∏", callback_data="no_income_icon")])
        keyboard_buttons.append([InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π —ç–º–æ–¥–∑–∏", callback_data="custom_income_icon")])
        keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_income_category_creation")])
        
        await send_message_with_cleanup(
            message, state,
            f"üé® –í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ ¬´{name}¬ª:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
        await state.set_state(IncomeCategoryForm.waiting_for_icon)


@router.callback_query(lambda c: c.data.startswith("set_income_icon_"), IncomeCategoryForm.waiting_for_icon)
async def set_income_category_icon(callback: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤"""
    icon = callback.data.replace("set_income_icon_", "")
    data = await state.get_data()
    name = data.get('income_category_name')
    editing_category_id = data.get('editing_income_category_id')
    
    if not name:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        await state.clear()
        return
    
    try:
        if editing_category_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            from bot.services.income import update_income_category
            full_name = f"{icon} {name}" if icon else name
            category = await update_income_category(callback.from_user.id, editing_category_id, new_name=full_name)
            message = "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            from bot.services.income import create_income_category
            category = await create_income_category(callback.from_user.id, name, icon)
            message = "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
        
        await state.clear()
        # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - send_message_with_cleanup –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –µ–≥–æ
        await show_income_categories_menu(callback, state)
        await callback.answer(message)
    except ValueError as e:
        await callback.answer(f"‚ùå {str(e)}", show_alert=True)
        await state.clear()


@router.callback_query(lambda c: c.data == "no_income_icon", IncomeCategoryForm.waiting_for_icon)
async def no_income_icon(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –±–µ–∑ –∏–∫–æ–Ω–∫–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π"""
    data = await state.get_data()
    name = data.get('income_category_name')
    editing_category_id = data.get('editing_income_category_id')
    
    if not name:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        await state.clear()
        return
    
    try:
        if editing_category_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            from bot.services.income import update_income_category
            category = await update_income_category(callback.from_user.id, editing_category_id, new_name=name)
            message = "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            from bot.services.income import create_income_category
            category = await create_income_category(callback.from_user.id, name, '')
            message = "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
        
        await state.clear()
        # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - send_message_with_cleanup –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –µ–≥–æ
        await show_income_categories_menu(callback, state)
        await callback.answer(message)
    except ValueError as e:
        await callback.answer(f"‚ùå {str(e)}", show_alert=True)
        await state.clear()


@router.callback_query(lambda c: c.data == "custom_income_icon")
async def custom_income_icon_start(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤"""
    lang = await get_user_language(callback.from_user.id)
    await callback.message.edit_text(
        "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="income_categories_menu")]
        ])
    )
    await state.set_state(IncomeCategoryForm.waiting_for_custom_icon)
    await callback.answer()


@router.message(IncomeCategoryForm.waiting_for_custom_icon)
async def process_custom_income_icon(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤"""
    import re
    
    custom_icon = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏
    emoji_pattern = r'^[\U0001F000-\U0001F9FF\U00002600-\U000027BF\U0001F300-\U0001F64F\U0001F680-\U0001F6FF]+$'
    if not re.match(emoji_pattern, custom_icon) or len(custom_icon) > 2:
        await send_message_with_cleanup(message, state, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏")
        return
    
    data = await state.get_data()
    name = data.get('income_category_name')
    
    if not name:
        await send_message_with_cleanup(message, state, "‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await state.clear()
        return
    
    try:
        from bot.services.income import create_income_category
        category = await create_income_category(message.from_user.id, name, custom_icon)
        await state.clear()
        await show_income_categories_menu(message, state)
    except ValueError as e:
        await send_message_with_cleanup(message, state, f"‚ùå {str(e)}")
        await state.clear()


@router.callback_query(lambda c: c.data == "delete_income_categories")
async def delete_income_categories_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    from bot.services.subscription import check_subscription
    if not await check_subscription(callback.from_user.id):
        lang = await get_user_language(callback.from_user.id)
        await callback.answer(get_text('subscription_required', lang), show_alert=True)
        return
    
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
    from bot.services.income import get_user_income_categories
    categories = await get_user_income_categories(user_id)
    
    if not categories:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard_buttons = []
    for cat in categories:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=cat.name,
                callback_data=f"del_income_cat_{cat.id}"
            )
        ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text=get_text('back_arrow', lang), callback_data="income_categories_menu")
    ])
    
    await callback.message.edit_text(
        "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    await state.set_state(IncomeCategoryForm.waiting_for_delete_choice)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("del_income_cat_"))
async def delete_income_category(callback: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤"""
    category_id = int(callback.data.replace("del_income_cat_", ""))
    user_id = callback.from_user.id
    
    try:
        from bot.services.income import delete_income_category
        await delete_income_category(user_id, category_id)
        await state.clear()
        # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        # send_message_with_cleanup –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await show_income_categories_menu(callback, state)
        await callback.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤ —É–¥–∞–ª–µ–Ω–∞")
    except ValueError as e:
        await callback.answer(f"‚ùå {str(e)}", show_alert=True)


@router.callback_query(lambda c: c.data == "edit_income_categories")
async def edit_income_categories_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    from bot.services.subscription import check_subscription
    if not await check_subscription(callback.from_user.id):
        lang = await get_user_language(callback.from_user.id)
        await callback.answer(get_text('subscription_required', lang), show_alert=True)
        return
    
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
    from bot.services.income import get_user_income_categories
    categories = await get_user_income_categories(user_id)
    
    if not categories:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard_buttons = []
    for cat in categories:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=cat.name,
                callback_data=f"edit_income_cat_{cat.id}"
            )
        ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text=get_text('back_arrow', lang), callback_data="income_categories_menu")
    ])
    
    await callback.message.edit_text(
        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    await state.set_state(IncomeCategoryForm.waiting_for_edit_choice)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("edit_income_cat_"))
async def edit_income_category(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤"""
    category_id = int(callback.data.replace("edit_income_cat_", ""))
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    from bot.services.income import get_user_income_categories
    categories = await get_user_income_categories(user_id)
    category = next((cat for cat in categories if cat.id == category_id), None)
    
    if category:
        await state.update_data(editing_income_category_id=category_id, old_income_category_name=category.name)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        await callback.message.edit_text(
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ ¬´{category.name}¬ª\n\n"
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_income_name_{category_id}")],
                [InlineKeyboardButton(text="üé® –ò–∫–æ–Ω–∫—É", callback_data=f"edit_income_icon_{category_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_income_categories")]
            ])
        )
    else:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("edit_income_name_"))
async def edit_income_category_name_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤"""
    category_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    from bot.services.income import get_user_income_categories
    categories = await get_user_income_categories(user_id)
    category = next((cat for cat in categories if cat.id == category_id), None)
    
    if category:
        await state.update_data(editing_income_category_id=category_id)
        await state.set_state(IncomeCategoryForm.waiting_for_new_name)
        
        await callback.message.edit_text(
            f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ ¬´{category.name}¬ª:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_income_cat_{category_id}")]
            ])
        )
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("edit_income_icon_"))
async def edit_income_category_icon_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤"""
    import re
    
    category_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    from bot.services.income import get_user_income_categories
    categories = await get_user_income_categories(user_id)
    category = next((cat for cat in categories if cat.id == category_id), None)
    
    if category:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —ç–º–æ–¥–∑–∏
        emoji_pattern = r'^[\U0001F000-\U0001F9FF\U00002600-\U000027BF\U0001F300-\U0001F64F\U0001F680-\U0001F6FF]+\s*'
        name_without_emoji = re.sub(emoji_pattern, '', category.name)
        
        await state.update_data(
            editing_income_category_id=category_id,
            income_category_name=name_without_emoji
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–∫–æ–Ω–æ–∫ –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤
        icons = [
            ['üí∞', 'üíµ', 'üí∏', 'üí¥', 'üí∂'],
            ['üí∑', 'üí≥', 'üè¶', 'üíπ', 'üìà'],
            ['üíº', 'üíª', 'üè¢', 'üè≠', 'üëî'],
            ['üéØ', 'üéÅ', 'üéâ', 'üèÜ', 'üíé'],
            ['üöÄ', '‚ú®', '‚≠ê', 'üåü', 'üí´'],
            ['üì±', 'üéÆ', 'üé¨', 'üé≠', 'üé®'],
            ['üè†', 'üöó', '‚úàÔ∏è', 'üõçÔ∏è', 'üçî'],
            ['üìö', 'üéì', 'üè•', '‚öΩ', 'üé∏']
        ]
        
        keyboard_buttons = []
        for row in icons:
            buttons_row = [InlineKeyboardButton(text=icon, callback_data=f"set_income_icon_{icon}") for icon in row]
            keyboard_buttons.append(buttons_row)
        
        keyboard_buttons.append([InlineKeyboardButton(text="‚û°Ô∏è –ë–µ–∑ –∏–∫–æ–Ω–∫–∏", callback_data="no_income_icon")])
        keyboard_buttons.append([InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π —ç–º–æ–¥–∑–∏", callback_data="custom_income_icon")])
        keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_income_cat_{category_id}")])
        
        await callback.message.edit_text(
            f"üé® –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ ¬´{name_without_emoji}¬ª:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
        await state.set_state(IncomeCategoryForm.waiting_for_icon)
    await callback.answer()


@router.message(IncomeCategoryForm.waiting_for_new_name)
async def process_new_income_category_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤"""
    new_name = message.text.strip()
    
    if len(new_name) > 50:
        await send_message_with_cleanup(message, state, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    data = await state.get_data()
    category_id = data.get('editing_income_category_id')
    
    if not category_id:
        await send_message_with_cleanup(message, state, "‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏
    from bot.services.income import get_user_income_categories
    categories = await get_user_income_categories(message.from_user.id)
    current_category = next((cat for cat in categories if cat.id == category_id), None)
    
    if not current_category:
        await send_message_with_cleanup(message, state, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—É—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    import re
    emoji_pattern = r'^([\U0001F000-\U0001F9FF\U00002600-\U000027BF\U0001F300-\U0001F64F\U0001F680-\U0001F6FF]+)\s*'
    current_emoji_match = re.match(emoji_pattern, current_category.name)
    current_emoji = current_emoji_match.group(1) if current_emoji_match else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–º–æ–¥–∑–∏ –≤ –Ω–æ–≤–æ–º –Ω–∞–∑–≤–∞–Ω–∏–∏
    new_emoji_match = re.match(emoji_pattern, new_name)
    has_new_emoji = bool(new_emoji_match)
    
    if has_new_emoji:
        # –ï—Å–ª–∏ –≤ –Ω–æ–≤–æ–º –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å —ç–º–æ–¥–∑–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
        final_name = new_name.strip()
    elif current_emoji:
        # –ï—Å–ª–∏ –≤ –Ω–æ–≤–æ–º –Ω–∞–∑–≤–∞–Ω–∏–∏ –Ω–µ—Ç —ç–º–æ–¥–∑–∏, –Ω–æ –µ—Å—Ç—å –≤ —Å—Ç–∞—Ä–æ–º - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∏–∫–æ–Ω–∫—É
        final_name = f"{current_emoji} {new_name.strip()}"
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —ç–º–æ–¥–∑–∏ –Ω–∏ –≤ —Å—Ç–∞—Ä–æ–º, –Ω–∏ –≤ –Ω–æ–≤–æ–º - –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∫–æ–Ω–∫–∏
        final_name = new_name.strip()
    
    try:
        from bot.services.income import update_income_category
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        await update_income_category(message.from_user.id, category_id, final_name)
        
        await state.clear()
        await show_income_categories_menu(message, state)
    except ValueError as e:
        await send_message_with_cleanup(message, state, f"‚ùå {str(e)}")
        await state.clear()


@router.callback_query(lambda c: c.data == "cancel_income_category_creation", IncomeCategoryForm.waiting_for_icon)
async def cancel_income_category_creation(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–∫–æ–Ω–∫–∏"""
    await state.clear()
    # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - send_message_with_cleanup –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –µ–≥–æ
    await show_income_categories_menu(callback, state)
    await callback.answer()

@router.callback_query(lambda c: c.data == "cancel_income_category_creation", IncomeCategoryForm.waiting_for_custom_icon)
async def cancel_income_category_creation_custom(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∏–∫–æ–Ω–∫–∏"""
    await state.clear()
    # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - send_message_with_cleanup –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –µ–≥–æ
    await show_income_categories_menu(callback, state)
    await callback.answer()

# Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —Å–±—Ä–æ—à–µ–Ω–æ
@router.callback_query(lambda c: c.data == "cancel_income_category_creation")
async def cancel_income_category_creation_fallback(callback: types.CallbackQuery, state: FSMContext):
    """Fallback –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —Å–±—Ä–æ—à–µ–Ω–æ"""
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π, —Ç–∞–∫ –∫–∞–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —Å–±—Ä–æ—à–µ–Ω–æ
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("set_income_icon_"))
async def set_income_icon_fallback(callback: types.CallbackQuery, state: FSMContext):
    """Fallback –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∫–æ–Ω–∫–∏ –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —Å–±—Ä–æ—à–µ–Ω–æ"""
    await callback.answer()

@router.callback_query(lambda c: c.data == "no_income_icon")
async def no_income_icon_fallback(callback: types.CallbackQuery, state: FSMContext):
    """Fallback –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–µ–∑ –∏–∫–æ–Ω–∫–∏ –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —Å–±—Ä–æ—à–µ–Ω–æ"""
    await callback.answer()