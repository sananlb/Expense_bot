"""
Rate limiting middleware –¥–ª—è Expense Bot
"""
import time
import logging
from collections import defaultdict
from datetime import datetime, timedelta
from typing import Dict, Any, Callable, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Update, Message, CallbackQuery
from django.conf import settings
import asyncio

from .security import RateLimiter, log_security_event

logger = logging.getLogger(__name__)


class RateLimitMiddleware(BaseMiddleware):
    """Advanced rate limiting middleware —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π aiogram 3.x"""
    
    def __init__(self, 
                 requests_per_minute: int = None,
                 requests_per_hour: int = None,
                 burst_size: int = 10,
                 use_redis: bool = True):
        super().__init__()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ settings.py –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.requests_per_minute = requests_per_minute or getattr(
            settings, 'BOT_RATE_LIMIT_MESSAGES_PER_MINUTE', 100
        )
        self.requests_per_hour = requests_per_hour or getattr(
            settings, 'BOT_RATE_LIMIT_MESSAGES_PER_HOUR', 2000
        )
        self.burst_size = burst_size
        self.use_redis = use_redis
        
        # –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ)
        self.user_requests: Dict[int, list] = defaultdict(list)
        self.user_warnings: Dict[int, int] = defaultdict(int)
        self.blocked_users: Dict[int, datetime] = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_requests': 0,
            'blocked_requests': 0,
            'unique_users': set(),
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
        asyncio.create_task(self._cleanup_loop())
        asyncio.create_task(self._stats_reporter())
    
    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ middleware –¥–ª—è aiogram 3.x"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è
        user = None
        if isinstance(event, Message):
            user = event.from_user
        elif isinstance(event, CallbackQuery):
            user = event.from_user
        elif hasattr(event, 'from_user'):
            user = event.from_user
        
        if not user:
            return await handler(event, data)
        
        user_id = user.id
        now = datetime.now()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats['total_requests'] += 1
        self.stats['unique_users'].add(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis rate limiter –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.use_redis:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω—É—Ç–Ω—ã–π –ª–∏–º–∏—Ç
                if not RateLimiter.check_rate_limit(
                    user_id, 'messages_minute', 
                    self.requests_per_minute, 60
                ):
                    await self._handle_rate_limit_exceeded(
                        event, user_id, 'minute', 
                        RateLimiter.get_remaining_time(user_id, 'messages_minute')
                    )
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç
                if not RateLimiter.check_rate_limit(
                    user_id, 'messages_hour',
                    self.requests_per_hour, 3600
                ):
                    await self._handle_rate_limit_exceeded(
                        event, user_id, 'hour',
                        RateLimiter.get_remaining_time(user_id, 'messages_hour')
                    )
                    return
                    
            except Exception as e:
                logger.error(f"Redis rate limiter error: {e}")
                # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π rate limiter
        
        # –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è)
        if not self.use_redis or True:  # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º burst
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if user_id in self.blocked_users:
                if now < self.blocked_users[user_id]:
                    remaining = (self.blocked_users[user_id] - now).seconds
                    await self._handle_blocked_user(event, user_id, remaining)
                    return
                else:
                    del self.blocked_users[user_id]
                    self.user_warnings[user_id] = 0
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            self._cleanup_user_requests(user_id, now)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º burst
            if self._check_burst(user_id):
                self.blocked_users[user_id] = now + timedelta(minutes=5)
                await self._handle_burst_detected(event, user_id)
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
            self.user_requests[user_id].append(now)
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        return await handler(event, data)
    
    def _cleanup_user_requests(self, user_id: int, now: datetime):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        minute_ago = now - timedelta(minutes=1)
        hour_ago = now - timedelta(hours=1)
        
        self.user_requests[user_id] = [
            req_time for req_time in self.user_requests[user_id]
            if req_time > hour_ago
        ]
    
    def _check_burst(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ burst –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        if len(self.user_requests[user_id]) < self.burst_size:
            return False
        
        recent_requests = self.user_requests[user_id][-self.burst_size:]
        time_diff = (recent_requests[-1] - recent_requests[0]).total_seconds()
        
        return time_diff < 2  # burst_size –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    
    async def _handle_rate_limit_exceeded(self, event: Any, user_id: int, 
                                         limit_type: str, remaining_seconds: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è rate limit"""
        self.stats['blocked_requests'] += 1
        
        log_security_event(
            'rate_limit_exceeded',
            user_id,
            {'type': limit_type, 'remaining_seconds': remaining_seconds}
        )
        
        if limit_type == 'minute':
            message = f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É ({self.requests_per_minute}).\n"
        else:
            message = f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω —á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π ({self.requests_per_hour}).\n"
        
        message += f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {remaining_seconds} —Å–µ–∫—É–Ω–¥."
        
        if isinstance(event, Message):
            await event.answer(message)
        elif isinstance(event, CallbackQuery):
            await event.answer(message, show_alert=True)
    
    async def _handle_burst_detected(self, event: Any, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è burst"""
        log_security_event(
            'burst_activity_detected',
            user_id,
            {'burst_size': self.burst_size}
        )
        
        message = "‚õî –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç."
        
        if isinstance(event, Message):
            await event.answer(message)
        elif isinstance(event, CallbackQuery):
            await event.answer(message, show_alert=True)
    
    async def _handle_blocked_user(self, event: Any, user_id: int, 
                                  remaining_seconds: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_warnings[user_id] += 1
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥–æ–µ 10-–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        if self.user_warnings[user_id] % 10 == 0:
            message = f"üö´ –í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.\n–û—Å—Ç–∞–ª–æ—Å—å: {remaining_seconds} —Å–µ–∫—É–Ω–¥."
            
            if isinstance(event, Message):
                await event.answer(message)
            elif isinstance(event, CallbackQuery):
                await event.answer(message, show_alert=True)
    
    async def _cleanup_loop(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        while True:
            await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            try:
                now = datetime.now()
                hour_ago = now - timedelta(hours=1)
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                for user_id in list(self.user_requests.keys()):
                    self.user_requests[user_id] = [
                        req_time for req_time in self.user_requests[user_id]
                        if req_time > hour_ago
                    ]
                    if not self.user_requests[user_id]:
                        del self.user_requests[user_id]
                
                # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                for user_id in list(self.blocked_users.keys()):
                    if self.blocked_users[user_id] < now:
                        del self.blocked_users[user_id]
                        if user_id in self.user_warnings:
                            del self.user_warnings[user_id]
                
            except Exception as e:
                logger.error(f"Error in cleanup loop: {e}")
    
    async def _stats_reporter(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while True:
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
            try:
                logger.info(
                    f"Rate limiter stats: "
                    f"requests={self.stats['total_requests']}, "
                    f"blocked={self.stats['blocked_requests']}, "
                    f"unique_users={len(self.stats['unique_users'])}"
                )
                # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self.stats['blocked_requests'] = 0
                self.stats['unique_users'].clear()
            except Exception as e:
                logger.error(f"Error in stats reporter: {e}")