from django.core.management.base import BaseCommand
from django_celery_beat.models import PeriodicTask, CrontabSchedule, IntervalSchedule
from django.utils import timezone
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ Celery –≤ –ë–î'

    def handle(self, *args, **options):
        self.stdout.write('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á Celery...')
        
        try:
            # 1. –ó–∞–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É –≤ 10:00
            schedule_10am, created = CrontabSchedule.objects.get_or_create(
                minute=0,
                hour=10,
                day_of_week='*',
                day_of_month='*',
                month_of_year='*',
                timezone=timezone.get_current_timezone()
            )
            if created:
                self.stdout.write(self.style.SUCCESS('‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è 10:00'))

            task, created = PeriodicTask.objects.update_or_create(
                task='expense_bot.celery_tasks.send_daily_admin_report',
                defaults={
                    'crontab': schedule_10am,
                    'name': 'Daily Admin Report at 10:00',
                    'queue': 'reports',
                    'enabled': True
                }
            )
            self.stdout.write(
                self.style.SUCCESS(f"{'‚úÖ –°–æ–∑–¥–∞–Ω–∞' if created else '‚úîÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞'} –∑–∞–¥–∞—á–∞: Daily Admin Report at 10:00")
            )

            # 2. –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤ 20:00
            schedule_20pm, created = CrontabSchedule.objects.get_or_create(
                minute=0,
                hour=20,
                day_of_week='*',
                day_of_month='*',
                month_of_year='*',
                timezone=timezone.get_current_timezone()
            )

            task, created = PeriodicTask.objects.update_or_create(
                task='expense_bot.celery_tasks.send_monthly_reports',
                defaults={
                    'crontab': schedule_20pm,
                    'name': 'Monthly Reports at 20:00',
                    'queue': 'reports',
                    'enabled': True
                }
            )
            self.stdout.write(
                self.style.SUCCESS(f"{'‚úÖ –°–æ–∑–¥–∞–Ω–∞' if created else '‚úîÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞'} –∑–∞–¥–∞—á–∞: Monthly Reports at 20:00")
            )

            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            interval_30min, created = IntervalSchedule.objects.get_or_create(
                every=30,
                period=IntervalSchedule.MINUTES
            )

            task, created = PeriodicTask.objects.update_or_create(
                task='expense_bot.celery_tasks.check_budget_limits',
                defaults={
                    'interval': interval_30min,
                    'name': 'Check Budget Limits',
                    'queue': 'notifications',
                    'enabled': True
                }
            )
            self.stdout.write(
                self.style.SUCCESS(f"{'‚úÖ –°–æ–∑–¥–∞–Ω–∞' if created else '‚úîÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞'} –∑–∞–¥–∞—á–∞: Check Budget Limits")
            )

            # 4. –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –≤ 12:00
            schedule_12pm, created = CrontabSchedule.objects.get_or_create(
                minute=0,
                hour=12,
                day_of_week='*',
                day_of_month='*',
                month_of_year='*',
                timezone=timezone.get_current_timezone()
            )

            task, created = PeriodicTask.objects.update_or_create(
                task='expense_bot.celery_tasks.process_recurring_payments',
                defaults={
                    'crontab': schedule_12pm,
                    'name': 'Process Recurring Payments at 12:00',
                    'queue': 'recurring',
                    'enabled': True
                }
            )
            self.stdout.write(
                self.style.SUCCESS(f"{'‚úÖ –°–æ–∑–¥–∞–Ω–∞' if created else '‚úîÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞'} –∑–∞–¥–∞—á–∞: Process Recurring Payments")
            )

            # 5. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º –≤ 03:00
            schedule_cleanup, created = CrontabSchedule.objects.get_or_create(
                minute=0,
                hour=3,
                day_of_week='0',  # 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                day_of_month='*',
                month_of_year='*',
                timezone=timezone.get_current_timezone()
            )

            task, created = PeriodicTask.objects.update_or_create(
                task='expense_bot.celery_tasks.cleanup_old_expenses',
                defaults={
                    'crontab': schedule_cleanup,
                    'name': 'Cleanup Old Expenses on Sunday',
                    'queue': 'maintenance',
                    'enabled': True
                }
            )
            self.stdout.write(
                self.style.SUCCESS(f"{'‚úÖ –°–æ–∑–¥–∞–Ω–∞' if created else '‚úîÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞'} –∑–∞–¥–∞—á–∞: Cleanup Old Expenses")
            )

            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –∫–∞–∂–¥—ã–π —á–∞—Å
            interval_1hour, created = IntervalSchedule.objects.get_or_create(
                every=1,
                period=IntervalSchedule.HOURS
            )

            task, created = PeriodicTask.objects.update_or_create(
                task='expense_bot.celery_tasks.system_health_check',
                defaults={
                    'interval': interval_1hour,
                    'name': 'System Health Check',
                    'queue': 'monitoring',
                    'enabled': True
                }
            )
            self.stdout.write(
                self.style.SUCCESS(f"{'‚úÖ –°–æ–∑–¥–∞–Ω–∞' if created else '‚úîÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞'} –∑–∞–¥–∞—á–∞: System Health Check")
            )

            # 7. –°–±–æ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ 23:00
            schedule_23pm, created = CrontabSchedule.objects.get_or_create(
                minute=0,
                hour=23,
                day_of_week='*',
                day_of_month='*',
                month_of_year='*',
                timezone=timezone.get_current_timezone()
            )

            task, created = PeriodicTask.objects.update_or_create(
                task='expense_bot.celery_tasks.collect_daily_analytics',
                defaults={
                    'crontab': schedule_23pm,
                    'name': 'Collect Daily Analytics at 23:00',
                    'queue': 'analytics',
                    'enabled': True
                }
            )
            self.stdout.write(
                self.style.SUCCESS(f"{'‚úÖ –°–æ–∑–¥–∞–Ω–∞' if created else '‚úîÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞'} –∑–∞–¥–∞—á–∞: Collect Daily Analytics")
            )

            # 8. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø-5 –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤ 01:00
            schedule_1am, created = CrontabSchedule.objects.get_or_create(
                minute=0,
                hour=1,
                day_of_week='*',
                day_of_month='*',
                month_of_year='*',
                timezone=timezone.get_current_timezone()
            )

            task, created = PeriodicTask.objects.update_or_create(
                task='expense_bot.celery_tasks.update_top5_keyboards',
                defaults={
                    'crontab': schedule_1am,
                    'name': 'Update Top5 Keyboards at 01:00',
                    'queue': 'maintenance',
                    'enabled': True
                }
            )
            self.stdout.write(
                self.style.SUCCESS(f"{'‚úÖ –°–æ–∑–¥–∞–Ω–∞' if created else '‚úîÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞'} –∑–∞–¥–∞—á–∞: Update Top5 Keyboards")
            )

            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            self.stdout.write('\n' + '=' * 50)
            self.stdout.write(self.style.SUCCESS('üìã –ò–¢–û–ì–ò:'))
            
            all_tasks = PeriodicTask.objects.filter(enabled=True)
            self.stdout.write(f'–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {all_tasks.count()}')
            
            for task in all_tasks:
                status = '‚úÖ' if task.enabled else '‚ùå'
                self.stdout.write(f'{status} {task.name}: {task.task}')
                if task.crontab:
                    self.stdout.write(f'    ‚è∞ –í—Ä–µ–º—è: {task.crontab.hour}:{task.crontab.minute:02d}')
                elif task.interval:
                    self.stdout.write(f'    ‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {task.interval.every} {task.interval.period}')
            
            self.stdout.write('\n' + self.style.SUCCESS('‚úÖ –í—Å–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!'))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á: {e}'))
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á: {e}", exc_info=True)
            raise