"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è AI —Å–µ—Ä–≤–∏—Å–æ–≤
"""
from abc import ABC, abstractmethod
from typing import Dict, List, Optional, Any
import logging

logger = logging.getLogger(__name__)


class AIBaseService(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    @abstractmethod
    async def categorize_expense(
        self, 
        text: str, 
        amount: float,
        currency: str,
        categories: List[str],
        user_context: Optional[Dict[str, Any]] = None
    ) -> Optional[Dict[str, Any]]:
        """
        –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–∞
        
        Args:
            text: –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
            amount: –°—É–º–º–∞
            currency: –í–∞–ª—é—Ç–∞
            categories: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–µ–¥–∞–≤–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç.–¥.)
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–ª–∏ None
        """
        pass
    
    @abstractmethod
    async def chat(
        self,
        message: str,
        context: List[Dict[str, str]],
        user_context: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        –ß–∞—Ç —Å AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π [{role: 'user'|'assistant', content: str}]
            user_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        """
        pass
    
    def get_expense_categorization_prompt(
        self,
        text: str,
        amount: float,
        currency: str,
        categories: List[str],
        user_context: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —è–∑—ã–∫–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞.
        –†–∞–±–æ—Ç–∞–µ—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö, —Å emoji –∏ –±–µ–∑.
        """
        context_info = ""
        if user_context:
            if 'recent_categories' in user_context:
                context_info += f"\nRecently used categories: {', '.join(user_context['recent_categories'][:3])}"

        categories_list = '\n'.join([f"- {cat}" for cat in categories])

        return f"""You are an expense categorization assistant for a personal finance bot. Your task is to categorize the expense.

Expense information:
Description: "{text}"
Amount: {amount} {currency}
{context_info}

User's available categories:
{categories_list}

IMPORTANT INSTRUCTIONS:
1. Choose ONLY from the list above - return the exact category name including emoji if present
2. Categories may be in different languages (English, Russian, Spanish, etc.) - match semantically
3. Some categories have emoji (üçî, üöó, üí∞), some don't - both are valid
4. Match by meaning, not language:
   - "cookie" or "cookies" or "–ø–µ—á–µ–Ω—å–µ" or "biscuit" ‚Üí food/groceries category
   - "coffee" or "–∫–æ—Ñ–µ" or "caf√©" ‚Üí cafe/restaurant category
   - "gas" or "–±–µ–Ω–∑–∏–Ω" or "diesel" ‚Üí transport/fuel category
   - "carrot" or "carrots" or "vegetable" or "–æ–≤–æ—â–∏" ‚Üí groceries/produce category
   - "uber" or "taxi" or "—Ç–∞–∫—Å–∏" ‚Üí transport category
5. If the exact match isn't found, choose the most semantically similar category
6. User-created custom categories (in any language) are equally valid as default ones

Return JSON:
{{
    "category": "exact category name from the list",
    "confidence": number from 0 to 1,
    "reasoning": "brief explanation of the choice"
}}"""
    
    def get_chat_prompt(
        self,
        message: str,
        context: List[Dict[str, str]],
        user_context: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        history = ""
        if context:
            for msg in context[-10:]:  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg['role'] == 'user' else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
                history += f"\n{role}: {msg['content']}"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = ""
        if user_context:
            if 'recent_expenses' in user_context:
                recent = user_context['recent_expenses'][:3]
                user_info += f"\n–ù–µ–¥–∞–≤–Ω–∏–µ —Ç—Ä–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {', '.join(recent)}"
            if 'total_today' in user_context:
                user_info += f"\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {user_context['total_today']} ‚ÇΩ"
        
        return f"""–¢—ã - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –±–æ—Ç–µ –¥–ª—è —É—á–µ—Ç–∞ –ª–∏—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É—á–µ—Ç–æ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã.

–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:{history}
{user_info}

–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message}

–û—Ç–≤–µ—Ç –ø–æ–º–æ—â–Ω–∏–∫–∞:"""