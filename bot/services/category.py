"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
"""
from typing import List, Optional, Set
from expenses.models import ExpenseCategory, Profile, CategoryKeyword
from asgiref.sync import sync_to_async
from django.db.models import Sum, Count
from bot.utils.db_utils import get_or_create_user_profile_sync
import logging

logger = logging.getLogger(__name__)


@sync_to_async
def get_or_create_category(user_id: int, category_name: str) -> ExpenseCategory:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã'"""
    logger.info(f"Looking for category '{category_name}' for user {user_id}")
    
    profile = get_or_create_user_profile_sync(user_id)
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    category_mapping = {
        '–∞–∑—Å': ['–∞–∑—Å', '–∑–∞–ø—Ä–∞–≤–∫–∞', '—Ç–æ–ø–ª–∏–≤–æ'],
        '—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ã': ['—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç', '–ø—Ä–æ–¥—É–∫—Ç—ã', '–º–∞–≥–∞–∑–∏–Ω'],
        '–ø—Ä–æ–¥—É–∫—Ç—ã': ['–ø—Ä–æ–¥—É–∫—Ç—ã', '–µ–¥–∞', '—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç', '–¥—Ä—É–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã'],
        '–∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã': ['–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', '–µ–¥–∞', '–æ–±–µ–¥', '–∫–æ—Ñ–µ'],
        '–∫–∞—Ñ–µ': ['–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã'],  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è "–∫–∞—Ñ–µ"
        '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': ['—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '—Ç–∞–∫—Å–∏', '–º–µ—Ç—Ä–æ', '–∞–≤—Ç–æ–±—É—Å'],
        '–∑–¥–æ—Ä–æ–≤—å–µ': ['–∑–¥–æ—Ä–æ–≤—å–µ', '–∞–ø—Ç–µ–∫–∞', '–º–µ–¥–∏—Ü–∏–Ω–∞', '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞'],
        '–æ–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å': ['–æ–¥–µ–∂–¥–∞', '–æ–±—É–≤—å', '–≤–µ—â–∏'],
        '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': ['—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–∫–∏–Ω–æ', '—Ç–µ–∞—Ç—Ä', '–æ—Ç–¥—ã—Ö'],
        '–¥–æ–º –∏ –∂–∫—Ö': ['–∂–∫—Ö', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–∫–æ–º–º—É–Ω–∞–ª–∫–∞', '–¥–æ–º'],
        '—Å–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç': ['—Å–≤—è–∑—å', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–º–æ–±–∏–ª—å–Ω—ã–π'],
        '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': ['–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–∫—É—Ä—Å—ã', '—É—á–µ–±–∞', '–æ–±—É—á–µ–Ω–∏–µ'],
        '–∞–≤—Ç–æ–º–æ–±–∏–ª—å': ['–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–º–∞—à–∏–Ω–∞', '–∞–≤—Ç–æ', '–±–µ–Ω–∑–∏–Ω'],
        '–ø–æ–¥–∞—Ä–∫–∏': ['–ø–æ–¥–∞—Ä–∫–∏', '–ø–æ–¥–∞—Ä–æ–∫', '—Ü–≤–µ—Ç—ã'],
        '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–æ—Ç–ø—É—Å–∫', '–ø–æ–µ–∑–¥–∫–∞', '—Ç—É—Ä'],
        '–¥—Ä—É–≥–æ–µ': ['–¥—Ä—É–≥–æ–µ', '–ø—Ä–æ—á–µ–µ', '—Ä–∞–∑–Ω–æ–µ'],  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è "–¥—Ä—É–≥–æ–µ"
    }
    
    # –ò—â–µ–º —Å—Ä–µ–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –°–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É—è —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ)
    all_categories = ExpenseCategory.objects.filter(profile=profile)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±–µ–∑ —É—á–µ—Ç–∞ —ç–º–æ–¥–∑–∏
    for cat in all_categories:
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞—á–∞–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        import re
        name_without_emoji = re.sub(r'^[\U0001F000-\U0001F9FF\U00002600-\U000027BF\U0001F300-\U0001F64F\U0001F680-\U0001F6FF]+\s*', '', cat.name)
        if name_without_emoji.lower() == category_name.lower():
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Windows
            safe_name = cat.name.encode('ascii', 'ignore').decode('ascii').strip()
            if not safe_name:
                safe_name = "category with emoji"
            logger.info(f"Found exact match (ignoring emoji): {safe_name}")
            return cat
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    # –ù–∞–ø—Ä–∏–º–µ—Ä, "–∫–∞—Ñ–µ" –Ω–∞–π–¥–µ—Ç "–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã"
    for cat in all_categories:
        name_lower = cat.name.lower()
        category_name_lower = category_name.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏—Å–∫–æ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        if category_name_lower in name_lower:
            safe_name = cat.name.encode('ascii', 'ignore').decode('ascii').strip()
            if not safe_name:
                safe_name = "category with emoji"
            logger.info(f"Found partial match: {safe_name}")
            return cat
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∏–∑ –∏—Å–∫–æ–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        words = category_name_lower.split()
        if any(word in name_lower for word in words if len(word) > 3):
            safe_name = cat.name.encode('ascii', 'ignore').decode('ascii').strip()
            if not safe_name:
                safe_name = "category with emoji"
            logger.info(f"Found word match: {safe_name}")
            return cat
    
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    category_name_lower = category_name.lower()
    for cat_group, keywords in category_mapping.items():
        if category_name_lower in keywords:
            # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≥—Ä—É–ø–ø—ã
            for keyword in [cat_group] + keywords:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
                category = ExpenseCategory.objects.filter(
                    profile=profile,
                    name__icontains=keyword
                ).first()
                if category:
                    safe_name = category.name.encode('ascii', 'ignore').decode('ascii').strip()
                    if not safe_name:
                        safe_name = "category with emoji"
                    logger.info(f"Found category '{safe_name}' through mapping keyword '{keyword}'")
                    return category
                
                # –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
                category = ExpenseCategory.objects.filter(
                    profile=profile,
                    name__icontains=keyword.upper()
                ).first()
                if category:
                    safe_name = category.name.encode('ascii', 'ignore').decode('ascii').strip()
                    if not safe_name:
                        safe_name = "category with emoji"
                    logger.info(f"Found category '{safe_name}' through mapping keyword (uppercase) '{keyword.upper()}'")
                    return category
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ category_name —ç—Ç–æ "–∫–∞—Ñ–µ", –∏—â–µ–º –ª—é–±—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ —Å–ª–æ–≤–æ–º "–∫–∞—Ñ–µ"
    if '–∫–∞—Ñ–µ' in category_name.lower():
        for cat in all_categories:
            if '–∫–∞—Ñ–µ' in cat.name.lower() or '—Ä–µ—Å—Ç–æ—Ä–∞–Ω' in cat.name.lower():
                safe_name = cat.name.encode('ascii', 'ignore').decode('ascii').strip()
                if not safe_name:
                    safe_name = "category with emoji"
                logger.info(f"Found category '{safe_name}' by cafe/restaurant keyword")
                return cat
    
    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
    logger.warning(f"Category '{category_name}' not found for user {user_id}, using default")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
    other_category = ExpenseCategory.objects.filter(
        profile=profile,
        name__icontains='–ø—Ä–æ—á–∏–µ'
    ).first()
    
    if not other_category:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã", —Å–æ–∑–¥–∞–µ–º –µ—ë
        other_category, created = ExpenseCategory.objects.get_or_create(
            name='üí∞ –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã',
            profile=profile,
            defaults={'icon': ''}
        )
        if created:
            logger.info(f"Created default category '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã' for user {user_id}")
    
    return other_category


@sync_to_async
def get_user_categories(user_id: int) -> List[ExpenseCategory]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        profile = Profile.objects.get(telegram_id=user_id)
    except Profile.DoesNotExist:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        profile = Profile.objects.create(telegram_id=user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å refresh –∏–∑ –ë–î)
    from django.db import connection
    connection.ensure_connection()
    
    categories = ExpenseCategory.objects.filter(
        profile=profile
    ).order_by('name')
    
    # Force evaluation of queryset
    categories_count = categories.count()
    logger.info(f"get_user_categories for user {user_id}: found {categories_count} categories in DB")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã" –±—ã–ª–∏ –≤ –∫–æ–Ω—Ü–µ
    categories_list = list(categories)
    regular_categories = []
    other_category = None
    
    for cat in categories_list:
        if '–ø—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã' in cat.name.lower():
            other_category = cat
        else:
            regular_categories.append(cat)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –æ–±—ã—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∑–∞—Ç–µ–º "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
    if other_category:
        regular_categories.append(other_category)
    
    return regular_categories


async def create_category(user_id: int, name: str, icon: str = 'üí∞') -> ExpenseCategory:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    from django.db import transaction
    
    @sync_to_async
    def _create_category():
        with transaction.atomic():
            try:
                profile = Profile.objects.get(telegram_id=user_id)
            except Profile.DoesNotExist:
                profile = Profile.objects.create(telegram_id=user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–º–∞–∫—Å–∏–º—É–º 50)
            categories_count = ExpenseCategory.objects.filter(profile=profile).count()
            if categories_count >= 50:
                logger.warning(f"User {user_id} reached categories limit (50)")
                raise ValueError("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–º–∞–∫—Å–∏–º—É–º 50)")
            
            # –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –∫ –Ω–∞–∑–≤–∞–Ω–∏—é
            if icon and icon.strip():
                category_name = f"{icon} {name}"
            else:
                category_name = name
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            existing = ExpenseCategory.objects.filter(
                profile=profile,
                name=category_name
            ).first()
            
            if existing:
                logger.warning(f"Category '{category_name}' already exists for user {user_id}")
                return existing, False
            
            category = ExpenseCategory.objects.create(
                name=category_name,
                icon='',  # –ü–æ–ª–µ icon –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
                profile=profile
            )
            
            logger.info(f"Created category '{category_name}' (id: {category.id}) for user {user_id}")
            return category, True
    
    category, is_new = await _create_category()
    
    # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    if is_new:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ, –Ω–µ –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        import asyncio
        asyncio.create_task(optimize_keywords_for_new_category(user_id, category.id))
    
    return category


@sync_to_async
def update_category(user_id: int, category_id: int, **kwargs) -> Optional[ExpenseCategory]:
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    try:
        category = ExpenseCategory.objects.get(
            id=category_id,
            profile__telegram_id=user_id
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        for field, value in kwargs.items():
            if hasattr(category, field):
                setattr(category, field, value)
        
        category.save()
        return category
    except ExpenseCategory.DoesNotExist:
        return None


async def update_category_name(user_id: int, category_id: int, new_name: str) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ, —á—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç
    result = await update_category(user_id, category_id, name=new_name.strip())
    return result is not None


@sync_to_async
def delete_category(user_id: int, category_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    from django.db import transaction
    
    try:
        with transaction.atomic():
            category = ExpenseCategory.objects.get(
                id=category_id,
                profile__telegram_id=user_id
            )
            category.delete()
            logger.info(f"Deleted category {category_id} for user {user_id}")
        return True
    except ExpenseCategory.DoesNotExist:
        logger.warning(f"Category {category_id} not found for user {user_id}")
        return False


@sync_to_async
def get_category_by_id(user_id: int, category_id: int) -> Optional[ExpenseCategory]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID"""
    try:
        category = ExpenseCategory.objects.get(
            id=category_id,
            profile__telegram_id=user_id
        )
        return category
    except ExpenseCategory.DoesNotExist:
        return None


@sync_to_async
def create_default_categories(user_id: int) -> bool:
    """
    –°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
    Returns:
        True –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã, False –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    """
    try:
        profile = Profile.objects.get(telegram_id=user_id)
    except Profile.DoesNotExist:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        profile = Profile.objects.create(telegram_id=user_id)
        logger.info(f"Created new profile for user {user_id}")
    
    try:
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if ExpenseCategory.objects.filter(profile=profile).exists():
            return False
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = profile.language_code or 'ru'
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
        if lang == 'en':
            default_categories = [
                ('Supermarkets', 'üõí'),
                ('Other Products', 'ü´ë'),
                ('Restaurants and Cafes', 'üçΩÔ∏è'),
                ('Gas Stations', '‚õΩ'),
                ('Taxi', 'üöï'),
                ('Public Transport', 'üöå'),
                ('Car', 'üöó'),
                ('Housing', 'üè†'),
                ('Pharmacies', 'üíä'),
                ('Medicine', 'üè•'),
                ('Sports', 'üèÉ'),
                ('Sports Goods', 'üèÄ'),
                ('Clothes and Shoes', 'üëî'),
                ('Flowers', 'üåπ'),
                ('Entertainment', 'üé≠'),
                ('Education', 'üìö'),
                ('Gifts', 'üéÅ'),
                ('Travel', '‚úàÔ∏è'),
                ('Communication and Internet', 'üì±'),
                ('Other Expenses', 'üí∞')
            ]
        else:
            from expenses.models import DEFAULT_CATEGORIES
            default_categories = DEFAULT_CATEGORIES
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —ç–º–æ–¥–∑–∏ –≤ –ø–æ–ª–µ name
        categories = []
        for name, icon in default_categories:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            category_with_icon = f"{icon} {name}"
            category = ExpenseCategory(
                profile=profile,
                name=category_with_icon,
                icon='',  # –ü–æ–ª–µ icon –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
                is_active=True
            )
            categories.append(category)
            
        ExpenseCategory.objects.bulk_create(categories)
        return True
        
    except Profile.DoesNotExist:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –µ—â–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        profile = Profile.objects.create(telegram_id=user_id)
        return create_default_categories(user_id)
    except Exception as e:
        return False


@sync_to_async
def migrate_categories_with_emojis():
    """–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –¥–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏ –≤ –ø–æ–ª–µ name"""
    from expenses.models import ExpenseCategory
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    categories = ExpenseCategory.objects.all()
    
    for category in categories:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ
        import re
        emoji_pattern = r'^[\U0001F000-\U0001F9FF\U00002600-\U000027BF\U0001F300-\U0001F64F\U0001F680-\U0001F6FF]'
        
        if not re.match(emoji_pattern, category.name):
            # –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º
            if category.icon and category.icon.strip():
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∫–æ–Ω–∫–∞ –≤ –ø–æ–ª–µ icon, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
                category.name = f"{category.icon} {category.name}"
            else:
                # –ò–Ω–∞—á–µ –ø–æ–¥–±–∏—Ä–∞–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                icon = get_icon_for_category(category.name)
                category.name = f"{icon} {category.name}"
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ icon
            category.icon = ''
            category.save()
    
    return True


def get_icon_for_category(category_name: str) -> str:
    """–ü–æ–¥–æ–±—Ä–∞—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    category_lower = category_name.lower()
    
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∏–∫–æ–Ω–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    icon_map = {
        '—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç': 'üõí',
        '–ø—Ä–æ–¥—É–∫—Ç': 'ü•ê',
        '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': '‚òï',
        '–∫–∞—Ñ–µ': '‚òï',
        '–∞–∑—Å': '‚õΩ',
        '–∑–∞–ø—Ä–∞–≤–∫–∞': '‚õΩ',
        '—Ç–∞–∫—Å–∏': 'üöï',
        '–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'üöå',
        '–º–µ—Ç—Ä–æ': 'üöå',
        '–∞–≤—Ç–æ–±—É—Å': 'üöå',
        '–∞–≤—Ç–æ–º–æ–±–∏–ª—å': 'üöó',
        '–º–∞—à–∏–Ω–∞': 'üöó',
        '–∂–∏–ª—å–µ': 'üè†',
        '–∫–≤–∞—Ä—Ç–∏—Ä–∞': 'üè†',
        '–∞–ø—Ç–µ–∫': 'üíä',
        '–ª–µ–∫–∞—Ä—Å—Ç–≤': 'üíä',
        '–º–µ–¥–∏—Ü–∏–Ω': 'üè•',
        '–≤—Ä–∞—á': 'üè•',
        '—Å–ø–æ—Ä—Ç': '‚öΩ',
        '—Ñ–∏—Ç–Ω–µ—Å': '‚öΩ',
        '—Å–ø–æ—Ä—Ç–∏–≤–Ω': 'üèÉ',
        '–æ–¥–µ–∂–¥–∞': 'üëï',
        '–æ–±—É–≤—å': 'üëü',
        '—Ü–≤–µ—Ç': 'üå∏',
        '–±—É–∫–µ—Ç': 'üå∏',
        '—Ä–∞–∑–≤–ª–µ—á–µ–Ω': 'üé≠',
        '–∫–∏–Ω–æ': 'üé¨',
        '–æ–±—Ä–∞–∑–æ–≤–∞–Ω': 'üìö',
        '–∫—É—Ä—Å': 'üìö',
        '–ø–æ–¥–∞—Ä–∫': 'üéÅ',
        '–ø–æ–¥–∞—Ä–æ–∫': 'üéÅ',
        '–ø—É—Ç–µ—à–µ—Å—Ç–≤': '‚úàÔ∏è',
        '–æ—Ç–ø—É—Å–∫': '‚úàÔ∏è',
        '—Å–≤—è–∑—å': 'üì±',
        '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç': 'üì±',
        '—Ç–µ–ª–µ—Ñ–æ–Ω': 'üì±',
        '–ø—Ä–æ—á–µ–µ': 'üí∞',
        '–¥—Ä—É–≥–æ–µ': 'üí∞'
    }
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∏–∫–æ–Ω–∫—É
    for key, icon in icon_map.items():
        if key in category_lower:
            return icon
    
    return 'üí∞'  # –ò–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


@sync_to_async
def add_category_keyword(user_id: int, category_id: int, keyword: str) -> bool:
    """–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        category = ExpenseCategory.objects.get(
            id=category_id,
            profile__telegram_id=user_id
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        keyword_lower = keyword.lower().strip()
        if CategoryKeyword.objects.filter(
            category=category,
            keyword__iexact=keyword_lower
        ).exists():
            logger.warning(f"Keyword '{keyword}' already exists for category {category_id}")
            return False
        
        CategoryKeyword.objects.create(
            category=category,
            keyword=keyword_lower
        )
        logger.info(f"Added keyword '{keyword}' to category {category_id}")
        return True
        
    except ExpenseCategory.DoesNotExist:
        logger.error(f"Category {category_id} not found for user {user_id}")
        return False


@sync_to_async
def remove_category_keyword(user_id: int, category_id: int, keyword: str) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        category = ExpenseCategory.objects.get(
            id=category_id,
            profile__telegram_id=user_id
        )
        
        deleted_count, _ = CategoryKeyword.objects.filter(
            category=category,
            keyword__iexact=keyword.strip()
        ).delete()
        
        if deleted_count > 0:
            logger.info(f"Removed keyword '{keyword}' from category {category_id}")
            return True
        else:
            logger.warning(f"Keyword '{keyword}' not found in category {category_id}")
            return False
            
    except ExpenseCategory.DoesNotExist:
        logger.error(f"Category {category_id} not found for user {user_id}")
        return False


@sync_to_async
def get_category_keywords(user_id: int, category_id: int) -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        category = ExpenseCategory.objects.get(
            id=category_id,
            profile__telegram_id=user_id
        )
        
        keywords = CategoryKeyword.objects.filter(
            category=category
        ).values_list('keyword', flat=True)
        
        return list(keywords)
        
    except ExpenseCategory.DoesNotExist:
        logger.error(f"Category {category_id} not found for user {user_id}")
        return []


@sync_to_async
def auto_learn_keywords(user_id: int) -> dict:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞
    –∫–∞–∫ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
    """
    try:
        profile = Profile.objects.get(telegram_id=user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ç—Ä–∞—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        from expenses.models import Expense
        expenses = Expense.objects.filter(
            profile=profile,
            category__isnull=False
        ).select_related('category').order_by('-created_at')[:100]
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_words = {}
        
        for expense in expenses:
            category_name = expense.category.name
            if category_name not in category_words:
                category_words[category_name] = {}
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–∞
            words = expense.description.lower().split()
            for word in words:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ –∏ —Ü–∏—Ñ—Ä—ã
                if len(word) > 3 and not word.isdigit():
                    if word not in category_words[category_name]:
                        category_words[category_name][word] = 0
                    category_words[category_name][word] += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –∫–∞–∫ –∫–ª—é—á–µ–≤—ã–µ
        added_keywords = {}
        for category_name, words in category_words.items():
            # –ë–µ—Ä–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –º–∏–Ω–∏–º—É–º 3 —Ä–∞–∑–∞
            popular_words = [word for word, count in words.items() if count >= 3]
            
            if popular_words:
                category = ExpenseCategory.objects.get(
                    profile=profile,
                    name=category_name
                )
                
                added = []
                for word in popular_words[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 —Å–ª–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                    if not CategoryKeyword.objects.filter(
                        category=category,
                        keyword__iexact=word
                    ).exists():
                        CategoryKeyword.objects.create(
                            category=category,
                            keyword=word
                        )
                        added.append(word)
                
                if added:
                    added_keywords[category_name] = added
        
        return added_keywords
        
    except Profile.DoesNotExist:
        logger.error(f"Profile not found for user {user_id}")
        return {}


async def optimize_keywords_for_new_category(user_id: int, new_category_id: int):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è AI
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ —Ñ–æ–Ω–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    try:
        from bot.services.gemini_ai_service import gemini_service
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Ö –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        @sync_to_async
        def get_categories_with_keywords():
            profile = Profile.objects.get(telegram_id=user_id)
            categories = []
            
            for cat in ExpenseCategory.objects.filter(profile=profile):
                keywords = list(CategoryKeyword.objects.filter(
                    category=cat
                ).values_list('keyword', flat=True))
                
                categories.append({
                    'id': cat.id,
                    'name': cat.name,
                    'keywords': keywords
                })
            
            return categories
        
        all_categories = await get_categories_with_keywords()
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        new_category = None
        for cat in all_categories:
            if cat['id'] == new_category_id:
                new_category = cat
                break
        
        if not new_category:
            logger.error(f"New category {new_category_id} not found")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç AI
        optimized = await gemini_service.optimize_category_keywords(
            new_category['name'],
            all_categories
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        @sync_to_async
        def apply_keyword_changes():
            from django.db import transaction
            with transaction.atomic():
                for cat_name, changes in optimized.items():
                    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏
                    category = None
                    for cat in all_categories:
                        if cat['name'] == cat_name:
                            category_obj = ExpenseCategory.objects.get(id=cat['id'])
                            break
                    else:
                        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
                        for cat in all_categories:
                            if cat_name.lower() in cat['name'].lower() or cat['name'].lower() in cat_name.lower():
                                category_obj = ExpenseCategory.objects.get(id=cat['id'])
                                break
                        else:
                            continue
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                    for keyword in changes.get('add', []):
                        CategoryKeyword.objects.get_or_create(
                            category=category_obj,
                            keyword=keyword.lower().strip()
                        )
                    
                    # –£–¥–∞–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                    for keyword in changes.get('remove', []):
                        CategoryKeyword.objects.filter(
                            category=category_obj,
                            keyword__iexact=keyword.strip()
                        ).delete()
        
        await apply_keyword_changes()
        logger.info(f"Keywords optimized for new category {new_category['name']} (user {user_id})")
        
    except Exception as e:
        logger.error(f"Error optimizing keywords for new category: {e}")


async def learn_from_category_change(user_id: int, expense_id: int, new_category_id: int, description: str):
    """
    –û–±—É—á–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    """
    try:
        from expenses.models import Expense
        import re
        
        @sync_to_async
        def add_keywords_from_description():
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = ExpenseCategory.objects.get(id=new_category_id)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            words = re.findall(r'\w+', description.lower())
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞
            meaningful_words = []
            for word in words:
                if len(word) > 3 and not word.isdigit():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—É–º–º–æ–π –∏–ª–∏ —á–∏—Å–ª–æ–º
                    try:
                        float(word)
                        continue
                    except:
                        meaningful_words.append(word)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2-3 –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤–∞
            added_keywords = []
            for word in meaningful_words[:3]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                keyword, created = CategoryKeyword.objects.get_or_create(
                    category=category,
                    keyword=word
                )
                if created:
                    added_keywords.append(word)
            
            return added_keywords
        
        added = await add_keywords_from_description()
        
        if added:
            logger.info(f"Learned keywords {added} for category {new_category_id} from expense {expense_id}")
        
    except Exception as e:
        logger.error(f"Error learning from category change: {e}")


