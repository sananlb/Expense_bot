"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
"""
from typing import List, Optional
from expenses.models import ExpenseCategory, Profile
from asgiref.sync import sync_to_async
from django.db.models import Sum, Count
import logging

logger = logging.getLogger(__name__)


@sync_to_async
def get_or_create_category(user_id: int, category_name: str) -> ExpenseCategory:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã'"""
    try:
        profile = Profile.objects.get(telegram_id=user_id)
    except Profile.DoesNotExist:
        profile = Profile.objects.create(telegram_id=user_id)
    
    # –ò—â–µ–º —Å—Ä–µ–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –°–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    category = ExpenseCategory.objects.filter(
        profile=profile,
        name__iexact=category_name
    ).first()
    
    if category:
        return category
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    # –ù–∞–ø—Ä–∏–º–µ—Ä, "–∫–∞—Ñ–µ" –Ω–∞–π–¥–µ—Ç "–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã"
    categories = ExpenseCategory.objects.filter(
        profile=profile,
        name__icontains=category_name
    )
    
    if categories.exists():
        return categories.first()
    
    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
    other_category = ExpenseCategory.objects.filter(
        profile=profile,
        name__icontains='–ø—Ä–æ—á–∏–µ'
    ).first()
    
    if not other_category:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã", —Å–æ–∑–¥–∞–µ–º –µ—ë
        other_category = ExpenseCategory.objects.create(
            name='üí∞ –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã',
            icon='',
            profile=profile
        )
    
    return other_category


@sync_to_async
def get_user_categories(user_id: int) -> List[ExpenseCategory]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        profile = Profile.objects.get(telegram_id=user_id)
    except Profile.DoesNotExist:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        profile = Profile.objects.create(telegram_id=user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å refresh –∏–∑ –ë–î)
    from django.db import connection
    connection.ensure_connection()
    
    categories = ExpenseCategory.objects.filter(
        profile=profile
    ).order_by('name')
    
    # Force evaluation of queryset
    categories_count = categories.count()
    logger.info(f"get_user_categories for user {user_id}: found {categories_count} categories in DB")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã" –±—ã–ª–∏ –≤ –∫–æ–Ω—Ü–µ
    categories_list = list(categories)
    regular_categories = []
    other_category = None
    
    for cat in categories_list:
        if '–ø—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã' in cat.name.lower():
            other_category = cat
        else:
            regular_categories.append(cat)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –æ–±—ã—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∑–∞—Ç–µ–º "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
    if other_category:
        regular_categories.append(other_category)
    
    return regular_categories


@sync_to_async
def create_category(user_id: int, name: str, icon: str = 'üí∞') -> ExpenseCategory:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    from django.db import transaction
    
    with transaction.atomic():
        try:
            profile = Profile.objects.get(telegram_id=user_id)
        except Profile.DoesNotExist:
            profile = Profile.objects.create(telegram_id=user_id)
        
        # –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –∫ –Ω–∞–∑–≤–∞–Ω–∏—é
        if icon and icon.strip():
            category_name = f"{icon} {name}"
        else:
            category_name = name
        
        category = ExpenseCategory.objects.create(
            name=category_name,
            icon='',  # –ü–æ–ª–µ icon –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
            profile=profile
        )
        
        logger.info(f"Created category '{category_name}' (id: {category.id}) for user {user_id}")
        
    return category


@sync_to_async
def update_category(user_id: int, category_id: int, **kwargs) -> Optional[ExpenseCategory]:
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    try:
        category = ExpenseCategory.objects.get(
            id=category_id,
            profile__telegram_id=user_id
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        for field, value in kwargs.items():
            if hasattr(category, field):
                setattr(category, field, value)
        
        category.save()
        return category
    except ExpenseCategory.DoesNotExist:
        return None


async def update_category_name(user_id: int, category_id: int, new_name: str) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ, —á—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç
    result = await update_category(user_id, category_id, name=new_name.strip(), icon='')
    return result is not None


@sync_to_async
def delete_category(user_id: int, category_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    from django.db import transaction
    
    try:
        with transaction.atomic():
            category = ExpenseCategory.objects.get(
                id=category_id,
                profile__telegram_id=user_id
            )
            category.delete()
            logger.info(f"Deleted category {category_id} for user {user_id}")
        return True
    except ExpenseCategory.DoesNotExist:
        logger.warning(f"Category {category_id} not found for user {user_id}")
        return False


@sync_to_async
def get_category_by_id(user_id: int, category_id: int) -> Optional[ExpenseCategory]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID"""
    try:
        category = ExpenseCategory.objects.get(
            id=category_id,
            profile__telegram_id=user_id
        )
        return category
    except ExpenseCategory.DoesNotExist:
        return None


@sync_to_async
def create_default_categories(telegram_id: int) -> bool:
    """
    –°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
    Returns:
        True –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã, False –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    """
    try:
        profile = Profile.objects.get(telegram_id=telegram_id)
    except Profile.DoesNotExist:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        profile = Profile.objects.create(telegram_id=telegram_id)
        logger.info(f"Created new profile for user {telegram_id}")
    
    try:
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if ExpenseCategory.objects.filter(profile=profile).exists():
            return False
            
        # –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        default_categories = [
            ('–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ã', 'üõí'),
            ('–î—Ä—É–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã', 'ü´ë'),
            ('–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ', 'üçΩÔ∏è'),
            ('–ê–ó–°', '‚õΩ'),
            ('–¢–∞–∫—Å–∏', 'üöï'),
            ('–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'üöå'),
            ('–ê–≤—Ç–æ–º–æ–±–∏–ª—å', 'üöó'),
            ('–ñ–∏–ª—å–µ', 'üè†'),
            ('–ê–ø—Ç–µ–∫–∏', 'üíä'),
            ('–ú–µ–¥–∏—Ü–∏–Ω–∞', 'üè•'),
            ('–°–ø–æ—Ä—Ç', 'üèÉ'),
            ('–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã', 'üèÄ'),
            ('–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å', 'üëî'),
            ('–¶–≤–µ—Ç—ã', 'üåπ'),
            ('–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'üé≠'),
            ('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'üìö'),
            ('–ü–æ–¥–∞—Ä–∫–∏', 'üéÅ'),
            ('–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '‚úàÔ∏è'),
            ('–°–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç', 'üì±'),
            ('–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', 'üí∞')
        ]
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —ç–º–æ–¥–∑–∏ –≤ –ø–æ–ª–µ name
        categories = []
        for name, icon in default_categories:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            category_with_icon = f"{icon} {name}"
            category = ExpenseCategory(
                profile=profile,
                name=category_with_icon,
                icon='',  # –ü–æ–ª–µ icon –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
                is_active=True
            )
            categories.append(category)
            
        ExpenseCategory.objects.bulk_create(categories)
        return True
        
    except Profile.DoesNotExist:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –µ—â–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        profile = Profile.objects.create(telegram_id=telegram_id)
        return create_default_categories(telegram_id)
    except Exception as e:
        return False


@sync_to_async
def migrate_categories_with_emojis():
    """–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –¥–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏ –≤ –ø–æ–ª–µ name"""
    from expenses.models import ExpenseCategory
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    categories = ExpenseCategory.objects.all()
    
    for category in categories:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ
        import re
        emoji_pattern = r'^[\U0001F000-\U0001F9FF\U00002600-\U000027BF\U0001F300-\U0001F64F\U0001F680-\U0001F6FF]'
        
        if not re.match(emoji_pattern, category.name):
            # –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º
            if category.icon and category.icon.strip():
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∫–æ–Ω–∫–∞ –≤ –ø–æ–ª–µ icon, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
                category.name = f"{category.icon} {category.name}"
            else:
                # –ò–Ω–∞—á–µ –ø–æ–¥–±–∏—Ä–∞–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                icon = get_icon_for_category(category.name)
                category.name = f"{icon} {category.name}"
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ icon
            category.icon = ''
            category.save()
    
    return True


def get_icon_for_category(category_name: str) -> str:
    """–ü–æ–¥–æ–±—Ä–∞—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    category_lower = category_name.lower()
    
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∏–∫–æ–Ω–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    icon_map = {
        '—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç': 'üõí',
        '–ø—Ä–æ–¥—É–∫—Ç': 'ü•ê',
        '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': '‚òï',
        '–∫–∞—Ñ–µ': '‚òï',
        '–∞–∑—Å': '‚õΩ',
        '–∑–∞–ø—Ä–∞–≤–∫–∞': '‚õΩ',
        '—Ç–∞–∫—Å–∏': 'üöï',
        '–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'üöå',
        '–º–µ—Ç—Ä–æ': 'üöå',
        '–∞–≤—Ç–æ–±—É—Å': 'üöå',
        '–∞–≤—Ç–æ–º–æ–±–∏–ª—å': 'üöó',
        '–º–∞—à–∏–Ω–∞': 'üöó',
        '–∂–∏–ª—å–µ': 'üè†',
        '–∫–≤–∞—Ä—Ç–∏—Ä–∞': 'üè†',
        '–∞–ø—Ç–µ–∫': 'üíä',
        '–ª–µ–∫–∞—Ä—Å—Ç–≤': 'üíä',
        '–º–µ–¥–∏—Ü–∏–Ω': 'üè•',
        '–≤—Ä–∞—á': 'üè•',
        '—Å–ø–æ—Ä—Ç': '‚öΩ',
        '—Ñ–∏—Ç–Ω–µ—Å': '‚öΩ',
        '—Å–ø–æ—Ä—Ç–∏–≤–Ω': 'üèÉ',
        '–æ–¥–µ–∂–¥–∞': 'üëï',
        '–æ–±—É–≤—å': 'üëü',
        '—Ü–≤–µ—Ç': 'üå∏',
        '–±—É–∫–µ—Ç': 'üå∏',
        '—Ä–∞–∑–≤–ª–µ—á–µ–Ω': 'üé≠',
        '–∫–∏–Ω–æ': 'üé¨',
        '–æ–±—Ä–∞–∑–æ–≤–∞–Ω': 'üìö',
        '–∫—É—Ä—Å': 'üìö',
        '–ø–æ–¥–∞—Ä–∫': 'üéÅ',
        '–ø–æ–¥–∞—Ä–æ–∫': 'üéÅ',
        '–ø—É—Ç–µ—à–µ—Å—Ç–≤': '‚úàÔ∏è',
        '–æ—Ç–ø—É—Å–∫': '‚úàÔ∏è',
        '—Å–≤—è–∑—å': 'üì±',
        '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç': 'üì±',
        '—Ç–µ–ª–µ—Ñ–æ–Ω': 'üì±',
        '–ø—Ä–æ—á–µ–µ': 'üí∞',
        '–¥—Ä—É–≥–æ–µ': 'üí∞'
    }
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∏–∫–æ–Ω–∫—É
    for key, icon in icon_map.items():
        if key in category_lower:
            return icon
    
    return 'üí∞'  # –ò–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


