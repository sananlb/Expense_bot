"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –æ—Ç—á–µ—Ç–æ–≤
"""
import os
import base64
import logging
from datetime import date, datetime, timedelta
from typing import Dict, List, Optional, Tuple
from pathlib import Path
import tempfile
import asyncio
import json

from playwright.async_api import async_playwright
from jinja2 import Template
from django.conf import settings
from django.db.models import Sum, Count, Q
from dateutil.relativedelta import relativedelta

from expenses.models import Expense, ExpenseCategory, Profile, Cashback

logger = logging.getLogger(__name__)


class PDFReportService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –æ—Ç—á–µ—Ç–æ–≤"""
    
    TEMPLATE_PATH = Path(__file__).parent.parent.parent / "reports" / "templates" / "report_variant_1_modern.html"
    LOGO_PATH = Path(__file__).parent.parent.parent / "reports" / "templates" / "logo.png"
    
    def __init__(self):
        self.template = self._load_template()
    
    def _load_template(self) -> str:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å HTML —à–∞–±–ª–æ–Ω"""
        with open(self.TEMPLATE_PATH, 'r', encoding='utf-8') as f:
            content = f.read()
        return content
    
    async def generate_monthly_report(self, user_id: int, year: int, month: int) -> Optional[bytes]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            year: –ì–æ–¥ –æ—Ç—á–µ—Ç–∞
            month: –ú–µ—Å—è—Ü –æ—Ç—á–µ—Ç–∞ (1-12)
            
        Returns:
            PDF —Ñ–∞–π–ª –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            report_data = await self._prepare_report_data(user_id, year, month)
            if not report_data:
                logger.warning(f"No data for report: user_id={user_id}, year={year}, month={month}")
                return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
            html_content = await self._render_html(report_data)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PDF
            pdf_bytes = await self._html_to_pdf(html_content)
            
            return pdf_bytes
            
        except Exception as e:
            logger.error(f"Error generating PDF report: {e}")
            return None
    
    async def _prepare_report_data(self, user_id: int, year: int, month: int) -> Optional[Dict]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∏–∑ –ë–î"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile = await Profile.objects.aget(telegram_id=user_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
            start_date = date(year, month, 1)
            if month == 12:
                end_date = date(year + 1, 1, 1) - timedelta(days=1)
            else:
                end_date = date(year, month + 1, 1) - timedelta(days=1)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
            expenses = Expense.objects.filter(
                profile=profile,
                created_at__date__gte=start_date,
                created_at__date__lte=end_date
            )
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_stats = await expenses.aaggregate(
                total_amount=Sum('amount'),
                total_count=Count('id')
            )
            
            total_amount = float(total_stats['total_amount'] or 0)
            total_count = total_stats['total_count'] or 0
            
            if total_count == 0:
                return None
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category_colors = [
                '#8B4513',  # –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π
                '#4682B4',  # —Å—Ç–∞–ª—å–Ω–æ–π —Å–∏–Ω–∏–π
                '#9370DB',  # —Å—Ä–µ–¥–Ω–∏–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
                '#20B2AA',  # —Å–≤–µ—Ç–ª—ã–π –º–æ—Ä—Å–∫–æ–π
                '#F4A460',  # –ø–µ—Å–æ—á–Ω—ã–π
                '#708090',  # —Å–µ—Ä–æ-—Å–∏–Ω–∏–π
                '#DDA0DD',  # —Å–ª–∏–≤–æ–≤—ã–π
                '#B0C4DE'   # —Å–≤–µ—Ç–ª–æ-—Å—Ç–∞–ª—å–Ω–æ–π —Å–∏–Ω–∏–π
            ]
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–µ—à–±–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞
            user_cashbacks = await Cashback.objects.filter(
                profile=profile,
                month=month
            ).select_related('category').aall()
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∫–µ—à–±–µ–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            cashback_by_category = {}
            for cb in user_cashbacks:
                if cb.category_id:
                    if cb.category_id not in cashback_by_category:
                        cashback_by_category[cb.category_id] = []
                    cashback_by_category[cb.category_id].append(cb)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-7 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            categories_stats = expenses.values('category__id', 'category__name', 'category__icon').annotate(
                amount=Sum('amount')
            ).order_by('-amount')
            
            top_categories = []
            other_amount = 0
            other_cashback = 0
            
            idx = 0
            async for cat_stat in categories_stats:
                if idx < 7:
                    amount = float(cat_stat['amount'])
                    category_id = cat_stat['category__id']
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–µ—à–±–µ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    category_cashback = 0
                    if category_id in cashback_by_category:
                        for cb in cashback_by_category[category_id]:
                            cb_amount = amount
                            if cb.limit_amount and cb.limit_amount > 0:
                                cb_amount = min(amount, float(cb.limit_amount))
                            category_cashback += cb_amount * (cb.cashback_percent / 100)
                    
                    top_categories.append({
                        'name': cat_stat['category__name'],
                        'icon': cat_stat['category__icon'] or 'üìä',
                        'amount': amount,
                        'cashback': category_cashback,
                        'color': category_colors[idx] if idx < len(category_colors) else '#95a5a6'
                    })
                else:
                    amount = float(cat_stat['amount'])
                    category_id = cat_stat['category__id']
                    other_amount += amount
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–µ—à–±–µ–∫ –¥–ª—è "–î—Ä—É–≥–æ–µ"
                    if category_id in cashback_by_category:
                        for cb in cashback_by_category[category_id]:
                            cb_amount = amount
                            if cb.limit_amount and cb.limit_amount > 0:
                                cb_amount = min(amount, float(cb.limit_amount))
                            other_cashback += cb_amount * (cb.cashback_percent / 100)
                
                idx += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º "–î—Ä—É–≥–æ–µ" –µ—Å–ª–∏ –µ—Å—Ç—å
            if other_amount > 0:
                top_categories.append({
                    'name': '–î—Ä—É–≥–æ–µ',
                    'icon': 'üîç',
                    'amount': other_amount,
                    'cashback': other_cashback,
                    'color': '#95a5a6'
                })
            
            # –†–∞—Å—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º
            daily_expenses = {}
            daily_categories = {}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            expenses_list = expenses.select_related('category')
            async for expense in expenses_list:
                day = expense.created_at.date().day
                
                if day not in daily_expenses:
                    daily_expenses[day] = 0
                    daily_categories[day] = {}
                
                daily_expenses[day] += float(expense.amount)
                
                cat_name = expense.category.name
                if cat_name not in daily_categories[day]:
                    daily_categories[day][cat_name] = 0
                daily_categories[day][cat_name] += float(expense.amount)
            
            # –û–±—â–∏–π –∫–µ—à–±–µ–∫
            total_cashback = sum(cat['cashback'] for cat in top_categories)
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–µ—Å—è—Ü–µ–º
            prev_month = month - 1 if month > 1 else 12
            prev_year = year if month > 1 else year - 1
            
            prev_start = date(prev_year, prev_month, 1)
            if prev_month == 12:
                prev_end = date(prev_year + 1, 1, 1) - timedelta(days=1)
            else:
                prev_end = date(prev_year, prev_month + 1, 1) - timedelta(days=1)
            
            prev_total = await Expense.objects.filter(
                profile=profile,
                created_at__date__gte=prev_start,
                created_at__date__lte=prev_end
            ).aaggregate(total=Sum('amount'))
            
            prev_amount = float(prev_total['total'] or 0)
            
            if prev_amount > 0:
                change_percent = round((total_amount - prev_amount) / prev_amount * 100, 1)
                change_direction = "‚Üë" if change_percent > 0 else "‚Üì"
            else:
                change_percent = 0
                change_direction = ""
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
                      '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']
            
            prev_months = ['—è–Ω–≤–∞—Ä—é', '—Ñ–µ–≤—Ä–∞–ª—é', '–º–∞—Ä—Ç—É', '–∞–ø—Ä–µ–ª—é', '–º–∞—é', '–∏—é–Ω—é',
                           '–∏—é–ª—é', '–∞–≤–≥—É—Å—Ç—É', '—Å–µ–Ω—Ç—è–±—Ä—é', '–æ–∫—Ç—è–±—Ä—é', '–Ω–æ—è–±—Ä—é', '–¥–µ–∫–∞–±—Ä—é']
            
            report_data = {
                'period': f"1 - {end_date.day} {months[month-1]} {year}",
                'total_amount': f"{total_amount:,.0f}",
                'total_count': total_count,
                'total_cashback': f"{total_cashback:,.0f}",
                'change_percent': abs(change_percent),
                'change_direction': change_direction,
                'prev_month_name': prev_months[prev_month-1],
                'categories': top_categories,
                'daily_expenses': daily_expenses,
                'daily_categories': daily_categories,
                'days_in_month': end_date.day,
                'logo_base64': await self._get_logo_base64()
            }
            
            return report_data
            
        except Profile.DoesNotExist:
            logger.error(f"Profile not found for user_id: {user_id}")
            return None
        except Exception as e:
            logger.error(f"Error preparing report data: {e}")
            return None
    
    async def _get_logo_base64(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø –≤ base64"""
        try:
            with open(self.LOGO_PATH, 'rb') as f:
                logo_bytes = f.read()
            return base64.b64encode(logo_bytes).decode('utf-8')
        except:
            return ""
    
    async def _render_html(self, report_data: Dict) -> str:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ HTML –∏–∑ —à–∞–±–ª–æ–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏"""
        html = self.template
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        html = html.replace('–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: 1 - 31 –æ–∫—Ç—è–±—Ä—è 2024', f'–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: {report_data["period"]}')
        html = html.replace('45,320 ‚ÇΩ', f'{report_data["total_amount"]} ‚ÇΩ')
        html = html.replace('<p class="summary-value">127</p>', f'<p class="summary-value">{report_data["total_count"]}</p>')
        html = html.replace('2,420 ‚ÇΩ', f'{report_data["total_cashback"]} ‚ÇΩ')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–µ—Å—è—Ü–µ–º
        if report_data['change_direction']:
            trend_class = 'trend-up' if report_data['change_direction'] == '‚Üë' else 'trend-down'
            trend_html = f'<p class="summary-trend {trend_class}">{report_data["change_direction"]} {report_data["change_percent"]}% –∫ {report_data["prev_month_name"]}</p>'
            html = html.replace('<p class="summary-trend trend-up">‚Üë 12% –∫ —Å–µ–Ω—Ç—è–±—Ä—é</p>', trend_html)
        else:
            html = html.replace('<p class="summary-trend trend-up">‚Üë 12% –∫ —Å–µ–Ω—Ç—è–±—Ä—é</p>', '')
        
        # –ó–∞–º–µ–Ω—è–µ–º src="logo.png" –Ω–∞ base64
        if report_data.get('logo_base64'):
            html = html.replace(
                'src="logo.png"',
                f'src="data:image/png;base64,{report_data["logo_base64"]}"'
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories_html = ""
        for cat in report_data['categories']:
            categories_html += f"""
                    <div class="category-item">
                        <div class="category-info">
                            <div class="category-color" style="background: {cat['color']}"></div>
                            <span class="category-name">{cat['icon']} {cat['name']}</span>
                        </div>
                        <div class="category-right">
                            <div class="category-amount">{cat['amount']:,.0f} ‚ÇΩ</div>
                            <div class="category-cashback">+{cat['cashback']:,.0f} ‚ÇΩ –∫–µ—à–±–µ–∫</div>
                        </div>
                    </div>"""
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º –±–ª–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        start_marker = '<div class="categories-list">'
        end_marker = '</div>\n            </div>\n        </div>'
        start_idx = html.find(start_marker) + len(start_marker)
        end_idx = html.find(end_marker, start_idx)
        html = html[:start_idx] + categories_html + '\n                ' + html[end_idx:]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º JavaScript
        html = self._update_chart_data(html, report_data)
        
        return html
    
    def _update_chart_data(self, html: str, report_data: Dict) -> str:
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ JavaScript"""
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        categories_data = report_data['categories']
        pie_labels = [cat['name'] for cat in categories_data]
        pie_data = [cat['amount'] for cat in categories_data]
        pie_colors = [cat['color'] for cat in categories_data]
        
        days = list(range(1, report_data['days_in_month'] + 1))
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è stacked bar chart
        category_datasets = []
        for cat in categories_data:
            cat_name = cat['name']
            cat_data = []
            
            for day in days:
                if day in report_data['daily_categories']:
                    amount = report_data['daily_categories'][day].get(cat_name, 0)
                    cat_data.append(amount)
                else:
                    cat_data.append(0)
            
            category_datasets.append({
                'label': cat_name,
                'data': cat_data,
                'backgroundColor': cat['color'],
                'borderWidth': 0
            })
        
        # –ö–µ—à–±–µ–∫ –¥–∞–Ω–Ω—ã–µ - —Å—á–∏—Ç–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞ –¥–µ–Ω—å
        cashback_data = []
        for day in days:
            day_cashback = 0
            if day in report_data['daily_categories']:
                for cat_name, cat_amount in report_data['daily_categories'][day].items():
                    # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–ø–∏—Å–∫–µ top_categories —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—ë –∫–µ—à–±–µ–∫
                    for cat in categories_data:
                        if cat['name'] == cat_name and cat['cashback'] > 0:
                            # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–µ—à–±–µ–∫
                            if cat['amount'] > 0:
                                cashback_rate = cat['cashback'] / cat['amount']
                                day_cashback += cat_amount * cashback_rate
                            break
            cashback_data.append(round(-day_cashback, 2))  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–Ω–∏–∑
        
        # –ó–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JavaScript
        js_replacement = f"""
        // Pie Chart
        const pieCtx = document.getElementById('pieChart').getContext('2d');
        new Chart(pieCtx, {{
            type: 'doughnut',
            data: {{
                labels: {json.dumps(pie_labels, ensure_ascii=False)},
                datasets: [{{
                    data: {json.dumps(pie_data)},
                    backgroundColor: {json.dumps(pie_colors)},
                    borderWidth: 0
                }}]
            }},
            options: {{
                responsive: true,
                maintainAspectRatio: false,
                plugins: {{
                    legend: {{
                        position: 'bottom',
                        labels: {{
                            padding: 10,
                            font: {{
                                size: 11
                            }},
                            boxWidth: 12,
                            usePointStyle: true
                        }},
                        fullSize: true,
                        maxHeight: 50
                    }}
                }}
            }}
        }});
        
        // Stacked Bar Chart with Cashback
        const barCtx = document.getElementById('barChart').getContext('2d');
        const categoryDatasets = {json.dumps(category_datasets, ensure_ascii=False)};
        const cashbackDataset = {{
            label: '–ö–µ—à–±–µ–∫',
            data: {json.dumps(cashback_data)},
            backgroundColor: '#10b981',
            borderWidth: 0
        }};
        
        new Chart(barCtx, {{
            type: 'bar',
            data: {{
                labels: {json.dumps(days)},
                datasets: [...categoryDatasets, cashbackDataset]
            }},
            options: {{
                responsive: true,
                maintainAspectRatio: false,
                plugins: {{
                    legend: {{
                        display: false
                    }},
                    tooltip: {{
                        callbacks: {{
                            title: function(context) {{
                                return context[0].label + ' —á–∏—Å–ª–æ';
                            }},
                            label: function(context) {{
                                const value = Math.abs(context.parsed.y);
                                return context.dataset.label + ': ' + value + ' ‚ÇΩ';
                            }}
                        }}
                    }}
                }},
                scales: {{
                    x: {{
                        stacked: true,
                        grid: {{
                            display: false
                        }},
                        ticks: {{
                            maxRotation: 0,
                            callback: function(value, index) {{
                                return (index + 1) % 5 === 0 ? index + 1 : '';
                            }}
                        }}
                    }},
                    y: {{
                        stacked: true,
                        beginAtZero: true,
                        ticks: {{
                            callback: function(value) {{
                                return Math.abs(value) + ' ‚ÇΩ';
                            }}
                        }}
                    }}
                }}
            }}
        }});
        """
        
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –∑–∞–º–µ–Ω—ã JavaScript
        script_start = html.find('<script>') + 8
        script_end = html.find('</script>')
        
        # –ó–∞–º–µ–Ω—è–µ–º JavaScript
        html = html[:script_start] + js_replacement + html[script_end:]
        
        return html
    
    async def _html_to_pdf(self, html_content: str) -> bytes:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è HTML –≤ PDF –∏—Å–ø–æ–ª—å–∑—É—è Playwright"""
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=True)
            page = await browser.new_page()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º HTML
            await page.set_content(html_content, wait_until='networkidle')
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            await page.wait_for_timeout(2000)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
            pdf_bytes = await page.pdf(
                format='A4',
                print_background=True,
                margin={'top': '20px', 'bottom': '20px', 'left': '20px', 'right': '20px'}
            )
            
            await browser.close()
            
            return pdf_bytes