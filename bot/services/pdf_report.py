"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –æ—Ç—á–µ—Ç–æ–≤
"""
import os
import base64
import logging
from datetime import date, datetime, timedelta
from typing import Dict, List, Optional, Tuple
from pathlib import Path
import tempfile
import asyncio
import json

from playwright.async_api import async_playwright
from jinja2 import Template
from django.conf import settings
from django.db.models import Sum, Count, Q
from dateutil.relativedelta import relativedelta

from expenses.models import Expense, ExpenseCategory, Profile, Cashback

logger = logging.getLogger(__name__)


class PDFReportService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –æ—Ç—á–µ—Ç–æ–≤"""
    
    TEMPLATE_PATH = Path(__file__).parent.parent.parent / "reports" / "templates" / "report_modern.html"
    LOGO_PATH = Path(__file__).parent.parent.parent / "reports" / "templates" / "logo.png"
    
    def __init__(self):
        self.template = self._load_template()
    
    def _load_template(self) -> Template:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å HTML —à–∞–±–ª–æ–Ω"""
        with open(self.TEMPLATE_PATH, 'r', encoding='utf-8') as f:
            content = f.read()
        return Template(content)
    
    async def generate_monthly_report(self, user_id: int, year: int, month: int) -> Optional[bytes]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            year: –ì–æ–¥ –æ—Ç—á–µ—Ç–∞
            month: –ú–µ—Å—è—Ü –æ—Ç—á–µ—Ç–∞ (1-12)
            
        Returns:
            PDF —Ñ–∞–π–ª –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            report_data = await self._prepare_report_data(user_id, year, month)
            if not report_data:
                logger.warning(f"No data for report: user_id={user_id}, year={year}, month={month}")
                return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
            html_content = await self._render_html(report_data)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PDF
            pdf_bytes = await self._html_to_pdf(html_content)
            
            return pdf_bytes
            
        except Exception as e:
            logger.error(f"Error generating PDF report: {e}")
            return None
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                profile = await Profile.objects.select_related('settings').aget(telegram_id=user_id)
            except Profile.DoesNotExist:
                logger.warning(f"Profile not found for user {user_id}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
            expenses = Expense.objects.filter(
                profile=profile,
                expense_date__gte=start_date,
                expense_date__lte=end_date
            )
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_stats = await expenses.aaggregate(
                total_amount=Sum('amount'),
                total_count=Count('id')
            )
            
            total_amount = float(total_stats['total_amount'] or 0)
            total_count = total_stats['total_count'] or 0
            
            if total_count == 0:
                logger.warning(f"No expenses found for user {user_id} in period {start_date} to {end_date}")
                return None
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories_stats = []
            async for stat in expenses.values('category').annotate(
                total=Sum('amount'),
                count=Count('id')
            ).order_by('-total').aiterator():
                categories_stats.append(stat)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ –∫–µ—à–±—ç–∫–∞—Ö
            categories_data = []
            colors = ['#8B4513', '#4682B4', '#9370DB', '#20B2AA', '#FFD700', 
                      '#FF6347', '#32CD32', '#FF69B4', '#87CEEB']
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: —Ç–æ–ø-8 + –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤ "–î—Ä—É–≥–∏–µ"
            other_amount = 0
            other_cashback = 0
            
            for i, stat in enumerate(categories_stats):
                if i < 8:  # –¢–æ–ø-8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    if stat['category']:
                        category = await ExpenseCategory.objects.aget(id=stat['category'])
                        name = category.name
                        icon = category.icon or 'üí∞'
                    else:
                        name = '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
                        icon = 'üí∞'
                    
                    # –°—á–∏—Ç–∞–µ–º –∫–µ—à–±—ç–∫
                    cashback = 0
                    if stat['category']:
                        try:
                            cashback_obj = await Cashback.objects.aget(
                                profile=profile,
                                category_id=stat['category']
                            )
                            cashback = float(stat['total']) * float(cashback_obj.percent) / 100
                        except Cashback.DoesNotExist:
                            pass
                    
                    categories_data.append({
                        'name': name,
                        'icon': icon,
                        'amount': float(stat['total']),
                        'amount_formatted': f"{float(stat['total']):,.0f}",
                        'percent': (float(stat['total']) / total_amount * 100) if total_amount > 0 else 0,
                        'cashback': cashback,
                        'cashback_formatted': f"{cashback:,.0f}",
                        'color': colors[i]
                    })
                else:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ "–î—Ä—É–≥–∏–µ"
                    other_amount += float(stat['total'])
                    
                    # –°—á–∏—Ç–∞–µ–º –∫–µ—à–±—ç–∫ –¥–ª—è "–î—Ä—É–≥–∏—Ö"
                    if stat['category']:
                        try:
                            category = await ExpenseCategory.objects.aget(id=stat['category'])
                            cashback_obj = await Cashback.objects.aget(
                                profile=profile,
                                category=category
                            )
                            other_cashback += float(stat['total']) * float(cashback_obj.percent) / 100
                        except (Cashback.DoesNotExist, ExpenseCategory.DoesNotExist):
                            pass
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã" –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã
            if other_amount > 0:
                categories_data.append({
                    'name': '–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
                    'icon': 'üìä',
                    'amount': other_amount,
                    'amount_formatted': f"{other_amount:,.0f}",
                    'percent': (other_amount / total_amount * 100) if total_amount > 0 else 0,
                    'cashback': other_cashback,
                    'cashback_formatted': f"{other_cashback:,.0f}",
                    'color': colors[8]
                })
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
            days_in_period = (end_date - start_date).days + 1
            daily_expenses = [0] * days_in_period
            daily_cashback = [0] * days_in_period
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ —Å–ø–∏—Å–æ–∫
            expenses_list = []
            async for expense in expenses.select_related('category').aiterator():
                expenses_list.append(expense)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã
            for expense in expenses_list:
                day_index = (expense.expense_date - start_date).days
                if 0 <= day_index < days_in_period:
                    daily_expenses[day_index] += float(expense.amount)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–∏–æ–¥–∞
            if title:
                period_text = title
            elif (end_date - start_date).days == 6:
                # –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
                period_text = f"{start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}"
            else:
                period_text = f"{start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            return {
                'period': period_text,
                'total_amount': f"{total_amount:,.0f}",
                'total_count': total_count,
                'total_cashback': f"{sum(cat['cashback'] for cat in categories_data):,.0f}",
                'categories': categories_data,
                'categories_json': json.dumps(categories_data, ensure_ascii=False),
                'daily_json': json.dumps({
                    'days': list(range(1, days_in_period + 1)),
                    'expenses': daily_expenses,
                    'cashback': daily_cashback
                }, ensure_ascii=False),
                'change_direction': '',
                'change_percent': 0,
                'prev_month_name': '',
                'logo_base64': await self._get_logo_base64()
            }
            
        except Exception as e:
            logger.error(f"Error preparing period report data: {e}")
            return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
            html_content = await self._render_html(report_data)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PDF
            pdf_bytes = await self._html_to_pdf(html_content)
            
            return pdf_bytes
            
        except Exception as e:
            logger.error(f"Error generating PDF report: {e}")
            return None
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                profile = await Profile.objects.select_related('settings').aget(telegram_id=user_id)
            except Profile.DoesNotExist:
                logger.warning(f"Profile not found for user {user_id}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
            expenses = Expense.objects.filter(
                profile=profile,
                expense_date__gte=start_date,
                expense_date__lte=end_date
            )
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_stats = await expenses.aaggregate(
                total_amount=Sum('amount'),
                total_count=Count('id')
            )
            
            total_amount = float(total_stats['total_amount'] or 0)
            total_count = total_stats['total_count'] or 0
            
            if total_count == 0:
                logger.warning(f"No expenses found for user {user_id} in period {start_date} to {end_date}")
                return None
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories_stats = []
            async for stat in expenses.values('category').annotate(
                total=Sum('amount'),
                count=Count('id')
            ).order_by('-total').aiterator():
                categories_stats.append(stat)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ –∫–µ—à–±—ç–∫–∞—Ö
            categories_data = []
            colors = ['#8B4513', '#4682B4', '#9370DB', '#20B2AA', '#FFD700', 
                      '#FF6347', '#32CD32', '#FF69B4', '#87CEEB']
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: —Ç–æ–ø-8 + –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤ "–î—Ä—É–≥–∏–µ"
            other_amount = 0
            other_cashback = 0
            
            for i, stat in enumerate(categories_stats):
                if i < 8:  # –¢–æ–ø-8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    if stat['category']:
                        category = await ExpenseCategory.objects.aget(id=stat['category'])
                        name = category.name
                        icon = category.icon or 'üí∞'
                    else:
                        name = '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
                        icon = 'üí∞'
                    
                    # –°—á–∏—Ç–∞–µ–º –∫–µ—à–±—ç–∫
                    cashback = 0
                    if stat['category']:
                        try:
                            cashback_obj = await Cashback.objects.aget(
                                profile=profile,
                                category_id=stat['category']
                            )
                            cashback = float(stat['total']) * float(cashback_obj.percent) / 100
                        except Cashback.DoesNotExist:
                            pass
                    
                    categories_data.append({
                        'name': name,
                        'icon': icon,
                        'amount': float(stat['total']),
                        'amount_formatted': f"{float(stat['total']):,.0f}",
                        'percent': (float(stat['total']) / total_amount * 100) if total_amount > 0 else 0,
                        'cashback': cashback,
                        'cashback_formatted': f"{cashback:,.0f}",
                        'color': colors[i]
                    })
                else:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ "–î—Ä—É–≥–∏–µ"
                    other_amount += float(stat['total'])
                    
                    # –°—á–∏—Ç–∞–µ–º –∫–µ—à–±—ç–∫ –¥–ª—è "–î—Ä—É–≥–∏—Ö"
                    if stat['category']:
                        try:
                            category = await ExpenseCategory.objects.aget(id=stat['category'])
                            cashback_obj = await Cashback.objects.aget(
                                profile=profile,
                                category=category
                            )
                            other_cashback += float(stat['total']) * float(cashback_obj.percent) / 100
                        except (Cashback.DoesNotExist, ExpenseCategory.DoesNotExist):
                            pass
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã" –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã
            if other_amount > 0:
                categories_data.append({
                    'name': '–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
                    'icon': 'üìä',
                    'amount': other_amount,
                    'amount_formatted': f"{other_amount:,.0f}",
                    'percent': (other_amount / total_amount * 100) if total_amount > 0 else 0,
                    'cashback': other_cashback,
                    'cashback_formatted': f"{other_cashback:,.0f}",
                    'color': colors[8]
                })
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
            days_in_period = (end_date - start_date).days + 1
            daily_expenses = [0] * days_in_period
            daily_cashback = [0] * days_in_period
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ —Å–ø–∏—Å–æ–∫
            expenses_list = []
            async for expense in expenses.select_related('category').aiterator():
                expenses_list.append(expense)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã
            for expense in expenses_list:
                day_index = (expense.expense_date - start_date).days
                if 0 <= day_index < days_in_period:
                    daily_expenses[day_index] += float(expense.amount)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–∏–æ–¥–∞
            if title:
                period_text = title
            elif (end_date - start_date).days == 6:
                # –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
                period_text = f"{start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}"
            else:
                period_text = f"{start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            return {
                'period': period_text,
                'total_amount': f"{total_amount:,.0f}",
                'total_count': total_count,
                'total_cashback': f"{sum(cat['cashback'] for cat in categories_data):,.0f}",
                'categories': categories_data,
                'categories_json': json.dumps(categories_data, ensure_ascii=False),
                'daily_json': json.dumps({
                    'days': list(range(1, days_in_period + 1)),
                    'expenses': daily_expenses,
                    'cashback': daily_cashback
                }, ensure_ascii=False),
                'change_direction': '',
                'change_percent': 0,
                'prev_month_name': '',
                'logo_base64': await self._get_logo_base64()
            }
            
        except Exception as e:
            logger.error(f"Error preparing period report data: {e}")
            return None
    
    async def _prepare_report_data(self, user_id: int, year: int, month: int) -> Optional[Dict]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∏–∑ –ë–î"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                profile = await Profile.objects.select_related('settings').aget(telegram_id=user_id)
            except Profile.DoesNotExist:
                logger.warning(f"Profile not found for user {user_id}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
            expenses = Expense.objects.filter(
                profile=profile,
                expense_date__gte=start_date,
                expense_date__lte=end_date
            )
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_stats = await expenses.aaggregate(
                total_amount=Sum('amount'),
                total_count=Count('id')
            )
            
            total_amount = float(total_stats['total_amount'] or 0)
            total_count = total_stats['total_count'] or 0
            
            if total_count == 0:
                logger.warning(f"No expenses found for user {user_id} in period {start_date} to {end_date}")
                return None
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories_stats = []
            async for stat in expenses.values('category').annotate(
                total=Sum('amount'),
                count=Count('id')
            ).order_by('-total').aiterator():
                categories_stats.append(stat)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ –∫–µ—à–±—ç–∫–∞—Ö
            categories_data = []
            colors = ['#8B4513', '#4682B4', '#9370DB', '#20B2AA', '#FFD700', 
                      '#FF6347', '#32CD32', '#FF69B4', '#87CEEB']
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: —Ç–æ–ø-8 + –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤ "–î—Ä—É–≥–∏–µ"
            other_amount = 0
            other_cashback = 0
            
            for i, stat in enumerate(categories_stats):
                if i < 8:  # –¢–æ–ø-8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    if stat['category']:
                        category = await ExpenseCategory.objects.aget(id=stat['category'])
                        name = category.name
                        icon = category.icon or 'üí∞'
                    else:
                        name = '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
                        icon = 'üí∞'
                    
                    # –°—á–∏—Ç–∞–µ–º –∫–µ—à–±—ç–∫
                    cashback = 0
                    if stat['category']:
                        try:
                            cashback_obj = await Cashback.objects.aget(
                                profile=profile,
                                category_id=stat['category']
                            )
                            cashback = float(stat['total']) * float(cashback_obj.percent) / 100
                        except Cashback.DoesNotExist:
                            pass
                    
                    categories_data.append({
                        'name': name,
                        'icon': icon,
                        'amount': float(stat['total']),
                        'amount_formatted': f"{float(stat['total']):,.0f}",
                        'percent': (float(stat['total']) / total_amount * 100) if total_amount > 0 else 0,
                        'cashback': cashback,
                        'cashback_formatted': f"{cashback:,.0f}",
                        'color': colors[i]
                    })
                else:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ "–î—Ä—É–≥–∏–µ"
                    other_amount += float(stat['total'])
                    
                    # –°—á–∏—Ç–∞–µ–º –∫–µ—à–±—ç–∫ –¥–ª—è "–î—Ä—É–≥–∏—Ö"
                    if stat['category']:
                        try:
                            category = await ExpenseCategory.objects.aget(id=stat['category'])
                            cashback_obj = await Cashback.objects.aget(
                                profile=profile,
                                category=category
                            )
                            other_cashback += float(stat['total']) * float(cashback_obj.percent) / 100
                        except (Cashback.DoesNotExist, ExpenseCategory.DoesNotExist):
                            pass
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã" –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã
            if other_amount > 0:
                categories_data.append({
                    'name': '–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
                    'icon': 'üìä',
                    'amount': other_amount,
                    'amount_formatted': f"{other_amount:,.0f}",
                    'percent': (other_amount / total_amount * 100) if total_amount > 0 else 0,
                    'cashback': other_cashback,
                    'cashback_formatted': f"{other_cashback:,.0f}",
                    'color': colors[8]
                })
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
            days_in_period = (end_date - start_date).days + 1
            daily_expenses = [0] * days_in_period
            daily_cashback = [0] * days_in_period
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ —Å–ø–∏—Å–æ–∫
            expenses_list = []
            async for expense in expenses.select_related('category').aiterator():
                expenses_list.append(expense)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã
            for expense in expenses_list:
                day_index = (expense.expense_date - start_date).days
                if 0 <= day_index < days_in_period:
                    daily_expenses[day_index] += float(expense.amount)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–∏–æ–¥–∞
            if title:
                period_text = title
            elif (end_date - start_date).days == 6:
                # –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
                period_text = f"{start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}"
            else:
                period_text = f"{start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            return {
                'period': period_text,
                'total_amount': f"{total_amount:,.0f}",
                'total_count': total_count,
                'total_cashback': f"{sum(cat['cashback'] for cat in categories_data):,.0f}",
                'categories': categories_data,
                'categories_json': json.dumps(categories_data, ensure_ascii=False),
                'daily_json': json.dumps({
                    'days': list(range(1, days_in_period + 1)),
                    'expenses': daily_expenses,
                    'cashback': daily_cashback
                }, ensure_ascii=False),
                'change_direction': '',
                'change_percent': 0,
                'prev_month_name': '',
                'logo_base64': await self._get_logo_base64()
            }
            
        except Exception as e:
            logger.error(f"Error preparing period report data: {e}")
            return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
            html_content = await self._render_html(report_data)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PDF
            pdf_bytes = await self._html_to_pdf(html_content)
            
            return pdf_bytes
            
        except Exception as e:
            logger.error(f"Error generating period PDF report: {e}")
            return None
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                profile = await Profile.objects.select_related('settings').aget(telegram_id=user_id)
            except Profile.DoesNotExist:
                logger.warning(f"Profile not found for user {user_id}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
            expenses = Expense.objects.filter(
                profile=profile,
                expense_date__gte=start_date,
                expense_date__lte=end_date
            )
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_stats = await expenses.aaggregate(
                total_amount=Sum('amount'),
                total_count=Count('id')
            )
            
            total_amount = float(total_stats['total_amount'] or 0)
            total_count = total_stats['total_count'] or 0
            
            if total_count == 0:
                logger.warning(f"No expenses found for user {user_id} in period {start_date} to {end_date}")
                return None
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories_stats = []
            async for stat in expenses.values('category').annotate(
                total=Sum('amount'),
                count=Count('id')
            ).order_by('-total').aiterator():
                categories_stats.append(stat)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ –∫–µ—à–±—ç–∫–∞—Ö
            categories_data = []
            colors = ['#8B4513', '#4682B4', '#9370DB', '#20B2AA', '#FFD700', 
                      '#FF6347', '#32CD32', '#FF69B4', '#87CEEB']
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: —Ç–æ–ø-8 + –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤ "–î—Ä—É–≥–∏–µ"
            other_amount = 0
            other_cashback = 0
            
            for i, stat in enumerate(categories_stats):
                if i < 8:  # –¢–æ–ø-8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    if stat['category']:
                        category = await ExpenseCategory.objects.aget(id=stat['category'])
                        name = category.name
                        icon = category.icon or 'üí∞'
                    else:
                        name = '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
                        icon = 'üí∞'
                    
                    # –°—á–∏—Ç–∞–µ–º –∫–µ—à–±—ç–∫
                    cashback = 0
                    if stat['category']:
                        try:
                            cashback_obj = await Cashback.objects.aget(
                                profile=profile,
                                category_id=stat['category']
                            )
                            cashback = float(stat['total']) * float(cashback_obj.percent) / 100
                        except Cashback.DoesNotExist:
                            pass
                    
                    categories_data.append({
                        'name': name,
                        'icon': icon,
                        'amount': float(stat['total']),
                        'amount_formatted': f"{float(stat['total']):,.0f}",
                        'percent': (float(stat['total']) / total_amount * 100) if total_amount > 0 else 0,
                        'cashback': cashback,
                        'cashback_formatted': f"{cashback:,.0f}",
                        'color': colors[i]
                    })
                else:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ "–î—Ä—É–≥–∏–µ"
                    other_amount += float(stat['total'])
                    
                    # –°—á–∏—Ç–∞–µ–º –∫–µ—à–±—ç–∫ –¥–ª—è "–î—Ä—É–≥–∏—Ö"
                    if stat['category']:
                        try:
                            category = await ExpenseCategory.objects.aget(id=stat['category'])
                            cashback_obj = await Cashback.objects.aget(
                                profile=profile,
                                category=category
                            )
                            other_cashback += float(stat['total']) * float(cashback_obj.percent) / 100
                        except (Cashback.DoesNotExist, ExpenseCategory.DoesNotExist):
                            pass
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã" –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã
            if other_amount > 0:
                categories_data.append({
                    'name': '–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
                    'icon': 'üìä',
                    'amount': other_amount,
                    'amount_formatted': f"{other_amount:,.0f}",
                    'percent': (other_amount / total_amount * 100) if total_amount > 0 else 0,
                    'cashback': other_cashback,
                    'cashback_formatted': f"{other_cashback:,.0f}",
                    'color': colors[8]
                })
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
            days_in_period = (end_date - start_date).days + 1
            daily_expenses = [0] * days_in_period
            daily_cashback = [0] * days_in_period
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ —Å–ø–∏—Å–æ–∫
            expenses_list = []
            async for expense in expenses.select_related('category').aiterator():
                expenses_list.append(expense)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã
            for expense in expenses_list:
                day_index = (expense.expense_date - start_date).days
                if 0 <= day_index < days_in_period:
                    daily_expenses[day_index] += float(expense.amount)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–∏–æ–¥–∞
            if title:
                period_text = title
            elif (end_date - start_date).days == 6:
                # –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
                period_text = f"{start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}"
            else:
                period_text = f"{start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            return {
                'period': period_text,
                'total_amount': f"{total_amount:,.0f}",
                'total_count': total_count,
                'total_cashback': f"{sum(cat['cashback'] for cat in categories_data):,.0f}",
                'categories': categories_data,
                'categories_json': json.dumps(categories_data, ensure_ascii=False),
                'daily_json': json.dumps({
                    'days': list(range(1, days_in_period + 1)),
                    'expenses': daily_expenses,
                    'cashback': daily_cashback
                }, ensure_ascii=False),
                'change_direction': '',
                'change_percent': 0,
                'prev_month_name': '',
                'logo_base64': await self._get_logo_base64()
            }
            
        except Exception as e:
            logger.error(f"Error preparing period report data: {e}")
            return None
    
    async def _get_logo_base64(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø –≤ base64"""
        try:
            with open(self.LOGO_PATH, 'rb') as f:
                logo_bytes = f.read()
            return base64.b64encode(logo_bytes).decode('utf-8')
        except:
            return ""
    
    async def _render_html(self, report_data: Dict) -> str:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ HTML –∏–∑ —à–∞–±–ª–æ–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏"""
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        categories_json = json.dumps(report_data['categories'], ensure_ascii=False)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        daily_json = {
            'days': list(range(1, report_data['days_in_month'] + 1)),
            'expenses': report_data['daily_expenses'],
            'cashback': []
        }
        
        # –°—á–∏—Ç–∞–µ–º –∫–µ—à–±–µ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        for day in daily_json['days']:
            day_cashback = 0
            if day in report_data.get('daily_categories', {}):
                for cat_name, cat_amount in report_data['daily_categories'][day].items():
                    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –µ—ë –∫–µ—à–±–µ–∫
                    for cat in report_data['categories']:
                        if cat['name'] == cat_name and cat['cashback'] > 0:
                            if cat['amount'] > 0:
                                cashback_rate = cat['cashback'] / cat['amount']
                                day_cashback += cat_amount * cashback_rate
                            break
            daily_json['cashback'].append(round(day_cashback, 2))
        
        # –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏
        html = self.template.render(
            period=report_data['period'],
            total_amount=report_data['total_amount'],
            total_count=report_data['total_count'],
            total_cashback=report_data['total_cashback'],
            change_direction=report_data.get('change_direction', ''),
            change_percent=report_data.get('change_percent', 0),
            prev_month_name=report_data.get('prev_month_name', ''),
            categories=report_data['categories'],
            logo_base64=report_data.get('logo_base64', ''),
            categories_json=categories_json,
            daily_json=json.dumps(daily_json, ensure_ascii=False)
        )
        
        return html
    
    async def _html_to_pdf(self, html_content: str) -> bytes:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è HTML –≤ PDF –∏—Å–ø–æ–ª—å–∑—É—è Playwright"""
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=True)
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –¥–ª—è –ª—É—á—à–µ–π —á–µ—Ç–∫–æ—Å—Ç–∏
            page = await browser.new_page(
                viewport={'width': 1920, 'height': 1080},
                device_scale_factor=2  # –£–¥–≤–∞–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏
            )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º HTML
            await page.set_content(html_content, wait_until='networkidle')
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            await page.wait_for_timeout(2000)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            pdf_bytes = await page.pdf(
                format='A4',
                print_background=True,
                margin={'top': '10px', 'bottom': '10px', 'left': '15px', 'right': '15px'},
                scale=0.95  # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è –ª—É—á—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            )
            
            await browser.close()
            
            return pdf_bytes