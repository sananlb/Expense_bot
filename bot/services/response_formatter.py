"""
Unified formatter for function-call results used by AI services.
"""
from __future__ import annotations

from typing import Dict, List


def _format_expenses_list(result: Dict, title: str, subtitle: str) -> str:
    from bot.utils.expense_formatter import format_expenses_from_dict_list
    expenses = result.get('expenses', [])
    return format_expenses_from_dict_list(
        expenses,
        title=title,
        subtitle=subtitle,
        max_expenses=100,
    )


def _format_incomes_list(result: Dict, title: str, subtitle: str) -> str:
    from bot.utils.income_formatter import format_incomes_from_dict_list
    incomes = result.get('incomes', [])
    return format_incomes_from_dict_list(
        incomes,
        title=title,
        subtitle=subtitle,
        max_incomes=100,
    )


def _format_category_stats(result: Dict) -> str:
    cats = result.get('categories', []) or []
    total = result.get('total', 0)
    parts: List[str] = []
    parts.append(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–≤—Å–µ–≥–æ: {total:,.0f} ‚ÇΩ)\n")
    for c in cats[:20]:
        name = c.get('name', '')
        cat_total = c.get('total', 0)
        count = c.get('count', 0)
        percent = c.get('percentage', 0)
        parts.append(f"‚Ä¢ {name}: {cat_total:,.0f} ‚ÇΩ ({count} —à—Ç., {percent:.1f}%)")
    if len(cats) > 20:
        parts.append(f"\n... –µ—â—ë {len(cats)-20} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    return "\n".join(parts)


def _format_daily_totals(result: Dict) -> str:
    daily = result.get('daily_totals', {}) or {}
    stats = result.get('statistics', {}) if isinstance(result.get('statistics'), dict) else {}
    total = result.get('total', stats.get('total', 0))
    avg = result.get('average', stats.get('average', 0))
    lines = [f"–¢—Ä–∞—Ç—ã –ø–æ –¥–Ω—è–º (–≤—Å–µ–≥–æ: {total:,.0f} ‚ÇΩ, —Å—Ä–µ–¥–Ω–µ–µ: {avg:,.0f} ‚ÇΩ/–¥–µ–Ω—å)\n"]
    # latest 30 days by date desc
    for dk in sorted(daily.keys(), reverse=True)[:30]:
        entry = daily.get(dk)
        amount_val = entry.get('amount', 0) if isinstance(entry, dict) else (entry or 0)
        try:
            amount = float(amount_val)
        except Exception:
            amount = 0.0
        if amount > 0:
            lines.append(f"‚Ä¢ {dk}: {amount:,.0f} ‚ÇΩ")
    if len(daily) > 30:
        lines.append(f"\n... –¥–∞–Ω–Ω—ã–µ –∑–∞ {len(daily)} –¥–Ω–µ–π")
    return "\n".join(lines)


def format_function_result(func_name: str, result: Dict) -> str:
    """
    Convert ExpenseFunctions/OpenAI/Gemini function-call results to user-facing text.
    """
    if not result.get('success'):
        return f"–û—à–∏–±–∫–∞: {result.get('message','–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')}"

    if func_name == 'get_expenses_list':
        total = result.get('total', 0)
        count = result.get('count', len(result.get('expenses', [])))
        start = result.get('start_date', '')
        end = result.get('end_date', '')
        title = f"üìã –¢—Ä–∞—Ç—ã {start}{(' ‚Äî ' + end) if end and end != start else ''}"
        subtitle = f"–ù–∞–π–¥–µ–Ω–æ: {count} —Ç—Ä–∞—Ç –Ω–∞ —Å—É–º–º—É {total:,.0f} ‚ÇΩ"
        return _format_expenses_list(result, title, subtitle)

    if func_name == 'get_max_expense_day':
        date_str = result.get('date', '')
        total = result.get('total', 0)
        count = result.get('count', 0)
        details = result.get('details', []) or []
        for d in details:
            d.setdefault('date', date_str)
        title = "üìä –î–µ–Ω—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–∞—Ç–∞–º–∏"
        subtitle = f"–î–∞—Ç–∞: {date_str} | –í—Å–µ–≥–æ: {count} —Ç—Ä–∞—Ç –Ω–∞ —Å—É–º–º—É {total:,.0f} ‚ÇΩ"
        from bot.utils.expense_formatter import format_expenses_from_dict_list
        return format_expenses_from_dict_list(details, title=title, subtitle=subtitle, max_expenses=100)

    if func_name == 'get_category_statistics':
        return _format_category_stats(result)

    if func_name == 'get_daily_totals':
        return _format_daily_totals(result)

    if func_name == 'search_expenses':
        results = result.get('results', [])
        total = result.get('total', 0)
        count = result.get('count', len(results))
        return _format_expenses_list(
            {'expenses': results},
            title="üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞",
            subtitle=f"–ù–∞–π–¥–µ–Ω–æ: {count} —Ç—Ä–∞—Ç –Ω–∞ —Å—É–º–º—É {total:,.0f} ‚ÇΩ",
        )

    if func_name == 'get_expenses_by_amount_range':
        expenses = result.get('expenses', [])
        total = result.get('total', 0)
        count = result.get('count', len(expenses))
        min_amt = result.get('min_amount', 0)
        max_amt = result.get('max_amount', 0)
        title = f"üí∞ –¢—Ä–∞—Ç—ã –æ—Ç {min_amt:,.0f} –¥–æ {max_amt:,.0f} ‚ÇΩ"
        subtitle = f"–ù–∞–π–¥–µ–Ω–æ: {count} —Ç—Ä–∞—Ç –Ω–∞ —Å—É–º–º—É {total:,.0f} ‚ÇΩ"
        return _format_expenses_list({'expenses': expenses}, title, subtitle)

    if func_name == 'get_incomes_list':
        total = result.get('total', 0)
        count = result.get('count', len(result.get('incomes', [])))
        start = result.get('start_date', '')
        end = result.get('end_date', '')
        title = f"üìã –î–æ—Ö–æ–¥—ã {start}{(' ‚Äî ' + end) if end and end != start else ''}"
        subtitle = f"–ù–∞–π–¥–µ–Ω–æ: {count} –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞ —Å—É–º–º—É {total:,.0f} ‚ÇΩ"
        return _format_incomes_list(result, title, subtitle)

    if func_name == 'get_category_total':
        category = result.get('category', '')
        total = result.get('total', 0)
        count = result.get('count', 0)
        period = result.get('period', '')

        if count == 0:
            return f"–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ç—Ä–∞—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category}\" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        period_text = {
            'week': '–∑–∞ –Ω–µ–¥–µ–ª—é',
            'month': '–∑–∞ –º–µ—Å—è—Ü',
            'year': '–∑–∞ –≥–æ–¥',
            'all': '–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è'
        }.get(period, f'–∑–∞ {period}')

        return (
            f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"–ü–µ—Ä–∏–æ–¥: {period_text}\n"
            f"–¢—Ä–∞—Ç: {count}\n"
            f"–°—É–º–º–∞: {total:,.0f} ‚ÇΩ"
        )

    if func_name == 'get_category_total_by_dates':
        category = result.get('category', '')
        total = result.get('total', 0)
        count = result.get('count', 0)
        start_date = result.get('start_date', '')
        end_date = result.get('end_date', '')

        if count == 0:
            return f"–ó–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date} –ø–æ {end_date} —Ç—Ä–∞—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category}\" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
        try:
            from datetime import datetime
            s = datetime.fromisoformat(start_date)
            e = datetime.fromisoformat(end_date)
            if s.month == e.month and s.year == e.year:
                months_ru = {
                    1: '—è–Ω–≤–∞—Ä—å', 2: '—Ñ–µ–≤—Ä–∞–ª—å', 3: '–º–∞—Ä—Ç', 4: '–∞–ø—Ä–µ–ª—å',
                    5: '–º–∞–π', 6: '–∏—é–Ω—å', 7: '–∏—é–ª—å', 8: '–∞–≤–≥—É—Å—Ç',
                    9: '—Å–µ–Ω—Ç—è–±—Ä—å', 10: '–æ–∫—Ç—è–±—Ä—å', 11: '–Ω–æ—è–±—Ä—å', 12: '–¥–µ–∫–∞–±—Ä—å'
                }
                period_desc = f"–∑–∞ {months_ru[s.month]} {s.year}"
            else:
                period_desc = f"—Å {start_date} –ø–æ {end_date}"
        except Exception:
            period_desc = f"—Å {start_date} –ø–æ {end_date}"

        return (
            f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"–ü–µ—Ä–∏–æ–¥: {period_desc}\n"
            f"–¢—Ä–∞—Ç: {count}\n"
            f"–°—É–º–º–∞: {total:,.0f} ‚ÇΩ"
        )

    if func_name == 'get_max_single_expense':
        date_str = result.get('date', '')
        time_str = result.get('time')
        amount = result.get('amount', 0)
        category = result.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        description = result.get('description', '')
        lines = ["üí∏ –°–∞–º–∞—è –±–æ–ª—å—à–∞—è —Ç—Ä–∞—Ç–∞"]
        lines.append(f"–î–∞—Ç–∞: {date_str}{(' ' + time_str) if time_str else ''}")
        lines.append(f"–°—É–º–º–∞: {amount:,.0f} ‚ÇΩ")
        lines.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        if description:
            lines.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        return "\n".join(lines)

    if func_name == 'get_max_single_income':
        inc = result.get('income') or {}
        date_str = inc.get('date', '')
        amount = inc.get('amount', 0)
        category = inc.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        description = inc.get('description', '')
        lines = ["üí∞ –°–∞–º—ã–π –±–æ–ª—å—à–æ–π –¥–æ—Ö–æ–¥"]
        lines.append(f"–î–∞—Ç–∞: {date_str}")
        lines.append(f"–°—É–º–º–∞: {amount:,.0f} ‚ÇΩ")
        lines.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        if description:
            lines.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        return "\n".join(lines)

    if func_name == 'get_recent_expenses':
        count = result.get('count', len(result.get('expenses', [])))
        return _format_expenses_list(result, "üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã", f"–ü–æ–∫–∞–∑–∞–Ω–æ: {count}")

    if func_name == 'get_recent_incomes':
        count = result.get('count', len(result.get('incomes', [])))
        return _format_incomes_list(result, "üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Ö–æ–¥—ã", f"–ü–æ–∫–∞–∑–∞–Ω–æ: {count}")

    if func_name == 'get_period_total':
        total = result.get('total', 0)
        period = result.get('period', '')
        start = result.get('start_date', '')
        end = result.get('end_date', '')
        cats = result.get('categories', []) or []
        lines = [f"–ò—Ç–æ–≥–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ {start}{(' ‚Äî ' + end) if end and end != start else ''} ({period})"]
        lines.append(f"–í—Å–µ–≥–æ: {total:,.0f} ‚ÇΩ")
        if cats:
            lines.append("")
            lines.append("–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
            for c in cats:
                lines.append(f"‚Ä¢ {c.get('name','')}: {c.get('amount',0):,.0f} ‚ÇΩ")
        return "\n".join(lines)

    if func_name == 'get_income_period_total':
        total = result.get('total', 0)
        period = result.get('period', '')
        start = result.get('start_date', '')
        end = result.get('end_date', '')
        cats = result.get('categories', []) or []
        lines = [f"–ò—Ç–æ–≥–∏ –¥–æ—Ö–æ–¥–æ–≤ {start}{(' ‚Äî ' + end) if end and end != start else ''} ({period})"]
        lines.append(f"–í—Å–µ–≥–æ: {total:,.0f} ‚ÇΩ")
        if cats:
            lines.append("")
            lines.append("–¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:")
            for c in cats:
                lines.append(f"‚Ä¢ {c.get('name','')}: {c.get('amount',0):,.0f} ‚ÇΩ")
        return "\n".join(lines)

    if func_name == 'get_weekday_statistics':
        stats = result.get('statistics') or result.get('weekday_statistics') or {}
        lines = ["üìÖ –†–∞—Å—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"]
        for day, data in stats.items():
            total = (data.get('total') if isinstance(data, dict) else data) or 0
            lines.append(f"‚Ä¢ {day}: {float(total):,.0f} ‚ÇΩ")
        return "\n".join(lines)

    if func_name == 'get_income_weekday_statistics':
        stats = result.get('weekday_statistics') or {}
        lines = ["üìÖ –î–æ—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"]
        for day, data in stats.items():
            total = (data.get('total') if isinstance(data, dict) else data) or 0
            lines.append(f"‚Ä¢ {day}: {float(total):,.0f} ‚ÇΩ")
        return "\n".join(lines)

    if func_name == 'get_average_expenses':
        avg = result.get('average', 0)
        days = result.get('period_days') or result.get('days', 30)
        count = result.get('count', 0)
        return f"–°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {avg:,.0f} ‚ÇΩ/–¥–µ–Ω—å –∑–∞ {days} –¥–Ω. (—É—á—Ç–µ–Ω–æ {count} —Ç—Ä–∞—Ç)"

    if func_name == 'get_average_incomes':
        daily = result.get('daily_average', 0)
        weekly = result.get('weekly_average', 0)
        monthly = result.get('monthly_average', 0)
        return (
            "–°—Ä–µ–¥–Ω–∏–µ –¥–æ—Ö–æ–¥—ã:\n"
            f"‚Ä¢ –î–µ–Ω—å: {daily:,.0f} ‚ÇΩ\n"
            f"‚Ä¢ –ù–µ–¥–µ–ª—è: {weekly:,.0f} ‚ÇΩ\n"
            f"‚Ä¢ –ú–µ—Å—è—Ü: {monthly:,.0f} ‚ÇΩ"
        )

    if func_name == 'get_expense_trend':
        trend = result.get('trends') or result.get('trend') or []
        lines = ["üìà –¢—Ä–µ–Ω–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤"]
        for item in trend[:12]:
            lines.append(f"‚Ä¢ {item.get('period','')}: {item.get('total',0):,.0f} ‚ÇΩ")
        return "\n".join(lines)

    if func_name == 'get_income_trend':
        trend = result.get('trend') or []
        lines = ["üìà –¢—Ä–µ–Ω–¥ –¥–æ—Ö–æ–¥–æ–≤"]
        for item in trend[:12]:
            lines.append(f"‚Ä¢ {item.get('period','')}: {item.get('total',0):,.0f} ‚ÇΩ")
        return "\n".join(lines)

    if func_name == 'predict_month_expense':
        total = result.get('current_total', 0)
        avg = result.get('average_per_day', 0)
        days_passed = result.get('days_passed', 0)
        days_in_month = result.get('days_in_month', 30)
        return (
            f"–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –º–µ—Å—è—Ü: {total:,.0f} ‚ÇΩ —É–∂–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ, —Å—Ä–µ–¥–Ω–µ–µ {avg:,.0f} ‚ÇΩ/–¥–µ–Ω—å,\n"
            f"–ø—Ä–æ—à–ª–æ {days_passed} –∏–∑ {days_in_month} –¥–Ω–µ–π."
        )

    if func_name == 'predict_month_income':
        total = result.get('current_total', 0)
        daily = result.get('daily_rate', 0)
        predicted = result.get('predicted_total', 0)
        return (
            f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞ –º–µ—Å—è—Ü: —Ç–µ–∫—É—â–∞—è —Å—É–º–º–∞ {total:,.0f} ‚ÇΩ,\n"
            f"—Å—Ä–µ–¥–Ω–∏–π –¥–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥ {daily:,.0f} ‚ÇΩ, –ø—Ä–æ–≥–Ω–æ–∑ {predicted:,.0f} ‚ÇΩ."
        )

    if func_name == 'check_budget_status':
        budget = result.get('budget', 0)
        spent = result.get('spent', 0)
        remaining = result.get('remaining', 0)
        percent = result.get('percent_used', 0)
        status = result.get('status', '')
        return (
            f"–ë—é–¥–∂–µ—Ç: {budget:,.0f} ‚ÇΩ\n"
            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {spent:,.0f} ‚ÇΩ ({percent:.1f}%)\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining:,.0f} ‚ÇΩ\n"
            f"–°—Ç–∞—Ç—É—Å: {status}"
        )

    if func_name == 'check_income_target':
        target = result.get('target', 0)
        current = result.get('current', 0)
        percent = result.get('percentage', 0)
        on_track = result.get('on_track', False)
        return (
            f"–¶–µ–ª—å –ø–æ –¥–æ—Ö–æ–¥–∞–º: {target:,.0f} ‚ÇΩ\n"
            f"–¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥: {current:,.0f} ‚ÇΩ\n"
            f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ: {percent:.1f}%\n"
            f"–°—Ç–∞—Ç—É—Å: {'–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞' if on_track else '–µ—â—ë –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞'}"
        )

    if func_name == 'compare_periods':
        diff = result.get('difference', 0)
        pct = result.get('percent_change', 0)
        p1 = result.get('period1', '')
        p2 = result.get('period2', '')
        return (
            f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤ ({p1} vs {p2})\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {diff:,.0f} ‚ÇΩ ({pct:.1f}%)"
        )

    if func_name == 'compare_income_periods':
        change = result.get('change', 0)
        pct = result.get('change_percent', 0)
        curr = result.get('current_month', 0)
        prev = result.get('previous_month', 0)
        return (
            f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ (—Ç–µ–∫—É—â–∏–π/–ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü)\n"
            f"–¢–µ–∫—É—â–∏–π: {curr:,.0f} ‚ÇΩ, –ø—Ä–æ—à–ª—ã–π: {prev:,.0f} ‚ÇΩ\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change:,.0f} ‚ÇΩ ({pct:.1f}%)"
        )

    if func_name == 'search_incomes':
        results = result.get('incomes', [])
        count = result.get('count', len(results))
        return _format_incomes_list({'incomes': results}, "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –¥–æ—Ö–æ–¥–∞–º", f"–ù–∞–π–¥–µ–Ω–æ: {count}")

    if func_name == 'get_incomes_by_amount_range':
        incomes = result.get('incomes', [])
        count = result.get('count', len(incomes))
        min_amt = result.get('min_amount', 0)
        max_amt = result.get('max_amount', 0)
        title = f"üí∞ –î–æ—Ö–æ–¥—ã –æ—Ç {min_amt:,.0f} –¥–æ {max_amt:,.0f} ‚ÇΩ"
        subtitle = f"–ù–∞–π–¥–µ–Ω–æ: {count}"
        return _format_incomes_list({'incomes': incomes}, title, subtitle)

    if func_name == 'get_income_category_statistics':
        # Reuse category stats heading for incomes
        return _format_category_stats(result)

    if func_name == 'get_daily_income_totals':
        daily = result.get('daily_totals', [])
        total = result.get('grand_total', 0)
        lines = [f"–î–æ—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º (–≤—Å–µ–≥–æ: {total:,.0f} ‚ÇΩ)\n"]
        for d in daily[:30]:
            lines.append(f"‚Ä¢ {d.get('date','')}: {d.get('total',0):,.0f} ‚ÇΩ")
        return "\n".join(lines)

    if func_name == 'get_all_operations':
        ops = result.get('operations', [])
        count = result.get('count', len(ops))
        start = result.get('start_date', '')
        end = result.get('end_date', '')
        lines = [f"–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ {start}{(' ‚Äî ' + end) if end and end != start else ''} (–ø–æ–∫–∞–∑–∞–Ω–æ: {count})"]
        for op in ops[:50]:
            sign = '+' if op.get('type') == 'income' else '-'
            lines.append(f"‚Ä¢ {op.get('date','')} {sign}{abs(op.get('amount',0)):,.0f} ‚ÇΩ ‚Äî {op.get('description','')}")
        if len(ops) > 50:
            lines.append(f"... –∏ –µ—â—ë {len(ops)-50} –æ–ø–µ—Ä–∞—Ü–∏–π")
        return "\n".join(lines)

    if func_name == 'get_financial_summary':
        period = result.get('period', '')
        start = result.get('start_date', '')
        end = result.get('end_date', '')
        income = (result.get('income') or {}).get('total', 0)
        expense = (result.get('expense') or {}).get('total', 0)
        net = (result.get('balance') or {}).get('net', income - expense)
        return (
            f"–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ ({period}) {start}{(' ‚Äî ' + end) if end and end != start else ''}\n"
            f"–î–æ—Ö–æ–¥—ã: {income:,.0f} ‚ÇΩ\n"
            f"–†–∞—Å—Ö–æ–¥—ã: {expense:,.0f} ‚ÇΩ\n"
            f"–ë–∞–ª–∞–Ω—Å: {net:,.0f} ‚ÇΩ"
        )

    # Analytics query fallback formatting
    if func_name == 'analytics_query':
        if not result.get('success'):
            return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {result.get('message','–Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å')}"
        entity = result.get('entity', 'expenses')
        group_by = result.get('group_by', 'none')
        items = result.get('results', []) or []

        title_map = {
            'expenses': '–¢—Ä–∞—Ç—ã',
            'incomes': '–î–æ—Ö–æ–¥—ã',
            'operations': '–û–ø–µ—Ä–∞—Ü–∏–∏',
        }
        title = title_map.get(entity, '–î–∞–Ω–Ω—ã–µ')

        lines = [f"{title} ‚Äî –Ω–∞–π–¥–µ–Ω–æ: {len(items)}"]

        if group_by == 'category':
            for it in items[:20]:
                name = it.get('category') or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
                total = it.get('total') or it.get('sum') or it.get('amount') or 0
                cnt = it.get('count', '')
                avg = it.get('average')
                parts = [f"‚Ä¢ {name}: {float(total):,.0f} ‚ÇΩ"]
                if cnt:
                    parts.append(f"({cnt} —à—Ç.)")
                if avg:
                    parts.append(f", —Å—Ä.: {float(avg):,.0f} ‚ÇΩ")
                lines.append(' '.join(parts))
        elif group_by == 'date':
            for it in items[:30]:
                d = it.get('date')
                total = it.get('total') or it.get('sum') or it.get('amount') or 0
                cnt = it.get('count', '')
                suffix = f" ({cnt} —à—Ç.)" if cnt else ''
                lines.append(f"‚Ä¢ {d}: {float(total):,.0f} ‚ÇΩ{suffix}")
        elif group_by == 'weekday':
            for it in items:
                wd = it.get('weekday') or ''
                total = it.get('total') or it.get('sum') or 0
                lines.append(f"‚Ä¢ {wd}: {float(total):,.0f} ‚ÇΩ")
        else:
            # List mode
            for it in items[:20]:
                d = it.get('date', '')
                amount = it.get('amount', 0)
                cat = it.get('category') or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
                desc = (it.get('description') or '')[:60]
                lines.append(f"‚Ä¢ {d} ‚Äî {float(amount):,.0f} ‚ÇΩ ‚Äî {cat} ‚Äî {desc}")

        if len(items) > 20:
            lines.append(f"... –∏ –µ—â—ë {len(items)-20} –∑–∞–ø–∏—Å–µ–π")
        return "\n".join(lines)

    if func_name == 'analytics_query':
        return _format_analytics_query_result(result)

    # Fallback: JSON preview (truncated)
    import json as _json
    try:
        return _json.dumps(result, ensure_ascii=False)[:1000]
    except Exception:
        return str(result)[:1000]


def _format_analytics_query_result(result: Dict) -> str:
    """Format analytics query results."""
    if not result.get('success'):
        return f"‚ùå {result.get('message', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å')}"

    entity = result.get('entity', 'unknown')
    group_by = result.get('group_by', 'none')
    results = result.get('results', [])
    count = result.get('count', 0)

    if count == 0:
        entity_name = {
            'expenses': '—Ç—Ä–∞—Ç',
            'incomes': '–¥–æ—Ö–æ–¥–æ–≤',
            'operations': '–æ–ø–µ—Ä–∞—Ü–∏–π'
        }.get(entity, '–∑–∞–ø–∏—Å–µ–π')
        return f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É {entity_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    lines = []

    # Single item result (like minimum expense)
    if count == 1 and group_by == 'none':
        item = results[0]
        if entity == 'expenses':
            lines.append("üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:")
            lines.append(f"–î–∞—Ç–∞: {item.get('date', 'N/A')}")
            lines.append(f"–°—É–º–º–∞: {item.get('amount', 0):,.0f} ‚ÇΩ")
            if 'category' in item:
                lines.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}")
            if 'description' in item:
                lines.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {item.get('description', '')}")
        elif entity == 'incomes':
            lines.append("üíµ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:")
            lines.append(f"–î–∞—Ç–∞: {item.get('date', 'N/A')}")
            lines.append(f"–°—É–º–º–∞: {item.get('amount', 0):,.0f} ‚ÇΩ")
            if 'category' in item:
                lines.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}")
            if 'description' in item:
                lines.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {item.get('description', '')}")
        return "\n".join(lines)

    # List of items
    if group_by == 'none':
        entity_emoji = 'üí∏' if entity == 'expenses' else 'üí∞' if entity == 'incomes' else 'üìä'
        entity_name = '–¢—Ä–∞—Ç—ã' if entity == 'expenses' else '–î–æ—Ö–æ–¥—ã' if entity == 'incomes' else '–û–ø–µ—Ä–∞—Ü–∏–∏'
        lines.append(f"{entity_emoji} {entity_name} (–Ω–∞–π–¥–µ–Ω–æ: {count})\n")

        for i, item in enumerate(results[:20], 1):
            date_str = item.get('date', '')
            amount = item.get('amount', 0)
            category = item.get('category', '')
            description = item.get('description', '')

            line = f"{i}. {date_str}"
            if entity == 'operations':
                op_type = item.get('type', '')
                sign = '-' if op_type == 'expense' else '+'
                line += f" {sign}{amount:,.0f} ‚ÇΩ"
            else:
                line += f" ‚Ä¢ {amount:,.0f} ‚ÇΩ"

            if category:
                line += f" ‚Ä¢ {category}"
            if description:
                line += f" ‚Ä¢ {description[:30]}"

            lines.append(line)

        if count > 20:
            lines.append(f"\n... –∏ –µ—â—ë {count - 20} –∑–∞–ø–∏—Å–µ–π")

        return "\n".join(lines)

    # Grouped results
    if group_by == 'date':
        lines.append("üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞—Ç–∞–º:\n")
        for item in results[:30]:
            date_str = item.get('date', 'N/A')
            total = item.get('total', 0)
            count = item.get('count', 0)
            lines.append(f"‚Ä¢ {date_str}: {total:,.0f} ‚ÇΩ ({count} —à—Ç.)")

    elif group_by == 'category':
        lines.append("üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n")
        for item in results[:20]:
            category = item.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            total = item.get('total', 0)
            count = item.get('count', 0)
            lines.append(f"‚Ä¢ {category}: {total:,.0f} ‚ÇΩ ({count} —à—Ç.)")

    elif group_by == 'weekday':
        lines.append("üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:\n")
        for item in results:
            weekday = item.get('weekday', 'N/A')
            total = item.get('total', 0)
            count = item.get('count', 0)
            avg = item.get('average', 0)
            lines.append(f"‚Ä¢ {weekday}: {total:,.0f} ‚ÇΩ (—Å—Ä–µ–¥–Ω–µ–µ: {avg:,.0f} ‚ÇΩ)")

    return "\n".join(lines)
