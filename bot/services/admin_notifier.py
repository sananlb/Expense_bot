"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ Telegram –±–æ—Ç–∞
"""
import aiohttp
import logging
import asyncio
from typing import Optional, Dict, List
from django.conf import settings
from datetime import datetime, timedelta
from django.core.cache import cache
import os

logger = logging.getLogger(__name__)


def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2"""
    if not text:
        return ""
    text = str(text)
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text


class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram API"""
    
    BASE_URL = "https://api.telegram.org/bot{token}/{method}"
    
    def __init__(self, token: str = None):
        self.token = token or os.getenv('TELEGRAM_BOT_TOKEN')
        
    async def _make_request(self, method: str, data: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Telegram API"""
        url = self.BASE_URL.format(token=self.token, method=method)
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data, timeout=10) as response:
                    result = await response.json()
                    
                    if not result.get('ok'):
                        raise Exception(
                            f"Telegram API error: {result.get('description', 'Unknown error')}"
                        )
                        
                    return result.get('result', {})
                    
        except asyncio.TimeoutError:
            logger.error(f"Timeout –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram")
            raise Exception("Network timeout")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            raise
    
    async def send_message(self, 
                          chat_id: int, 
                          text: str, 
                          parse_mode: str = 'MarkdownV2',
                          disable_notification: bool = False,
                          reply_markup: Dict = None) -> int:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            chat_id: ID —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (Markdown, HTML)
            disable_notification: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∑–≤—É–∫–∞
            reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (InlineKeyboard)
            
        Returns:
            message_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': parse_mode,
            'disable_notification': disable_notification
        }
        
        if reply_markup:
            data['reply_markup'] = reply_markup
            
        for attempt in range(3):
            try:
                result = await self._make_request('sendMessage', data)
                return result.get('message_id')
            except Exception as e:
                if attempt == 2:
                    raise
                await asyncio.sleep(1 * (2 ** attempt))
        
        return None


# –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
admin_notifier = TelegramNotifier(
    token=os.getenv('MONITORING_BOT_TOKEN', os.getenv('TELEGRAM_BOT_TOKEN'))
)


async def send_admin_alert(message: str, disable_notification: bool = False) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (—É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è MarkdownV2)
        disable_notification: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∑–≤—É–∫–∞
        
    Returns:
        True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    admin_id = os.getenv('ADMIN_TELEGRAM_ID')
    
    if not admin_id:
        logger.warning("ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. ADMIN_TELEGRAM_ID: {admin_id}")
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: {'MONITORING_BOT_TOKEN' if os.getenv('MONITORING_BOT_TOKEN') else 'TELEGRAM_BOT_TOKEN'}")
    
    try:
        await admin_notifier.send_message(
            chat_id=int(admin_id),
            text=message,
            parse_mode='MarkdownV2',
            disable_notification=disable_notification
        )
        logger.info("–ê–¥–º–∏–Ω—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∞–ª–µ—Ä—Ç–∞: {e}")
        logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: chat_id={admin_id}, message_length={len(message)}")
        return False


async def send_daily_report():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    from expenses.models import Profile, Expense, ExpenseCategory
    from django.db.models import Sum, Count
    from django.utils import timezone
    from asgiref.sync import sync_to_async
    
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    
    yesterday = timezone.now().date() - timedelta(days=1)
    today = timezone.now().date()
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ sync_to_async –¥–ª—è Django ORM
    total_users = await sync_to_async(Profile.objects.count)()
    active_users = await sync_to_async(
        lambda: Profile.objects.filter(
            expenses__created_at__date=yesterday
        ).distinct().count()
    )()
    
    expenses_stats = await sync_to_async(
        lambda: Expense.objects.filter(
            created_at__date=yesterday
        ).aggregate(
            total=Sum('amount'),
            count=Count('id')
        )
    )()
    
    new_users = await sync_to_async(
        lambda: Profile.objects.filter(
            created_at__date=yesterday
        ).count()
    )()
    
    # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    top_categories = await sync_to_async(
        lambda: list(Expense.objects.filter(
            created_at__date=yesterday
        ).values('category__name').annotate(
            total=Sum('amount'),
            count=Count('id')
        ).order_by('-total')[:5])
    )()
    
    categories_text = "\n".join([
        f"  ‚Ä¢ {escape_markdown_v2(cat['category__name'] or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}: "
        f"{escape_markdown_v2(str(round(cat['total'], 2)))} \\({cat['count']} –∑–∞–ø–∏—Å–µ–π\\)"
        for cat in top_categories
    ])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = (
        f"üìä *\\[Coins\\] –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {escape_markdown_v2(yesterday.strftime('%d.%m.%Y'))}*\n\n"
        f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
        f"  ‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
        f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—á–µ—Ä–∞: {active_users}\n"
        f"  ‚Ä¢ –ù–æ–≤—ã—Ö –≤—á–µ—Ä–∞: {new_users}\n\n"
        f"üí∞ *–†–∞—Å—Ö–æ–¥—ã:*\n"
        f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {expenses_stats['count'] or 0}\n"
        f"  ‚Ä¢ –°—É–º–º–∞: {escape_markdown_v2(str(round(expenses_stats['total'] or 0, 2)))}\n\n"
    )
    
    if categories_text:
        report += f"üìÇ *–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π:*\n{categories_text}\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
    error_count = cache.get('daily_errors_count', 0)
    if error_count > 0:
        report += f"‚ö†Ô∏è *–û—à–∏–±–æ–∫ –∑–∞ –¥–µ–Ω—å:* {error_count}\n\n"
    
    report += f"üïê –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {escape_markdown_v2(datetime.now().strftime('%H:%M:%S'))}"
    
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {yesterday}")
        result = await send_admin_alert(report, disable_notification=True)
        if result:
            logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {yesterday} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —É—Å–ø–µ—à–Ω–æ")
            cache.delete('daily_errors_count')
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {yesterday}")
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
        return False


async def notify_critical_error(error_type: str, details: str, user_id: Optional[int] = None):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
    
    Args:
        error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
        details: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º cache –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
    alert_key = f"critical_error:{error_type}"
    
    if cache.get(alert_key):
        # –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ
        return
    
    message = (
        f"üö® *\\[Coins\\] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê*\n\n"
        f"–¢–∏–ø: {escape_markdown_v2(error_type)}\n"
    )
    
    if user_id:
        message += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n"
    
    message += (
        f"–î–µ—Ç–∞–ª–∏: {escape_markdown_v2(details[:200])}\n"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        f"–í—Ä–µ–º—è: {escape_markdown_v2(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))}\n\n"
        f"–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞\\!"
    )
    
    try:
        await send_admin_alert(message)
        cache.set(alert_key, True, 1800)  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ 30 –º–∏–Ω—É—Ç
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–Ω—è
        daily_errors = cache.get('daily_errors_count', 0)
        cache.set('daily_errors_count', daily_errors + 1, 86400)
        
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")


async def notify_new_user(user_id: int, username: Optional[str] = None, first_name: Optional[str] = None):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        first_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    message = (
        f"üéâ *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\\!*\n\n"
        f"ID: `{user_id}`\n"
    )
    
    if first_name:
        message += f"–ò–º—è: {escape_markdown_v2(first_name)}\n"
    
    if username:
        message += f"Username: @{escape_markdown_v2(username)}\n"
    
    message += f"–í—Ä–µ–º—è: {escape_markdown_v2(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))}"
    
    try:
        await send_admin_alert(message, disable_notification=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")


async def notify_payment_received(user_id: int, amount: float, payment_type: str):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
        payment_type: –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞
    """
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –±–µ–∑ –ª–∏—à–Ω–∏—Ö –Ω—É–ª–µ–π
    amount_str = f"{int(amount)}" if amount == int(amount) else f"{amount:.2f}"
    message = (
        f"üí≥ *–ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂!*\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n"
        f"–°—É–º–º–∞: {amount_str} —Ä—É–±.\n"
        f"–¢–∏–ø: {payment_type}\n"
        f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )
    
    try:
        await send_admin_alert(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ: {e}")


async def notify_bot_started():
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    message = (
        f"‚úÖ *\\[Coins\\] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω*\n\n"
        f"–í—Ä–µ–º—è: {escape_markdown_v2(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))}\n"
        f"–í–µ—Ä—Å–∏—è: {escape_markdown_v2('1.0.0')}\n"
        f"–û–∫—Ä—É–∂–µ–Ω–∏–µ: {escape_markdown_v2('Development' if settings.DEBUG else 'Production')}"
    )
    
    try:
        await send_admin_alert(message, disable_notification=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")


async def notify_bot_stopped():
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    message = (
        f"üõë *\\[Coins\\] –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*\n\n"
        f"–í—Ä–µ–º—è: {escape_markdown_v2(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))}"
    )
    
    try:
        await send_admin_alert(message, disable_notification=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")