import logging
from datetime import datetime, date, timedelta
from typing import List, Dict, Any, Optional
from decimal import Decimal

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey

from expenses.models import Profile, Expense, Budget
from ..services.expense import get_expenses_summary
from ..utils import format_amount, get_month_name

logger = logging.getLogger(__name__)


class NotificationService:
    def __init__(self, bot: Bot):
        self.bot = bot
        
    async def send_weekly_report(self, user_id: int, profile: Profile):
        """Send weekly expense report for last 7 days"""
        try:
            today = date.today()
            week_start = today - timedelta(days=6)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            summary = await get_expenses_summary(
                telegram_id=user_id,
                start_date=week_start,
                end_date=today
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
            text = f"üìä –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç ({week_start.strftime('%d.%m')} - {today.strftime('%d.%m')})\n\n"
            
            if summary['total'] == 0:
                text += "üí∞ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –±—ã–ª–æ"
            else:
                # –û–±—â–∞—è —Å—É–º–º–∞
                text += f"üí∞ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_amount(summary['total'], summary['currency'], 'ru')}\n"
                text += f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ç: {summary.get('count', 0)}\n"
                
                if summary.get('count', 0) > 0:
                    avg = summary['total'] / summary.get('count', 1)
                    text += f"üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {format_amount(avg, summary['currency'], 'ru')}\n\n"
                
                # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                if summary['by_category']:
                    text += "üìä –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n"
                    for cat in summary['by_category'][:5]:  # –¢–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                        percentage = float(cat['total']) / float(summary['total']) * 100
                        text += f"{cat['icon']} {cat['name']}: {format_amount(cat['total'], summary['currency'], 'ru')} ({percentage:.1f}%)\n"
                
                # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫
                if summary.get('potential_cashback', 0) > 0:
                    text += f"\nüí≥ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫: {format_amount(summary['potential_cashback'], summary['currency'], 'ru')}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìà –ü–æ–∫–∞–∑–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞", callback_data="show_month_start")],
                [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
            ])
            
            await self.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=keyboard
            )
            
            logger.info(f"Weekly report sent to user {user_id}")
            
        except Exception as e:
            logger.error(f"Error sending weekly report to user {user_id}: {e}")
    
    async def send_monthly_report(self, user_id: int, profile: Profile):
        """Send monthly expense report"""
        try:
            today = date.today()
            # –û—Ç—á–µ—Ç –∑–∞ –≤–µ—Å—å —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            month_start = today.replace(day=1)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞ –º–µ—Å—è—Ü
            summary = await get_expenses_summary(
                telegram_id=user_id,
                start_date=month_start,
                end_date=today
            )
            
            month_name = get_month_name(today.month, 'ru')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
            text = f"üìä –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {month_name} {today.year}\n\n"
            
            if summary['total'] == 0:
                text += f"üí∞ –í {month_name} —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –±—ã–ª–æ"
            else:
                # –û–±—â–∞—è —Å—É–º–º–∞
                text += f"üí∞ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_amount(summary['total'], summary['currency'], 'ru')}\n"
                text += f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ç: {summary.get('count', 0)}\n"
                
                if summary.get('count', 0) > 0:
                    avg = summary['total'] / summary.get('count', 1)
                    text += f"üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {format_amount(avg, summary['currency'], 'ru')}\n\n"
                
                # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                if summary['by_category']:
                    text += "üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
                    for cat in summary['by_category'][:10]:  # –¢–æ–ø-10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                        percentage = float(cat['total']) / float(summary['total']) * 100
                        text += f"{cat['icon']} {cat['name']}: {format_amount(cat['total'], summary['currency'], 'ru')} ({percentage:.1f}%)\n"
                
                # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫
                if summary.get('potential_cashback', 0) > 0:
                    text += f"\nüí≥ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–µ—à–±—ç–∫ –∑–∞ –º–µ—Å—è—Ü: {format_amount(summary['potential_cashback'], summary['currency'], 'ru')}"
                
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª—ã–º –º–µ—Å—è—Ü–µ–º
                prev_month = today.month - 1 if today.month > 1 else 12
                prev_year = today.year if today.month > 1 else today.year - 1
                prev_month_start = date(prev_year, prev_month, 1)
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞
                from calendar import monthrange
                prev_month_end = date(prev_year, prev_month, monthrange(prev_year, prev_month)[1])
                
                prev_summary = await get_expenses_summary(
                    telegram_id=user_id,
                    start_date=prev_month_start,
                    end_date=prev_month_end
                )
                
                if prev_summary['total'] > 0:
                    diff = summary['total'] - prev_summary['total']
                    diff_percent = (diff / prev_summary['total']) * 100 if prev_summary['total'] > 0 else 0
                    
                    text += "\n\nüìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª—ã–º –º–µ—Å—è—Ü–µ–º:\n"
                    if diff > 0:
                        text += f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –±–æ–ª—å—à–µ –Ω–∞ {format_amount(abs(diff), summary['currency'], 'ru')} (+{abs(diff_percent):.1f}%)"
                    else:
                        text += f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –º–µ–Ω—å—à–µ –Ω–∞ {format_amount(abs(diff), summary['currency'], 'ru')} (-{abs(diff_percent):.1f}%)"
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞
            storage_key = StorageKey(
                bot_id=self.bot.id,
                chat_id=user_id,
                user_id=user_id
            )
            state = FSMContext(
                storage=self.bot.fsm_storage,
                key=storage_key
            )
            await state.update_data(
                current_month=today.month,
                current_year=today.year
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF –æ—Ç—á–µ—Ç", callback_data="pdf_generate_current")],
                [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
            ])
            
            await self.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=keyboard
            )
            
            logger.info(f"Monthly report sent to user {user_id}")
            
        except Exception as e:
            logger.error(f"Error sending monthly report to user {user_id}: {e}")
    
    async def send_budget_warning(self, user_id: int, budget: Budget, spent: Decimal, percent: float):
        """Send budget warning notification"""
        try:
            period_text = {
                'daily': '–¥–µ–Ω—å',
                'weekly': '–Ω–µ–¥–µ–ª—é', 
                'monthly': '–º–µ—Å—è—Ü'
            }.get(budget.period, budget.period)
            
            cat_text = f" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {budget.category.name}" if budget.category else ""
            
            text = f"""‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±—é–¥–∂–µ—Ç–µ</b>
            
–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ {percent:.0f}% –æ—Ç –±—é–¥–∂–µ—Ç–∞ –Ω–∞ {period_text}{cat_text}.

üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_amount(spent, 'RUB', 'ru')}
üìä –õ–∏–º–∏—Ç: {format_amount(budget.amount, 'RUB', 'ru')}
üíµ –û—Å—Ç–∞–ª–æ—Å—å: {format_amount(budget.amount - spent, 'RUB', 'ru')}"""
            
            if percent >= 100:
                text += "\n\n‚ùó <b>–ë—é–¥–∂–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω!</b>"
            elif percent >= 90:
                text += "\n\n‚ö†Ô∏è <b>–û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 10% –±—é–¥–∂–µ—Ç–∞</b>"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã", callback_data="expenses_today")],
                [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
            ])
            
            await self.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            logger.info(f"Budget warning sent to user {user_id} ({percent:.0f}%)")
            
        except Exception as e:
            logger.error(f"Error sending budget warning to user {user_id}: {e}")