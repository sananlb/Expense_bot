import logging
from datetime import datetime, date, timedelta
from typing import List, Dict, Any, Optional
from decimal import Decimal

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey

from expenses.models import Profile, Expense, Budget
from ..services.expense import get_expenses_summary
from ..utils import format_amount, get_month_name

logger = logging.getLogger(__name__)


class NotificationService:
    def __init__(self, bot: Bot):
        self.bot = bot
        
    async def send_monthly_report(self, user_id: int, profile: Profile, year: int = None, month: int = None):
        """Send monthly expense report for specified year/month (defaults to current month)"""
        try:
            from ..services.pdf_report import PDFReportService
            from ..services.monthly_insights import MonthlyInsightsService
            from aiogram.types import BufferedInputFile

            today = date.today()

            # –ï—Å–ª–∏ –≥–æ–¥/–º–µ—Å—è—Ü –Ω–µ —É–∫–∞–∑–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            report_year = year if year is not None else today.year
            report_month = month if month is not None else today.month

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –æ—Ç—á–µ—Ç
            pdf_service = PDFReportService()
            pdf_bytes = await pdf_service.generate_monthly_report(
                user_id=user_id,
                year=report_year,
                month=report_month
            )

            month_name = get_month_name(report_month, 'ru')

            if pdf_bytes:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ caption
                caption = f"üìä –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {month_name} {report_year}"

                try:
                    insights_service = MonthlyInsightsService()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å–∞–π—Ç –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
                    insight = await insights_service.get_insight(profile, report_year, report_month)

                    if not insight:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∏–Ω—Å–∞–π—Ç
                        insight = await insights_service.generate_insight(
                            profile=profile,
                            year=report_year,
                            month=report_month,
                            provider='google',
                            force_regenerate=False
                        )

                    if insight:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–Ω—Å–∞–π—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ caption
                        insight_text = self._format_insight_text(insight, report_month, report_year)
                        full_caption = f"{caption}\n\n{insight_text}"

                        # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç caption –¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤
                        if len(full_caption) <= 1024:
                            caption = full_caption
                        else:
                            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –∏–Ω—Å–∞–π—Ç
                            max_insight_length = 1024 - len(caption) - 20  # -20 –¥–ª—è "\n\n" –∏ "..."
                            if max_insight_length > 100:
                                truncated_insight = insight_text[:max_insight_length] + "..."
                                caption = f"{caption}\n\n{truncated_insight}"
                            # –ï—Å–ª–∏ –¥–∞–∂–µ –æ–±—Ä–µ–∑–∫–∞ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∏–Ω—Å–∞–π—Ç–∞

                        logger.info(f"Monthly insights generated for user {user_id} for {report_year}-{report_month:02d}")
                    else:
                        logger.info(f"No insights generated for user {user_id} for {report_year}-{report_month:02d} (not enough data)")

                except Exception as e:
                    logger.error(f"Error generating insights for user {user_id}: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤—ã–º caption, –¥–∞–∂–µ –µ—Å–ª–∏ –∏–Ω—Å–∞–π—Ç—ã –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª —Å caption (–≤–∫–ª—é—á–∞—è –∏–Ω—Å–∞–π—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å)
                pdf_file = BufferedInputFile(
                    pdf_bytes,
                    filename=f"monthly_report_{report_year}_{report_month:02d}.pdf"
                )

                await self.bot.send_document(
                    chat_id=user_id,
                    document=pdf_file,
                    caption=caption,
                    parse_mode='HTML'
                )

                logger.info(f"Monthly PDF report sent to user {user_id} for {report_year}-{report_month:02d}")

            # –ï—Å–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –±—ã–ª–æ - –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º

        except Exception as e:
            logger.error(f"Error sending monthly report to user {user_id}: {e}")

    def _format_insight_text(self, insight, month: int, year: int) -> str:
        """Format insight for display in message"""
        # –ú–µ—Å—è—Ü—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        months_ru = {
            1: '–Ø–Ω–≤–∞—Ä—å', 2: '–§–µ–≤—Ä–∞–ª—å', 3: '–ú–∞—Ä—Ç', 4: '–ê–ø—Ä–µ–ª—å',
            5: '–ú–∞–π', 6: '–ò—é–Ω—å', 7: '–ò—é–ª—å', 8: '–ê–≤–≥—É—Å—Ç',
            9: '–°–µ–Ω—Ç—è–±—Ä—å', 10: '–û–∫—Ç—è–±—Ä—å', 11: '–ù–æ—è–±—Ä—å', 12: '–î–µ–∫–∞–±—Ä—å'
        }
        period = f"{months_ru.get(month, month)} {year}"

        text = f"ü§ñ <b>AI –∞–Ω–∞–ª–∏–∑ –∑–∞ {period}</b>\n\n"

        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
        text += f"üí∞ –†–∞—Å—Ö–æ–¥—ã: {float(insight.total_expenses):,.0f} ‚ÇΩ".replace(',', ' ')

        if insight.total_incomes > 0:
            balance = insight.balance
            balance_emoji = "üìà" if balance >= 0 else "üìâ"
            balance_sign = "+" if balance >= 0 else ""
            text += f" | –ë–∞–ª–∞–Ω—Å: {balance_emoji} {balance_sign}{float(balance):,.0f} ‚ÇΩ".replace(',', ' ')

        text += f"\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ç: {insight.expenses_count}\n\n"

        # –¢–æ–ø 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–æ–∫—Ä–∞—â–µ–Ω–æ —Å 5)
        if insight.top_categories:
            text += f"üèÜ <b>–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π:</b>\n"
            for i, cat in enumerate(insight.top_categories[:3], 1):
                percentage = cat.get('percentage', 0)
                amount = cat.get('amount', 0)
                category_name = cat.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
                text += f"{i}. {category_name}: {amount:,.0f}‚ÇΩ ({percentage:.0f}%)\n".replace(',', ' ')
            text += "\n"

        # AI —Ä–µ–∑—é–º–µ
        if insight.ai_summary:
            text += f"üìù {insight.ai_summary}\n\n"

        # AI –∞–Ω–∞–ª–∏–∑ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –ø—É–Ω–∫—Ç–∞)
        if insight.ai_analysis:
            analysis_lines = insight.ai_analysis.split('\n')
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –ø—É–Ω–∫—Ç–∞
            key_points = [line for line in analysis_lines if line.strip().startswith('‚Ä¢')][:3]
            if key_points:
                text += f"üìä <b>–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:</b>\n"
                text += '\n'.join(key_points) + "\n"

        return text
    
    async def send_budget_warning(self, user_id: int, budget: Budget, spent: Decimal, percent: float):
        """Send budget warning notification"""
        try:
            period_text = {
                'daily': '–¥–µ–Ω—å',
                'weekly': '–Ω–µ–¥–µ–ª—é', 
                'monthly': '–º–µ—Å—è—Ü'
            }.get(budget.period, budget.period)
            
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            from bot.utils.language import get_user_language
            user_lang = await get_user_language(user_id)
            
            if budget.category:
                category_display = budget.category.get_display_name(user_lang)
                cat_text = f" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_display}"
            else:
                cat_text = ""
            
            text = f"""‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±—é–¥–∂–µ—Ç–µ</b>
            
–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ {percent:.0f}% –æ—Ç –±—é–¥–∂–µ—Ç–∞ –Ω–∞ {period_text}{cat_text}.

üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_amount(spent, 'RUB', 'ru')}
üìä –õ–∏–º–∏—Ç: {format_amount(budget.amount, 'RUB', 'ru')}
üíµ –û—Å—Ç–∞–ª–æ—Å—å: {format_amount(budget.amount - spent, 'RUB', 'ru')}"""
            
            if percent >= 100:
                text += "\n\n‚ùó <b>–ë—é–¥–∂–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω!</b>"
            elif percent >= 90:
                text += "\n\n‚ö†Ô∏è <b>–û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 10% –±—é–¥–∂–µ—Ç–∞</b>"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã", callback_data="expenses_today")],
                [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
            ])
            
            await self.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            logger.info(f"Budget warning sent to user {user_id} ({percent:.0f}%)")
            
        except Exception as e:
            logger.error(f"Error sending budget warning to user {user_id}: {e}")