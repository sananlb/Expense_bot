"""
–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
"""
import asyncio
from datetime import timedelta
from django.utils import timezone
from aiogram import Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder

from expenses.models import Subscription, Profile


async def check_expiring_subscriptions(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏"""
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
    tomorrow = timezone.now() + timedelta(days=1)
    tomorrow_start = tomorrow.replace(hour=0, minute=0, second=0, microsecond=0)
    tomorrow_end = tomorrow.replace(hour=23, minute=59, second=59, microsecond=999999)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –∑–∞–≤—Ç—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    expiring_subscriptions = await Subscription.objects.filter(
        is_active=True,
        end_date__gte=tomorrow_start,
        end_date__lte=tomorrow_end,
        notification_sent=False
    ).select_related('profile').aiterator()
    
    async for subscription in expiring_subscriptions:
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if subscription.type == 'trial':
                message = (
                    "üéÅ <b>–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞!</b>\n\n"
                    "–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n"
                    "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
                    "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
                    "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ—à–±—ç–∫–∞–º–∏\n"
                    "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ PDF\n\n"
                    "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —Å–æ —Å–∫–∏–¥–∫–æ–π!"
                )
            else:
                message = (
                    f"‚è∞ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞!</b>\n\n"
                    f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {subscription.end_date.strftime('%d.%m.%Y')}\n\n"
                    f"–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º."
                )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            builder = InlineKeyboardBuilder()
            builder.button(
                text="‚≠ê –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                callback_data="menu_subscription"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await bot.send_message(
                chat_id=subscription.profile.telegram_id,
                text=message,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
            
            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            subscription.notification_sent = True
            await subscription.asave(update_fields=['notification_sent'])
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscription.profile.telegram_id}: {e}")


async def run_notification_task(bot: Bot):
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    while True:
        try:
            await check_expiring_subscriptions(bot)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
        await asyncio.sleep(3600)