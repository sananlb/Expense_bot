"""
Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω—É
"""
import logging
from datetime import datetime, timedelta
from typing import Any, Awaitable, Callable, Dict
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message, CallbackQuery
from django.core.cache import cache
from django.conf import settings
import asyncio

logger = logging.getLogger(__name__)


class ActivityTrackerMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.stats = {
            'total_requests': 0,
            'unique_users': set(),
            'commands': {},
            'errors': []
        }
        self.last_report_time = datetime.now()
        
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è"""
        user = None
        command = None
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–º–∞–Ω–¥—É
        if isinstance(event, Message):
            user = event.from_user
            if event.text and event.text.startswith('/'):
                command = event.text.split()[0]
        elif isinstance(event, CallbackQuery):
            user = event.from_user
            command = f"callback:{event.data.split(':')[0] if ':' in event.data else event.data}"
            
        if user:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['total_requests'] += 1
            self.stats['unique_users'].add(user.id)
            
            if command:
                self.stats['commands'][command] = self.stats['commands'].get(command, 0) + 1
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self._track_user_activity(user.id, user.username or user.first_name)
        
        try:
            # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            return await handler(event, data)
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            error_info = {
                'time': datetime.now().isoformat(),
                'user_id': user.id if user else None,
                'error': str(e),
                'command': command
            }
            self.stats['errors'].append(error_info)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
            if len(self.stats['errors']) >= 5:
                await self._send_error_alert()
                
            raise
            
    async def _track_user_activity(self, user_id: int, username: str):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        activity_key = f"user_activity:{user_id}"
        last_activity_key = f"user_last_activity:{user_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        activity_count = cache.get(activity_key, 0)
        activity_count += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        cache.set(activity_key, activity_count, 3600)  # –•—Ä–∞–Ω–∏–º —á–∞—Å
        cache.set(last_activity_key, datetime.now().isoformat(), 86400)  # –•—Ä–∞–Ω–∏–º —Å—É—Ç–∫–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if activity_count > 100:  # –ë–æ–ª–µ–µ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
            await self._send_suspicious_activity_alert(user_id, username, activity_count)
            
                
    async def _send_suspicious_activity_alert(self, user_id: int, username: str, activity_count: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        alert_key = f"suspicious_alert_sent:{user_id}"
        
        if not cache.get(alert_key):
            from bot.services.admin_notifier import send_admin_alert
            
            message = (
                f"‚ö†Ô∏è *\\[Coins\\] –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å*\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} \\(ID: `{user_id}`\\)\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —á–∞—Å: {activity_count}\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                f"–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å–ø–∞–º –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"
            )
            
            try:
                await send_admin_alert(message)
                cache.set(alert_key, True, 1800)  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ 30 –º–∏–Ω—É—Ç
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                
    async def _send_error_alert(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö"""
        alert_key = "multiple_errors_alert"
        
        if not cache.get(alert_key):
            from bot.services.admin_notifier import send_admin_alert
            
            recent_errors = self.stats['errors'][-5:]
            error_details = "\n".join([
                f"‚Ä¢ {err['time']}: {err['command'] or 'unknown'} - {err['error'][:50]}"
                for err in recent_errors
            ])
            
            message = (
                f"üö® *\\[Coins\\] –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –±–æ—Ç–µ*\n\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {len(self.stats['errors'])}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:\n{error_details}\n\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤\\!"
            )
            
            try:
                await send_admin_alert(message)
                cache.set(alert_key, True, 600)  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ 10 –º–∏–Ω—É—Ç
                self.stats['errors'] = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –æ–± –æ—à–∏–±–∫–∞—Ö: {e}")
                
    async def get_daily_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å"""
        return {
            'total_requests': self.stats['total_requests'],
            'unique_users': len(self.stats['unique_users']),
            'popular_commands': sorted(
                self.stats['commands'].items(), 
                key=lambda x: x[1], 
                reverse=True
            )[:10],
            'errors_count': len(self.stats['errors'])
        }
        
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats = {
            'total_requests': 0,
            'unique_users': set(),
            'commands': {},
            'errors': []
        }
        self.last_report_time = datetime.now()


class RateLimitMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, messages_per_minute: int = 30, messages_per_hour: int = 500):
        self.messages_per_minute = messages_per_minute
        self.messages_per_hour = messages_per_hour
        
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit"""
        user = None
        
        if isinstance(event, (Message, CallbackQuery)):
            user = event.from_user
            
        if user:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if not await self._check_rate_limit(user.id):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if isinstance(event, Message):
                    await event.answer(
                        "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.",
                        show_alert=False
                    )
                elif isinstance(event, CallbackQuery):
                    await event.answer(
                        "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.",
                        show_alert=True
                    )
                return None
                
        return await handler(event, data)
        
    async def _check_rate_limit(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ö–ª—é—á–∏ –¥–ª—è –º–∏–Ω—É—Ç–Ω–æ–≥–æ –∏ —á–∞—Å–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–æ–≤
        minute_key = f"rate_limit:minute:{user_id}"
        hour_key = f"rate_limit:hour:{user_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏
        minute_count = cache.get(minute_key, 0)
        hour_count = cache.get(hour_key, 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if minute_count >= self.messages_per_minute:
            logger.warning(f"Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–º–∏–Ω—É—Ç–Ω—ã–π)")
            return False
            
        if hour_count >= self.messages_per_hour:
            logger.warning(f"Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (—á–∞—Å–æ–≤–æ–π)")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            from bot.services.admin_notifier import send_admin_alert
            message = (
                f"üö´ *\\[Coins\\] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω rate limiter*\n\n"
                f"User ID: `{user_id}`\n"
                f"–ü—Ä–µ–≤—ã—à–µ–Ω —á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç: {hour_count}/{self.messages_per_hour}\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            asyncio.create_task(send_admin_alert(message))
            return False
            
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        cache.set(minute_key, minute_count + 1, 60)
        cache.set(hour_key, hour_count + 1, 3600)
        
        return True