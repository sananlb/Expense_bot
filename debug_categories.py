#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–∏—Å–∫–∞
"""
import os
import sys
import django

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/mnt/c/Users/_batman_/Desktop/expense_bot')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
django.setup()

from expenses.models import Profile, ExpenseCategory
from bot.services.cashback_free_text import _resolve_category, _normalize_letters
import asyncio
from asgiref.sync import sync_to_async

@sync_to_async
def get_test_profile():
    """–ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        return Profile.objects.first()
    except:
        return None

async def test_category_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    print("=== –û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ===\n")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    profile = await get_test_profile()
    if not profile:
        print("‚ùå –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    print(f"üì± –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {profile.telegram_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
    categories = await sync_to_async(list)(profile.categories.all())
    print(f"üìÇ –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}\n")
    
    print("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
    for i, cat in enumerate(categories, 1):
        print(f"{i:2}. {cat.name}")
    print()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∏—Å–∫–∏
    test_searches = [
        "–ø–æ–¥–∞—Ä–∫–∏",
        "–ü–æ–¥–∞—Ä–∫–∏", 
        "–ø–æ–¥–∞—Ä–æ–∫",
        "üéÅ –ü–æ–¥–∞—Ä–∫–∏",
        "–∫–∞—Ñ–µ",
        "–∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
        "—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
        "–ø—Ä–æ–¥—É–∫—Ç—ã",
        "—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ã",
    ]
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
    for search_term in test_searches:
        result = await _resolve_category(profile, search_term)
        status = "‚úÖ" if result else "‚ùå"
        found_name = result.name if result else "–ù–ï –ù–ê–ô–î–ï–ù–ê"
        print(f"{status} '{search_term}' -> {found_name}")
    
    print("\nüîß –ê–Ω–∞–ª–∏–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
    test_normalizations = [
        "–ø–æ–¥–∞—Ä–∫–∏",
        "–ü–æ–¥–∞—Ä–∫–∏",
        "üéÅ –ü–æ–¥–∞—Ä–∫–∏",
        "üéÅ–ø–æ–¥–∞—Ä–∫–∏",
    ]
    
    for term in test_normalizations:
        normalized = _normalize_letters(term)
        print(f"'{term}' -> '{normalized}'")
    
    print("\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤:")
    gift_categories = [cat for cat in categories if '–ø–æ–¥–∞—Ä–∫' in cat.name.lower() or '–ø–æ–¥–∞—Ä' in cat.name.lower()]
    
    if gift_categories:
        for cat in gift_categories:
            from bot.services.cashback_free_text import tokenize
            import re
            
            def tokenize(s: str):
                s = _normalize_letters(s)
                toks = re.findall(r"[\w–∞-—è–ê-–Ø]+", s)
                stop = {"–∏", "–≤", "–Ω–∞", "–ø–æ"}
                return {t for t in toks if t and t not in stop}
            
            tokens = tokenize(cat.name)
            print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: '{cat.name}' -> —Ç–æ–∫–µ–Ω—ã: {tokens}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            for search in ["–ø–æ–¥–∞—Ä–∫–∏", "–ø–æ–¥–∞—Ä–æ–∫"]:
                search_tokens = tokenize(search)
                is_subset = search_tokens.issubset(tokens)
                print(f"  '{search}' ({search_tokens}) –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ? {is_subset}")
    else:
        print("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å '–ø–æ–¥–∞—Ä–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

if __name__ == "__main__":
    asyncio.run(test_category_search())