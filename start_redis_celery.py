#!/usr/bin/env python
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Redis + Celery –Ω–∞ Windows, Linux –∏ macOS
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –û–° –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
"""
import os
import sys
import platform
import subprocess
import time
import signal
import shutil
from pathlib import Path
import psutil  # –ù—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: pip install psutil

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def print_header():
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print(Colors.CYAN + "=" * 60 + Colors.ENDC)
    print(Colors.CYAN + Colors.BOLD + "    EXPENSE BOT - Universal Launcher" + Colors.ENDC)
    print(Colors.CYAN + "=" * 60 + Colors.ENDC)
    print(f"OS: {platform.system()} {platform.release()}")
    print(f"Python: {sys.version.split()[0]}")
    print()

def check_installed(command):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞"""
    return shutil.which(command) is not None

def is_process_running(process_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å"""
    for proc in psutil.process_iter(['name']):
        try:
            if process_name.lower() in proc.info['name'].lower():
                return True
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass
    return False

def find_redis_executable():
    """–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ Redis"""
    system = platform.system()
    
    if system == "Windows":
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è Windows
        possible_paths = [
            r"C:\Program Files\Redis\redis-server.exe",
            r"C:\Redis\redis-server.exe",
            r"D:\Redis\redis-server.exe",
            os.path.join(os.getcwd(), "redis", "redis-server.exe"),
            os.path.join(os.path.dirname(sys.executable), "Scripts", "redis-server.exe")
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PATH
        if check_installed("redis-server"):
            return "redis-server"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—É—Ç–∏
        for path in possible_paths:
            if os.path.exists(path):
                return path
                
        # –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
        for root, dirs, files in os.walk(os.getcwd()):
            if "redis-server.exe" in files:
                return os.path.join(root, "redis-server.exe")
                
    else:  # Linux/macOS
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if check_installed("redis-server"):
            return "redis-server"
        
        # –ù–∞ macOS Redis –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Homebrew
        if system == "Darwin":
            homebrew_paths = [
                "/usr/local/bin/redis-server",
                "/opt/homebrew/bin/redis-server",
                os.path.expanduser("~/homebrew/bin/redis-server")
            ]
            for path in homebrew_paths:
                if os.path.exists(path):
                    return path
            
    return None

class ServiceManager:
    def __init__(self):
        self.system = platform.system()
        self.processes = []
        self.redis_process = None
        self.worker_process = None
        self.beat_process = None
        
    def check_redis(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Redis"""
        print(Colors.BLUE + "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis..." + Colors.ENDC)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ Redis
        try:
            result = subprocess.run(
                ["redis-cli", "ping"],
                capture_output=True,
                text=True,
                timeout=2
            )
            if result.returncode == 0 and "PONG" in result.stdout:
                print(Colors.GREEN + "‚úÖ Redis —É–∂–µ –∑–∞–ø—É—â–µ–Ω" + Colors.ENDC)
                return True
        except:
            pass
        
        # –ò—â–µ–º Redis
        redis_path = find_redis_executable()
        
        if not redis_path:
            print(Colors.FAIL + "‚ùå Redis –Ω–µ –Ω–∞–π–¥–µ–Ω!" + Colors.ENDC)
            print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Redis:")
            if self.system == "Windows":
                print("1. –°–∫–∞—á–∞–π—Ç–µ: https://github.com/microsoftarchive/redis/releases")
                print("2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –≤ C:\\Redis\\")
                print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
            else:
                print("Ubuntu/Debian: sudo apt install redis-server")
                print("CentOS/RHEL: sudo yum install redis")
                print("macOS: brew install redis")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Redis
        print(Colors.WARNING + f"üöÄ –ó–∞–ø—É—Å–∫ Redis: {redis_path}" + Colors.ENDC)
        
        try:
            if self.system == "Windows":
                # –ù–∞ Windows –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
                self.redis_process = subprocess.Popen(
                    [redis_path],
                    creationflags=subprocess.CREATE_NEW_CONSOLE
                )
            else:
                # –ù–∞ Linux/macOS –∑–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
                self.redis_process = subprocess.Popen(
                    [redis_path],
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL
                )
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            time.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            result = subprocess.run(
                ["redis-cli", "ping"],
                capture_output=True,
                text=True
            )
            if result.returncode == 0 and "PONG" in result.stdout:
                print(Colors.GREEN + "‚úÖ Redis —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω" + Colors.ENDC)
                return True
            else:
                print(Colors.FAIL + "‚ùå Redis –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç" + Colors.ENDC)
                return False
                
        except Exception as e:
            print(Colors.FAIL + f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Redis: {e}" + Colors.ENDC)
            return False
    
    def check_django(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Django –∏ –º–∏–≥—Ä–∞—Ü–∏–π"""
        print(Colors.BLUE + "\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Django..." + Colors.ENDC)
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
            result = subprocess.run(
                [sys.executable, "manage.py", "showmigrations", "--plan"],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                if "[ ]" in result.stdout:
                    print(Colors.WARNING + "‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏" + Colors.ENDC)
                    print("–ü—Ä–∏–º–µ–Ω—è—é –º–∏–≥—Ä–∞—Ü–∏–∏...")
                    subprocess.run([sys.executable, "manage.py", "migrate"])
                print(Colors.GREEN + "‚úÖ Django –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" + Colors.ENDC)
                return True
            else:
                print(Colors.FAIL + "‚ùå –û—à–∏–±–∫–∞ Django" + Colors.ENDC)
                print(result.stderr)
                return False
                
        except Exception as e:
            print(Colors.FAIL + f"‚ùå –û—à–∏–±–∫–∞: {e}" + Colors.ENDC)
            return False
    
    def start_celery(self):
        """–ó–∞–ø—É—Å–∫ Celery Worker –∏ Beat"""
        print(Colors.BLUE + "\nüîç –ó–∞–ø—É—Å–∫ Celery..." + Colors.ENDC)
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –û–°
        if self.system == "Windows":
            # –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º --pool=solo –¥–ª—è Windows!
            worker_cmd = [sys.executable, "-m", "celery", "-A", "expense_bot", "worker", "-l", "info", "--pool=solo", "--concurrency=1"]
            beat_cmd = [sys.executable, "-m", "celery", "-A", "expense_bot", "beat", "-l", "info"]
        else:
            worker_cmd = ["celery", "-A", "expense_bot", "worker", "-l", "info"]
            beat_cmd = ["celery", "-A", "expense_bot", "beat", "-l", "info"]
        
        try:
            # –ó–∞–ø—É—Å–∫ Worker
            print(Colors.WARNING + "üöÄ –ó–∞–ø—É—Å–∫ Celery Worker..." + Colors.ENDC)
            if self.system == "Windows":
                self.worker_process = subprocess.Popen(
                    worker_cmd,
                    creationflags=subprocess.CREATE_NEW_CONSOLE
                )
            else:
                self.worker_process = subprocess.Popen(worker_cmd)
            
            time.sleep(3)
            
            # –ó–∞–ø—É—Å–∫ Beat
            print(Colors.WARNING + "üöÄ –ó–∞–ø—É—Å–∫ Celery Beat..." + Colors.ENDC)
            if self.system == "Windows":
                self.beat_process = subprocess.Popen(
                    beat_cmd,
                    creationflags=subprocess.CREATE_NEW_CONSOLE
                )
            else:
                self.beat_process = subprocess.Popen(beat_cmd)
            
            time.sleep(2)
            print(Colors.GREEN + "‚úÖ Celery –∑–∞–ø—É—â–µ–Ω" + Colors.ENDC)
            return True
            
        except Exception as e:
            print(Colors.FAIL + f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Celery: {e}" + Colors.ENDC)
        return False

    def test_cache(self):
        """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫–µ—à–∞"""
        print(Colors.BLUE + "\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–∞..." + Colors.ENDC)
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Django
            import django
            django.setup()
            from django.core.cache import cache
            
            # –¢–µ—Å—Ç
            cache.set('test_key', 'test_value', 10)
            value = cache.get('test_key')
            
            if value == 'test_value':
                print(Colors.GREEN + "‚úÖ –ö–µ—à —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" + Colors.ENDC)
                cache.delete('test_key')
                return True
            else:
                print(Colors.FAIL + "‚ùå –ö–µ—à –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç" + Colors.ENDC)
                return False
                
        except Exception as e:
            print(Colors.FAIL + f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}" + Colors.ENDC)
            return False
    
    def show_status(self):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print(Colors.CYAN + "\nüìä –°–¢–ê–¢–£–° –°–ï–†–í–ò–°–û–í:" + Colors.ENDC)
        print("‚îÄ" * 40)
        
        # Redis
        try:
            result = subprocess.run(["redis-cli", "ping"], capture_output=True, text=True)
            redis_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if result.returncode == 0 else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        except:
            redis_status = "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        print(f"Redis:         {redis_status}")
        
        # Celery Worker
        worker_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if self.worker_process and self.worker_process.poll() is None else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        print(f"Celery Worker: {worker_status}")
        
        # Celery Beat
        beat_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if self.beat_process and self.beat_process.poll() is None else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        print(f"Celery Beat:   {beat_status}")
        
        print("‚îÄ" * 40)
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print(Colors.WARNING + "\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..." + Colors.ENDC)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Celery
        for proc, name in [(self.worker_process, "Worker"), (self.beat_process, "Beat")]:
            if proc:
                try:
                    proc.terminate()
                    proc.wait(timeout=5)
                    print(f"‚úÖ Celery {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except:
                    proc.kill()
                    print(f"‚ö†Ô∏è  Celery {name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Redis (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –µ–≥–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏)
        if self.redis_process:
            try:
                if self.system == "Windows":
                    subprocess.run(["redis-cli", "shutdown", "nosave"], capture_output=True)
                else:
                    self.redis_process.terminate()
                    self.redis_process.wait(timeout=5)
                print("‚úÖ Redis –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except:
                if self.redis_process:
                    self.redis_process.kill()
                print("‚ö†Ô∏è  Redis –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        print_header()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        try:
            import psutil
        except ImportError:
            print(Colors.FAIL + "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ psutil: pip install psutil" + Colors.ENDC)
            return 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        if not self.check_redis():
            return 1
            
        if not self.check_django():
            return 1
            
        if not self.start_celery():
            self.stop_all()
            return 1
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–µ—à
        time.sleep(2)
        self.test_cache()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        self.show_status()
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        print(Colors.CYAN + "\nüí° –ò–ù–°–¢–†–£–ö–¶–ò–ò:" + Colors.ENDC)
        print("1. –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("2. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: python run_bot.py")
        print("3. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        if self.system == "Windows":
            print("\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ù–∞ Windows —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö")
        
        print(Colors.GREEN + "\n‚ú® –í—Å–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!" + Colors.ENDC)
        
        # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            print("\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
            while True:
                time.sleep(1)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –∂–∏–≤—ã
                if self.worker_process and self.worker_process.poll() is not None:
                    print(Colors.WARNING + "\n‚ö†Ô∏è  Celery Worker –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è!" + Colors.ENDC)
                    break
                if self.beat_process and self.beat_process.poll() is not None:
                    print(Colors.WARNING + "\n‚ö†Ô∏è  Celery Beat –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è!" + Colors.ENDC)
                    break
                    
        except KeyboardInterrupt:
            print(Colors.WARNING + "\n\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏..." + Colors.ENDC)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—ë
        self.stop_all()
        print(Colors.GREEN + "\n‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" + Colors.ENDC)
        return 0

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    manager = ServiceManager()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    def signal_handler(signum, frame):
        print(Colors.WARNING + "\n\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏..." + Colors.ENDC)
        manager.stop_all()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    if platform.system() != "Windows":
        signal.signal(signal.SIGTERM, signal_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    sys.exit(manager.run())

if __name__ == "__main__":
    main()