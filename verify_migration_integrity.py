#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
"""

import os
import sys
import django
from pathlib import Path
from collections import Counter
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
django.setup()

from expenses.models import Profile, ExpenseCategory, IncomeCategory, Expense, Income, CategoryKeyword
from django.db.models import Count, Q
from django.db import connection


class MigrationIntegrityChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.report = {
            'timestamp': datetime.now(),
            'total_checks': 0,
            'passed_checks': 0,
            'failed_checks': 0,
            'warnings': 0,
            'critical_issues': 0,
            'issues': []
        }
    
    def add_issue(self, severity: str, category: str, message: str, details: dict = None):
        """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –≤ –æ—Ç—á–µ—Ç"""
        issue = {
            'severity': severity,  # 'INFO', 'WARNING', 'ERROR', 'CRITICAL'
            'category': category,
            'message': message,
            'details': details or {},
            'timestamp': datetime.now()
        }
        
        self.report['issues'].append(issue)
        
        if severity == 'WARNING':
            self.report['warnings'] += 1
        elif severity in ['ERROR', 'CRITICAL']:
            self.report['failed_checks'] += 1
            if severity == 'CRITICAL':
                self.report['critical_issues'] += 1
        else:
            self.report['passed_checks'] += 1
        
        # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        icon = {'INFO': '‚úÖ', 'WARNING': '‚ö†Ô∏è', 'ERROR': '‚ùå', 'CRITICAL': 'üö®'}[severity]
        print(f"{icon} [{severity}] {category}: {message}")
        if details:
            for key, value in details.items():
                print(f"    {key}: {value}")
    
    def check_database_consistency(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\n" + "=" * 60)
        print("üîç –ü–†–û–í–ï–†–ö–ê –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è
        print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤...")
        
        empty_multilingual = ExpenseCategory.objects.filter(
            is_active=True
        ).filter(
            (Q(name_ru__isnull=True) | Q(name_ru='')) &
            (Q(name_en__isnull=True) | Q(name_en=''))
        )
        
        if empty_multilingual.exists():
            self.add_issue('ERROR', 'MULTILINGUAL_FIELDS', 
                         f"–ù–∞–π–¥–µ–Ω–æ {empty_multilingual.count()} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–µ–∑ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π",
                         {'count': empty_multilingual.count(), 
                          'sample_ids': list(empty_multilingual.values_list('id', flat=True)[:5])})
        else:
            self.add_issue('INFO', 'MULTILINGUAL_FIELDS', 
                         "–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–º–µ—é—Ç –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—è name
        print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—è name...")
        
        inconsistent_names = []
        for category in ExpenseCategory.objects.filter(is_active=True):
            if category.name_ru or category.name_en:
                # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏
                expected_name = category.get_display_name('ru')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –∫–∞–∫ –±–∞–∑–æ–≤—ã–π
                if category.name != expected_name:
                    inconsistent_names.append({
                        'id': category.id, 
                        'current': category.name, 
                        'expected': expected_name
                    })
        
        if inconsistent_names:
            self.add_issue('WARNING', 'NAME_SYNC', 
                         f"–ù–∞–π–¥–µ–Ω–æ {len(inconsistent_names)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª–µ–º name",
                         {'count': len(inconsistent_names), 
                          'samples': inconsistent_names[:3]})
        else:
            self.add_issue('INFO', 'NAME_SYNC', 
                         "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–º–µ—é—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ name")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –î—É–±–ª–∏–∫–∞—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
        
        profiles = Profile.objects.all()
        total_duplicates = 0
        
        for profile in profiles:
            categories = profile.categories.filter(is_active=True)
            name_groups = {}
            
            for category in categories:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                normalized_names = set()
                
                if category.name_ru:
                    normalized_names.add(category.name_ru.lower().strip())
                if category.name_en:
                    normalized_names.add(category.name_en.lower().strip())
                
                for norm_name in normalized_names:
                    if norm_name:
                        if norm_name not in name_groups:
                            name_groups[norm_name] = []
                        name_groups[norm_name].append(category)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            profile_duplicates = 0
            for name, cats in name_groups.items():
                if len(cats) > 1:
                    profile_duplicates += len(cats) - 1
            
            total_duplicates += profile_duplicates
        
        if total_duplicates > 0:
            self.add_issue('WARNING', 'DUPLICATES', 
                         f"–ù–∞–π–¥–µ–Ω–æ {total_duplicates} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        else:
            self.add_issue('INFO', 'DUPLICATES', 
                         "–î—É–±–ª–∏–∫–∞—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        self.report['total_checks'] += 3
    
    def check_expense_category_bindings(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        print("\n" + "=" * 60)
        print("üí∞ –ü–†–û–í–ï–†–ö–ê –ü–†–ò–í–Ø–ó–ö–ò –†–ê–°–•–û–î–û–í –ö –ö–ê–¢–ï–ì–û–†–ò–Ø–ú")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –†–∞—Å—Ö–æ–¥—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
        
        orphaned_expenses = Expense.objects.filter(category__isnull=True).count()
        recent_orphaned = Expense.objects.filter(
            category__isnull=True,
            created_at__gte=datetime.now() - timedelta(days=30)
        ).count()
        
        if orphaned_expenses > 0:
            severity = 'ERROR' if recent_orphaned > 0 else 'WARNING'
            self.add_issue(severity, 'ORPHANED_EXPENSES', 
                         f"–ù–∞–π–¥–µ–Ω–æ {orphaned_expenses} —Ä–∞—Å—Ö–æ–¥–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                         {'total': orphaned_expenses, 'recent': recent_orphaned})
        else:
            self.add_issue('INFO', 'ORPHANED_EXPENSES', 
                         "–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –∏–º–µ—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –†–∞—Å—Ö–æ–¥—ã —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏...")
        
        inactive_category_expenses = Expense.objects.filter(
            category__is_active=False
        ).count()
        
        if inactive_category_expenses > 0:
            self.add_issue('ERROR', 'INACTIVE_CATEGORIES', 
                         f"–ù–∞–π–¥–µ–Ω–æ {inactive_category_expenses} —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
        else:
            self.add_issue('INFO', 'INACTIVE_CATEGORIES', 
                         "–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print("3. –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º...")
        
        category_stats = ExpenseCategory.objects.filter(
            is_active=True
        ).annotate(
            expense_count=Count('expenses')
        ).order_by('-expense_count')
        
        unused_categories = category_stats.filter(expense_count=0).count()
        heavily_used_categories = category_stats.filter(expense_count__gt=1000).count()
        
        if unused_categories > 0:
            self.add_issue('INFO', 'CATEGORY_USAGE', 
                         f"–ù–∞–π–¥–µ–Ω–æ {unused_categories} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        self.add_issue('INFO', 'CATEGORY_STATS', 
                     f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {category_stats.count()} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {heavily_used_categories} –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö")
        
        self.report['total_checks'] += 3
    
    def check_keyword_consistency(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        print("\n" + "=" * 60)
        print("üî§ –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í –ö–ê–¢–ï–ì–û–†–ò–ô")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
        
        orphaned_keywords = CategoryKeyword.objects.filter(
            category__isnull=True
        ).count()
        
        if orphaned_keywords > 0:
            self.add_issue('ERROR', 'ORPHANED_KEYWORDS', 
                         f"–ù–∞–π–¥–µ–Ω–æ {orphaned_keywords} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        else:
            self.add_issue('INFO', 'ORPHANED_KEYWORDS', 
                         "–í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏...")
        
        inactive_keywords = CategoryKeyword.objects.filter(
            category__is_active=False
        ).count()
        
        if inactive_keywords > 0:
            self.add_issue('WARNING', 'INACTIVE_KEYWORDS', 
                         f"–ù–∞–π–¥–µ–Ω–æ {inactive_keywords} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        else:
            self.add_issue('INFO', 'INACTIVE_KEYWORDS', 
                         "–í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –î—É–±–ª–∏–∫–∞—Ç—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤...")
        
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT keyword, language, COUNT(*) as count
                FROM expenses_category_keyword 
                GROUP BY keyword, language 
                HAVING COUNT(*) > 1
            """)
            
            duplicate_keywords = cursor.fetchall()
        
        if duplicate_keywords:
            total_duplicates = sum(count - 1 for _, _, count in duplicate_keywords)
            self.add_issue('WARNING', 'DUPLICATE_KEYWORDS', 
                         f"–ù–∞–π–¥–µ–Ω–æ {len(duplicate_keywords)} –≥—Ä—É–ø–ø –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ({total_duplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)",
                         {'groups': len(duplicate_keywords), 'total_duplicates': total_duplicates})
        else:
            self.add_issue('INFO', 'DUPLICATE_KEYWORDS', 
                         "–î—É–±–ª–∏–∫–∞—Ç—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        self.report['total_checks'] += 3
    
    def check_performance_indicators(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n" + "=" * 60)
        print("‚ö° –ü–†–û–í–ï–†–ö–ê –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        import time
        from django.db import reset_queries
        from django import db
        
        # –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        reset_queries()
        start_time = time.time()
        
        categories = list(ExpenseCategory.objects.filter(
            is_active=True,
            profile__telegram_id=881292737  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        ).select_related('profile'))
        
        query_time = time.time() - start_time
        query_count = len(db.connection.queries)
        
        if query_time > 1.0:
            self.add_issue('WARNING', 'QUERY_PERFORMANCE', 
                         f"–ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ: {query_time:.3f}s",
                         {'time': query_time, 'queries': query_count})
        else:
            self.add_issue('INFO', 'QUERY_PERFORMANCE', 
                         f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –Ω–æ—Ä–º–µ: {query_time:.3f}s")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü
        print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü...")
        
        category_count = ExpenseCategory.objects.count()
        keyword_count = CategoryKeyword.objects.count()
        expense_count = Expense.objects.count()
        
        self.add_issue('INFO', 'TABLE_SIZES', 
                     f"–†–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü: {category_count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {keyword_count} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, {expense_count} —Ä–∞—Å—Ö–æ–¥–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ò–Ω–¥–µ–∫—Å—ã
        print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤...")
        
        with connection.cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∏—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            cursor.execute("""
                EXPLAIN QUERY PLAN
                SELECT * FROM expenses_category 
                WHERE profile_id = 1 AND is_active = 1
            """)
            
            plan = cursor.fetchall()
            uses_index = any('INDEX' in str(row).upper() for row in plan)
            
            if uses_index:
                self.add_issue('INFO', 'INDEX_USAGE', 
                             "–ó–∞–ø—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∏–Ω–¥–µ–∫—Å—ã")
            else:
                self.add_issue('WARNING', 'INDEX_USAGE', 
                             "–í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω–¥–µ–∫—Å–æ–≤")
        
        self.report['total_checks'] += 3
    
    def generate_summary_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•")
        print("=" * 80)
        
        print(f"üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.report['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìã –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {self.report['total_checks']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.report['passed_checks']}")
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {self.report['warnings']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.report['failed_checks']}")
        print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: {self.report['critical_issues']}")
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        issues_by_category = {}
        issues_by_severity = {'INFO': 0, 'WARNING': 0, 'ERROR': 0, 'CRITICAL': 0}
        
        for issue in self.report['issues']:
            category = issue['category']
            severity = issue['severity']
            
            if category not in issues_by_category:
                issues_by_category[category] = []
            issues_by_category[category].append(issue)
            
            issues_by_severity[severity] += 1
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if self.report['critical_issues'] > 0:
            print("üö® –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.")
        elif self.report['failed_checks'] > 0:
            print("‚ùå –í–ê–ñ–ù–û: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        elif self.report['warnings'] > 0:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
        else:
            print("‚úÖ –û–¢–õ–ò–ß–ù–û: –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if 'MULTILINGUAL_FIELDS' in issues_by_category:
            print("\nüîß –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π:")
            print("   python comprehensive_category_migration.py --execute")
        
        if 'DUPLICATES' in issues_by_category:
            print("\nüîß –î–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
            print("   python comprehensive_category_migration.py --execute")
        
        if 'ORPHANED_EXPENSES' in issues_by_category:
            print("\nüîß –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            print("   python quick_category_fix.py [user_id] fix --execute")
        
        return self.report
    
    def save_report_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"migration_integrity_report_{timestamp}.json"
        
        import json
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON (–¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏)
        json_report = self.report.copy()
        json_report['timestamp'] = self.report['timestamp'].isoformat()
        
        for issue in json_report['issues']:
            issue['timestamp'] = issue['timestamp'].isoformat()
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(json_report, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
        return filename
    
    def run_all_checks(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        print("üîç –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–• –ü–û–°–õ–ï –ú–ò–ì–†–ê–¶–ò–ò –ö–ê–¢–ï–ì–û–†–ò–ô")
        print("–ù–∞—á–∞—Ç–æ:", datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        
        try:
            self.check_database_consistency()
            self.check_expense_category_bindings()
            self.check_keyword_consistency()
            self.check_performance_indicators()
            
            report = self.generate_summary_report()
            filename = self.save_report_to_file()
            
            return report, filename
            
        except Exception as e:
            self.add_issue('CRITICAL', 'SYSTEM_ERROR', 
                         f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")
            print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            return self.report, None


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = MigrationIntegrityChecker()
    
    try:
        report, filename = checker.run_all_checks()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if report['critical_issues'] > 0:
            exit_code = 2  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        elif report['failed_checks'] > 0:
            exit_code = 1  # –ï—Å—Ç—å –æ—à–∏–±–∫–∏
        else:
            exit_code = 0  # –í—Å–µ –û–ö
        
        print(f"\nüèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∫–æ–¥–æ–º: {exit_code}")
        sys.exit(exit_code)
        
    except Exception as e:
        print(f"\nüö® –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(3)


if __name__ == "__main__":
    main()