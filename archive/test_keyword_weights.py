#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –≤–µ—Å–æ–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
django.setup()

from expenses.models import ExpenseCategory, CategoryKeyword, Expense, Profile
from expense_bot.celery_tasks import update_keywords_weights, extract_words_from_description
from bot.utils.expense_categorizer import categorize_expense_smart
from datetime import datetime


def test_keyword_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ª–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è"""
    print("\n=== –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ª–æ–≤ ===")
    
    test_cases = [
        "–∫–æ—Ñ–µ, –≤–æ–¥–∞ –∏ —á–µ–±—É—Ä–µ–∫ 450",
        "–∫—É–ø–∏–ª –º–æ–ª–æ–∫–æ –∑–∞ 85—Ä –≤ –º–∞–≥–Ω–∏—Ç–µ",
        "—Ç–∞–∫—Å–∏ –¥–æ –¥–æ–º–∞ 350 —Ä—É–±–ª–µ–π",
    ]
    
    for text in test_cases:
        words = extract_words_from_description(text)
        print(f"'{text}' -> {words}")


def test_weight_update():
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    print("\n=== –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–æ–≤ ===")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        profile = Profile.objects.get(telegram_id=123456789)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
    except Profile.DoesNotExist:
        print("–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        profile = Profile.objects.create(
            telegram_id=123456789,
            username="test_user"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    cafe_cat, _ = ExpenseCategory.objects.get_or_create(
        profile=profile,
        name="–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
        defaults={'icon': '‚òï'}
    )
    
    market_cat, _ = ExpenseCategory.objects.get_or_create(
        profile=profile,
        name="–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ã",
        defaults={'icon': 'üõí'}
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥
    expense = Expense.objects.create(
        profile=profile,
        description="–∫–æ—Ñ–µ –∏ –≤–æ–¥–∞",
        amount=250,
        category=cafe_cat,
        expense_date=datetime.now().date()
    )
    
    print(f"–°–æ–∑–¥–∞–Ω —Ä–∞—Å—Ö–æ–¥: {expense.description} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {expense.category.name}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ '–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ã'...")
    
    # –í—ã–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–æ–≤
    update_keywords_weights(
        expense_id=expense.id,
        old_category_id=cafe_cat.id,
        new_category_id=market_cat.id
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    print("\n–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è '–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ã':")
    for kw in CategoryKeyword.objects.filter(category=market_cat):
        print(f"  {kw.keyword}: usage_count={kw.usage_count}, "
              f"weight={kw.normalized_weight:.2f}")
    
    print("\n–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è '–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã':")
    for kw in CategoryKeyword.objects.filter(category=cafe_cat):
        print(f"  {kw.keyword}: usage_count={kw.usage_count}, "
              f"weight={kw.normalized_weight:.2f}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º–∏ –≤–µ—Å–∞–º–∏
    print("\n=== –¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –≤–µ—Å–∞–º–∏ ===")
    test_texts = [
        "–∫–æ—Ñ–µ",
        "–≤–æ–¥–∞",
        "–∫–æ—Ñ–µ –∏ –≤–æ–¥–∞",
    ]
    
    for text in test_texts:
        category, confidence, corrected = categorize_expense_smart(text, profile)
        print(f"'{text}' -> {category} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%})")


def test_50_word_limit():
    """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ 50 —Å–ª–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    print("\n=== –¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ 50 —Å–ª–æ–≤ ===")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        profile = Profile.objects.get(telegram_id=123456789)
    except Profile.DoesNotExist:
        print("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ test_weight_update()")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = ExpenseCategory.objects.filter(profile=profile).first()
    if not category:
        print("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"–î–æ–±–∞–≤–ª—è–µ–º 60 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category.name}'...")
    
    # –°–æ–∑–¥–∞–µ–º 60 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    for i in range(60):
        CategoryKeyword.objects.get_or_create(
            category=category,
            keyword=f"testword{i:03d}",
            defaults={
                'usage_count': i % 10,  # –†–∞–∑–Ω—ã–µ –≤–µ—Å–∞
                'normalized_weight': 1.0
            }
        )
    
    print(f"–°–æ–∑–¥–∞–Ω–æ {CategoryKeyword.objects.filter(category=category).count()} —Å–ª–æ–≤")
    
    # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–∞
    from expense_bot.celery_tasks import check_category_keywords_limit
    check_category_keywords_limit(category)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    remaining = CategoryKeyword.objects.filter(category=category).count()
    print(f"–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {remaining} —Å–ª–æ–≤")
    
    if remaining > 50:
        print("‚ùå –û—à–∏–±–∫–∞: –ª–∏–º–∏—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("‚úÖ –õ–∏–º–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")


if __name__ == "__main__":
    print("="*50)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –í–ï–°–û–í –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í")
    print("="*50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_keyword_extraction()
    test_weight_update()
    test_50_word_limit()
    
    print("\n" + "="*50)
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")