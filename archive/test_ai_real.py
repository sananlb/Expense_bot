#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç: AI —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
"""

import os
import sys
import django
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
django.setup()

from bot.utils.expense_parser import parse_expense_message
from expenses.models import Profile
from asgiref.sync import sync_to_async

# –í–∞—à telegram ID
user_id = 881292737

async def test_ai_real():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º AI —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    @sync_to_async
    def get_profile():
        try:
            return Profile.objects.get(telegram_id=user_id)
        except Profile.DoesNotExist:
            return Profile.objects.create(telegram_id=user_id)
    
    profile = await get_profile()
    
    print("=" * 80)
    print("–¢–ï–°–¢ AI –° –†–ï–ê–õ–¨–ù–´–ú–ò –°–õ–û–í–ê–ú–ò")
    print("=" * 80)
    
    # –†–µ–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫–ª—é—á–µ–≤—ã—Ö
    test_cases = [
        ("–∫–Ω–∏–≥–∞ 800", "–ö–Ω–∏–≥–∞ - –Ω–µ—Ç –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö"),
        ("–ø–æ–¥–ø–∏—Å–∫–∞ 500", "–ü–æ–¥–ø–∏—Å–∫–∞ - –Ω–µ—Ç –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö"),
        ("–Ω–æ—É—Ç–±—É–∫ 50000", "–ù–æ—É—Ç–±—É–∫ - –Ω–µ—Ç –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö"),
        ("–ø–∞—Ä–∫–æ–≤–∫–∞ 200", "–ü–∞—Ä–∫–æ–≤–∫–∞ - –µ—Å—Ç—å –≤ –ê–≤—Ç–æ–º–æ–±–∏–ª—å"),
        ("–∫–æ—Ñ–µ 150", "–ö–æ—Ñ–µ - –µ—Å—Ç—å –≤ –ö–∞—Ñ–µ"),
    ]
    
    for text, description in test_cases:
        print(f"\n{'='*60}")
        print(f"üìù –¢–µ—Å—Ç: '{text}'")
        print(f"   {description}")
        print("-" * 60)
        
        # –° AI
        parsed = await parse_expense_message(text, user_id=user_id, profile=profile, use_ai=True)
        if parsed:
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {parsed['category']}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {parsed.get('confidence', 0):.0%}")
            
            if parsed.get('ai_enhanced'):
                print(f"   ‚ú® AI –ò–°–ü–û–õ–¨–ó–û–í–ê–õ–°–Ø!")
                print(f"   –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {parsed.get('ai_provider', 'unknown')}")
                print(f"   AI –æ–ø—Ä–µ–¥–µ–ª–∏–ª –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            else:
                if any(word in text for word in ['–∫–Ω–∏–≥–∞', '–ø–æ–¥–ø–∏—Å–∫–∞', '–Ω–æ—É—Ç–±—É–∫']):
                    print(f"   ‚ÑπÔ∏è AI –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è (—Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –∫–ª—é—á–µ–≤—ã—Ö)")
                else:
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö")

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_ai_real())