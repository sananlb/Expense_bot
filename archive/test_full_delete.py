#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç: –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—Ç–∫–∞—Ç –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
"""

import os
import sys
import django
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
django.setup()

from bot.utils.expense_parser import parse_expense_message
from bot.services.category import get_or_create_category
from expenses.models import Profile
from asgiref.sync import sync_to_async

# –í–∞—à telegram ID
user_id = 881292737

async def test_full_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    @sync_to_async
    def get_profile():
        try:
            return Profile.objects.get(telegram_id=user_id)
        except Profile.DoesNotExist:
            return Profile.objects.create(telegram_id=user_id)
    
    profile = await get_profile()
    
    print("=" * 80)
    print("–ü–û–õ–ù–´–ô –¶–ò–ö–õ: –ü–∞—Ä—Å–∏–Ω–≥ ‚Üí –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è ‚Üí –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    print("=" * 80)
    
    test_input = "–∫–æ—Ñ–µ 200"
    
    print(f"\nüìù –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: '{test_input}'")
    print("-" * 40)
    
    # –®–∞–≥ 1: –ü–∞—Ä—Å–∏–Ω–≥
    print("\n1Ô∏è‚É£ –ü–ê–†–°–ò–ù–ì:")
    parsed = await parse_expense_message(test_input, user_id=user_id, profile=profile, use_ai=False)
    
    if parsed:
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞: '{parsed['category']}'")
        print(f"   (—ç—Ç–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ CATEGORY_KEYWORDS)")
        
        # –®–∞–≥ 2: get_or_create_category
        print(f"\n2Ô∏è‚É£ GET_OR_CREATE_CATEGORY:")
        print(f"   –ü–æ–ª—É—á–∞–µ—Ç: '{parsed['category']}'")
        
        category = await get_or_create_category(user_id, parsed['category'])
        
        print(f"   –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: '{category.name}'")
        
        # –ê–Ω–∞–ª–∏–∑
        print("\n" + "=" * 80)
        print("–ê–ù–ê–õ–ò–ó:")
        print("=" * 80)
        
        if parsed['category'] == '–∫–∞—Ñ–µ':
            print("‚úÖ –ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª '–∫–∞—Ñ–µ' –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        
        if '–∫–∞—Ñ–µ' in category.name.lower() or '—Ä–µ—Å—Ç–æ—Ä–∞–Ω' in category.name.lower():
            print("‚úÖ get_or_create_category –Ω–∞—à–ª–∞ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        elif '–ø—Ä–æ—á–∏–µ' in category.name.lower():
            print("‚ö†Ô∏è get_or_create_category –Ω–µ –Ω–∞—à–ª–∞ '–∫–∞—Ñ–µ' –∏ –≤–µ—Ä–Ω—É–ª–∞ '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã'")
            print("   –≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å '–∫–∞—Ñ–µ' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏")
    
    print("\n" + "=" * 80)
    print("–í–´–í–û–î:")
    print("=" * 80)
    print("""
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é "üçΩÔ∏è –ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã":

1. –ü–∞—Ä—Å–µ—Ä –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–µ—Ä–Ω–µ—Ç "–∫–∞—Ñ–µ" –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
2. get_or_create_category –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å "–∫–∞—Ñ–µ" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
3. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ—Ç - —Å–æ–∑–¥–∞—Å—Ç/–≤–µ—Ä–Ω–µ—Ç "üí∞ –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"

–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –í–°–ï–ì–î–ê —Ä–∞–±–æ—Ç–∞—é—Ç,
–Ω–æ —Ä–∞—Å—Ö–æ–¥ –º–æ–∂–µ—Ç –ø–æ–ø–∞—Å—Ç—å –≤ "–ü—Ä–æ—á–∏–µ", –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """)

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_full_flow())