#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç: –ø–æ—á–µ–º—É "–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Ä–æ–≥–∞" –Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç—Å—è
"""

import os
import sys
import django
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
django.setup()

from bot.utils.expense_parser import parse_expense_message
from bot.utils.expense_categorizer import categorize_expense
from expenses.models import Profile, CATEGORY_KEYWORDS
from asgiref.sync import sync_to_async

# –í–∞—à telegram ID
user_id = 881292737

async def test_road_toll():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é '–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Ä–æ–≥–∞'"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    @sync_to_async
    def get_profile():
        try:
            return Profile.objects.get(telegram_id=user_id)
        except Profile.DoesNotExist:
            return Profile.objects.create(telegram_id=user_id)
    
    profile = await get_profile()
    
    text = "–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Ä–æ–≥–∞ 750"
    
    print("=" * 80)
    print(f"–¢–ï–°–¢: '{text}'")
    print("=" * 80)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö
    print("\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–ò–ß–ï–°–ö–ò–• –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í:")
    print("-" * 40)
    
    found_in_static = False
    for cat_name, keywords in CATEGORY_KEYWORDS.items():
        for keyword in keywords:
            if '–ø–ª–∞—Ç–Ω' in keyword.lower() or '–¥–æ—Ä–æ–≥' in keyword.lower():
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{cat_name}':")
                print(f"   –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{keyword}'")
                found_in_static = True
                
    if not found_in_static:
        print("‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö")
        print("   –°–ª–æ–≤–∞ '–ø–ª–∞—Ç–Ω–∞—è' –∏ '–¥–æ—Ä–æ–≥–∞' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # 2. –¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –ë–ï–ó AI
    print("\n2Ô∏è‚É£ –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø –ë–ï–ó AI:")
    print("-" * 40)
    
    parsed_no_ai = await parse_expense_message(text, user_id=user_id, profile=profile, use_ai=False)
    if parsed_no_ai:
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {parsed_no_ai['category']}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {parsed_no_ai.get('confidence', 0):.0%}")
        
        if parsed_no_ai['category'] == '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã':
            print("‚ö†Ô∏è –û–ø—Ä–µ–¥–µ–ª–∏–ª–æ—Å—å –∫–∞–∫ '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã' (–æ–∂–∏–¥–∞–µ–º–æ, —Å–ª–æ–≤ –Ω–µ—Ç –≤ –∫–ª—é—á–µ–≤—ã—Ö)")
    
    # 3. –¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –° AI
    print("\n3Ô∏è‚É£ –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø –° AI:")
    print("-" * 40)
    
    import time
    start_time = time.time()
    
    parsed_with_ai = await parse_expense_message(text, user_id=user_id, profile=profile, use_ai=True)
    
    elapsed_time = time.time() - start_time
    
    if parsed_with_ai:
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {parsed_with_ai['category']}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {parsed_with_ai.get('confidence', 0):.0%}")
        print(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {elapsed_time:.2f} —Å–µ–∫")
        
        if parsed_with_ai.get('ai_enhanced'):
            print(f"‚úÖ AI –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è (–ø—Ä–æ–≤–∞–π–¥–µ—Ä: {parsed_with_ai.get('ai_provider', 'unknown')})")
        else:
            print("‚ùå AI –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è")
            
        if elapsed_time < 0.5:
            print("‚ö†Ô∏è –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ! –í–æ–∑–º–æ–∂–Ω–æ, AI –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–ª—Å—è")
    
    # 4. –ê–Ω–∞–ª–∏–∑
    print("\n" + "=" * 80)
    print("–ê–ù–ê–õ–ò–ó:")
    print("=" * 80)
    
    print("""
–ï—Å–ª–∏ "–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Ä–æ–≥–∞" –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞—Å—å –∫–∞–∫ "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã" –±—ã—Å—Ç—Ä–æ:

1. –°–ª–æ–≤ –Ω–µ—Ç –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö
2. AI –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è (—Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)
3. –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ < 0.5 —Å–µ–∫ - AI —Ç–æ—á–Ω–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–ª—Å—è

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
1. –î–æ–±–∞–≤–∏—Ç—å "–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Ä–æ–≥–∞", "–ø–ª–∞—Ç–Ω–∞—è —Ç—Ä–∞—Å—Å–∞", "toll" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ê–≤—Ç–æ–º–æ–±–∏–ª—å"
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ—á–µ–º—É AI –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è (–≤–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ)
    """)
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–∏–µ —Å–ª–æ–≤–∞ –µ—Å—Ç—å –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    print("\nüìã –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–ê–≤—Ç–æ–º–æ–±–∏–ª—å':")
    if '–ê–≤—Ç–æ–º–æ–±–∏–ª—å' in CATEGORY_KEYWORDS:
        for kw in CATEGORY_KEYWORDS['–ê–≤—Ç–æ–º–æ–±–∏–ª—å'][:20]:
            print(f"   - {kw}")
        if len(CATEGORY_KEYWORDS['–ê–≤—Ç–æ–º–æ–±–∏–ª—å']) > 20:
            print(f"   ... –∏ –µ—â–µ {len(CATEGORY_KEYWORDS['–ê–≤—Ç–æ–º–æ–±–∏–ª—å']) - 20}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_road_toll())