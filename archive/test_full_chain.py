#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç: –ø–æ–ª–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞—è AI
"""

import os
import sys
import django
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
django.setup()

from bot.utils.expense_parser import parse_expense_message
from bot.utils.expense_categorizer import categorize_expense_with_weights
from expenses.models import Profile, CategoryKeyword
from asgiref.sync import sync_to_async

# –í–∞—à telegram ID
user_id = 881292737

async def test_full_chain():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    @sync_to_async
    def get_profile():
        try:
            return Profile.objects.get(telegram_id=user_id)
        except Profile.DoesNotExist:
            return Profile.objects.create(telegram_id=user_id)
    
    profile = await get_profile()
    
    print("=" * 80)
    print("–ü–û–õ–ù–ê–Ø –¶–ï–ü–û–ß–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–ò")
    print("=" * 80)
    
    test_cases = [
        ("–∫–æ—Ñ–µ 200", "–°–ª–æ–≤–æ –µ—Å—Ç—å –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö"),
        ("–Ω–µ–ø–æ–Ω—è—Ç–Ω–∞—è—Ç—Ä–∞—Ç–∞ 500", "–°–ª–æ–≤–∞ –Ω–µ—Ç –Ω–∏–≥–¥–µ - –¥–æ–ª–∂–µ–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è AI"),
        ("–±—É—Ä–≥–µ—Ä 300", "–°–ª–æ–≤–æ –µ—Å—Ç—å –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö"),
    ]
    
    for text, description in test_cases:
        print(f"\nüìù –¢–µ—Å—Ç: '{text}'")
        print(f"   ({description})")
        print("-" * 40)
        
        # 1. –ë–ï–ó AI
        print("\n1Ô∏è‚É£ –ë–ï–ó AI (use_ai=False):")
        parsed_no_ai = await parse_expense_message(text, user_id=user_id, profile=profile, use_ai=False)
        if parsed_no_ai:
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {parsed_no_ai['category']}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {parsed_no_ai.get('confidence', 0):.2%}")
            if parsed_no_ai.get('ai_enhanced'):
                print(f"   AI: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è")
            else:
                print(f"   AI: –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è")
        
        # 2. –° AI
        print("\n2Ô∏è‚É£ –° AI (use_ai=True):")
        parsed_with_ai = await parse_expense_message(text, user_id=user_id, profile=profile, use_ai=True)
        if parsed_with_ai:
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {parsed_with_ai['category']}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {parsed_with_ai.get('confidence', 0):.2%}")
            if parsed_with_ai.get('ai_enhanced'):
                print(f"   ‚ú® AI: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è ({parsed_with_ai.get('ai_provider', 'unknown')})")
            else:
                print(f"   AI: –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è (–Ω–∞—à–ª–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)")
    
    print("\n" + "=" * 80)
    print("–ü–û–õ–ù–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–ò:")
    print("=" * 80)
    print("""
1. categorize_expense_with_weights() - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç CategoryKeyword –≤ –ë–î
   ‚Üì –Ω–µ –Ω–∞—à–ª–∏
   
2. categorize_expense() - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç CATEGORY_KEYWORDS –≤ –∫–æ–¥–µ  
   ‚Üì –Ω–µ –Ω–∞—à–ª–∏ –ò–õ–ò –Ω–∞—à–ª–∏, –Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   
3. AI Service (–µ—Å–ª–∏ use_ai=True) - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å —É—á–µ—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   - OpenAI / Gemini / Claude (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫)
   - –£—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞—Ç
   - –í—ã–±–∏—Ä–∞–µ—Ç –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   ‚Üì AI –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é
   
4. get_or_create_category() - –º–∞–ø–ø–∏–Ω–≥ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   ‚Üì –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é
   
5. "üí∞ –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã" - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π fallback
    """)
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –ë–î
    @sync_to_async
    def check_keywords():
        keywords = CategoryKeyword.objects.filter(
            category__profile=profile
        ).values_list('keyword', flat=True)
        return list(keywords)
    
    db_keywords = await check_keywords()
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –ë–î: {len(db_keywords)}")
    if db_keywords:
        print(f"   –ü—Ä–∏–º–µ—Ä—ã: {', '.join(db_keywords[:5])}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_full_chain())