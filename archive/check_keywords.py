#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import django
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
django.setup()

from expenses.models import Profile, ExpenseCategory, CategoryKeyword

# –í–∞—à telegram ID
user_id = 881292737

try:
    profile = Profile.objects.get(telegram_id=user_id)
    print(f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω: {profile.telegram_id}")
    
    categories = ExpenseCategory.objects.filter(profile=profile)
    
    print("\n" + "=" * 60)
    print("–ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    for cat in categories:
        keywords = CategoryKeyword.objects.filter(category=cat).order_by('-usage_count')
        
        if keywords.exists():
            print(f"\nüìÅ {cat.name}:")
            for kw in keywords[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                weight_str = f"(–≤–µ—Å: {kw.normalized_weight:.2f})" if kw.normalized_weight != 1.0 else ""
                print(f"  - '{kw.keyword}' (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {kw.usage_count}) {weight_str}")
            
            if keywords.count() > 10:
                print(f"  ... –∏ –µ—â–µ {keywords.count() - 10} —Å–ª–æ–≤")
    
    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    total_keywords = CategoryKeyword.objects.filter(category__profile=profile).count()
    print(f"\nüìä –í—Å–µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –ë–î: {total_keywords}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Å–ª–æ–≤–∞ (–≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö)
    print("\n" + "=" * 60)
    print("–ö–û–ù–§–õ–ò–ö–¢–£–Æ–©–ò–ï –°–õ–û–í–ê (–≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö):")
    print("=" * 60)
    
    from django.db.models import Count
    conflicting = CategoryKeyword.objects.filter(
        category__profile=profile
    ).values('keyword').annotate(
        count=Count('id')
    ).filter(count__gt=1).order_by('-count')
    
    if conflicting:
        for conf in conflicting[:10]:
            word = conf['keyword']
            print(f"\n'{word}' –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ {conf['count']} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö:")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –∫–∞–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
            kws = CategoryKeyword.objects.filter(
                category__profile=profile,
                keyword=word
            ).select_related('category')
            
            for kw in kws:
                print(f"  - {kw.category.name}: –≤–µ—Å {kw.normalized_weight:.2f}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π {kw.usage_count}")
    else:
        print("\n–ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Å–ª–æ–≤")
        
except Profile.DoesNotExist:
    print(f"–ü—Ä–æ—Ñ–∏–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()