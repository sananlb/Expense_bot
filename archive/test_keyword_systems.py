#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
"""

import os
import sys
import django
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
django.setup()

from bot.utils.expense_categorizer import categorize_expense, categorize_expense_with_weights, categorize_expense_smart
from expenses.models import Profile, ExpenseCategory, CategoryKeyword, CATEGORY_KEYWORDS

# –í–∞—à telegram ID
user_id = 881292737

def test_keyword_systems():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    
    try:
        profile = Profile.objects.get(telegram_id=user_id)
    except Profile.DoesNotExist:
        print("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    test_cases = [
        "–∫–∞–ø—É—á–∏–Ω–æ",
        "–∫–æ—Ñ–µ",
        "–ø–∏—Ü—Ü–∞",
        "—Ç–∞–∫—Å–∏",
        "–ø—Ä–æ–¥—É–∫—Ç—ã",
        "–±–µ–Ω–∑–∏–Ω",
    ]
    
    print("=" * 80)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –°–ò–°–¢–ï–ú –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–ò")
    print("=" * 80)
    
    for text in test_cases:
        print(f"\nüìù –¢–µ–∫—Å—Ç: '{text}'")
        print("-" * 40)
        
        # 1. –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è (–∏–∑ CATEGORY_KEYWORDS)
        cat_static, conf_static, _ = categorize_expense(text)
        print(f"1Ô∏è‚É£ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è (–∏–∑ –∫–æ–¥–∞):")
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_static}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf_static:.2%}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–æ –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö
        found_in_static = False
        for cat_name, keywords in CATEGORY_KEYWORDS.items():
            if any(text.lower() in kw.lower() or kw.lower() in text.lower() for kw in keywords):
                found_in_static = True
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ CATEGORY_KEYWORDS['{cat_name}']")
                break
        if not found_in_static:
            print(f"   ‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö")
        
        # 2. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è (–∏–∑ –ë–î —Å –≤–µ—Å–∞–º–∏)
        cat_dynamic, conf_dynamic, _ = categorize_expense_with_weights(text, profile)
        print(f"\n2Ô∏è‚É£ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è (–∏–∑ –ë–î —Å –≤–µ—Å–∞–º–∏):")
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_dynamic}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf_dynamic:.2%}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–æ –≤ –ë–î
        keywords_in_db = CategoryKeyword.objects.filter(
            category__profile=profile,
            keyword__icontains=text.lower()
        )
        if keywords_in_db.exists():
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –ë–î:")
            for kw in keywords_in_db:
                print(f"      - '{kw.keyword}' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{kw.category.name}'")
                print(f"        –í–µ—Å: {kw.normalized_weight:.2f}, –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {kw.usage_count}")
        else:
            print(f"   ‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏")
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î, —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –æ—Ç–∫–∞—Ç–∏—Ç—å—Å—è –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π
            if cat_dynamic == cat_static:
                print(f"   ‚Ü©Ô∏è –û—Ç–∫–∞—Ç–∏–ª–∞—Å—å –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        # 3. –£–º–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
        cat_smart, conf_smart, _ = categorize_expense_smart(text, profile)
        print(f"\n3Ô∏è‚É£ –£–º–Ω–∞—è (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è):")
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_smart}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf_smart:.2%}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑:")
        if cat_static == cat_dynamic == cat_smart:
            print(f"   ‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –¥–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        else:
            print(f"   ‚ö†Ô∏è –ú–µ—Ç–æ–¥—ã –¥–∞–ª–∏ —Ä–∞–∑–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            if cat_static != cat_dynamic:
                print(f"      –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è: {cat_static} vs –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è: {cat_dynamic}")
            if cat_dynamic != cat_smart:
                print(f"      –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è: {cat_dynamic} vs –£–º–Ω–∞—è: {cat_smart}")
    
    print("\n" + "=" * 80)
    print("–í–´–í–û–î–´:")
    print("=" * 80)
    print("""
1. –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç CATEGORY_KEYWORDS –∏–∑ –∫–æ–¥–∞
2. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç –≤ –ë–î (CategoryKeyword), –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç - –æ—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π
3. –£–º–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è - —ç—Ç–æ –æ–±–µ—Ä—Ç–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ–∂–¥—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π
4. –í–µ—Å–∞ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –¢–û–õ–¨–ö–û –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –ë–î
5. –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ù–ï –∏–º–µ—é—Ç –≤–µ—Å–æ–≤ (–≤—Å–µ —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω—ã)
    """)

if __name__ == "__main__":
    test_keyword_systems()