#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import sys
import os
import io

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è –≤—ã–≤–æ–¥–∞
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
import django
django.setup()

from expenses.models import ExpenseCategory, Profile
from bot.services.category import get_user_categories


async def test_categories_display():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    print("=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    test_user_id = 123456789
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile = await Profile.objects.filter(telegram_id=test_user_id).afirst()
        
        if not profile:
            print(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é get_user_categories
        categories = await get_user_categories(test_user_id)
        
        print(f"\nüìÅ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
        print("-" * 40)
        
        if categories:
            for i, cat in enumerate(categories, 1):
                print(f"{i}. {cat.name}")
                print(f"   ID: {cat.id}")
                print(f"   –ê–∫—Ç–∏–≤–Ω–∞: {'‚úÖ' if cat.is_active else '‚ùå'}")
                if hasattr(cat, 'keywords') and cat.keywords:
                    print(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {cat.keywords[:50]}...")
                print()
        else:
            print("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        print("\n" + "=" * 60)
        print("–ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–ù–´–• –ö–ê–¢–ï–ì–û–†–ò–ô")
        print("=" * 60)
        
        # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_categories = await ExpenseCategory.objects.filter(
            profile=profile,
            is_active=True
        ).aorder_by('id').aall()
        
        print(f"–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(all_categories)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if len(all_categories) == len(categories):
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è get_user_categories –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        else:
            print(f"‚ö†Ô∏è –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: –≤ –ë–î {len(all_categories)}, —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ {len(categories)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
        print("\n" + "=" * 60)
        print("–ü–†–û–í–ï–†–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ò '–ü–†–û–ß–ò–ï –†–ê–°–•–û–î–´'")
        print("=" * 60)
        
        other_category = None
        for cat in categories:
            if cat.name == "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã" or cat.name == "üî∏ –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã":
                other_category = cat
                break
        
        if other_category:
            print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã' –Ω–∞–π–¥–µ–Ω–∞ (ID: {other_category.id})")
        else:
            print("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            print("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å...")
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã" –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            other_category = await ExpenseCategory.objects.acreate(
                profile=profile,
                name="üî∏ –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã",
                keywords="–ø—Ä–æ—á–µ–µ, –¥—Ä—É–≥–æ–µ, —Ä–∞–∑–Ω–æ–µ",
                is_active=True
            )
            print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã' —Å–æ–∑–¥–∞–Ω–∞ (ID: {other_category.id})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢")
    print("=" * 60)
    print("–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("–±—ã–ª–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏—é.")
    print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è callback, –∞ –Ω–µ message")
    print("–ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.")


if __name__ == "__main__":
    asyncio.run(test_categories_display())