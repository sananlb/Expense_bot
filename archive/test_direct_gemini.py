"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Gemini API –±–µ–∑ asyncio.to_thread
"""
import os
import sys
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')

from expense_bot import settings
import google.generativeai as genai

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á
api_key = settings.GOOGLE_API_KEYS[0] if settings.GOOGLE_API_KEYS else None
if not api_key:
    print("No API key found!")
    exit(1)

print(f"Using API key: {api_key[:10]}...")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º
genai.configure(api_key=api_key)

# –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
print("Creating model...")
model = genai.GenerativeModel('gemini-1.5-flash')

# –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
prompt = """–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –≤ –±–æ—Ç–µ –¥–ª—è —É—á–µ—Ç–∞ –ª–∏—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞—Ç—ã.

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞—Ç–µ:
–û–ø–∏—Å–∞–Ω–∏–µ: "—Ç–∞–±—É—Ä–µ—Ç"
–°—É–º–º–∞: 3000 RUB

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- üõí –ü—Ä–æ–¥—É–∫—Ç—ã
- üçΩÔ∏è –ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã  
- üè† –ñ–∏–ª—å–µ
- üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
- üí∞ –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã

–í–ê–ñ–ù–û:
1. –í—ã–±–µ—Ä–∏ –¢–û–õ–¨–ö–û –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ
2. –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ª–∏—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
3. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω, –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ–±—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é

–í–µ—Ä–Ω–∏ JSON:
{
    "category": "–≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞",
    "confidence": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1,
    "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞"
}"""

print("Sending request to Gemini...")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è JSON
generation_config = genai.GenerationConfig(
    temperature=0.1,
    max_output_tokens=1000,
    response_mime_type="application/json"
)

try:
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
    response = model.generate_content(prompt, generation_config=generation_config)
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∂–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
    import json
    result = json.loads(response.text)
    print(f"Response received!")
    cat = result.get('category', 'unknown')
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∂–∏
    cat_clean = ''.join(c for c in cat if ord(c) < 128).strip()
    print(f"Category: {cat_clean}")
    print(f"Confidence: {result.get('confidence', 0)}")
    reasoning = result.get('reasoning', 'none')
    reasoning_clean = ''.join(c for c in reasoning if ord(c) < 128).strip()
    print(f"Reasoning: {reasoning_clean}")
except Exception as e:
    print(f"Error: {e}")
    import traceback
    traceback.print_exc()