import sqlite3
from datetime import datetime, date, time as datetime_time
from decimal import Decimal
from expenses.models import Profile, ExpenseCategory, Expense, RecurringPayment

print("=" * 50)
print("–ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ò–ó SQLITE –í POSTGRESQL")
print("=" * 50)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite
conn = sqlite3.connect('/tmp/expense_bot.db')
conn.row_factory = sqlite3.Row
cursor = conn.cursor()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ –±–∞–∑–µ
cursor.execute("SELECT COUNT(*) as cnt FROM users_profile")
users_count = cursor.fetchone()['cnt']
cursor.execute("SELECT COUNT(*) as cnt FROM expenses_expense")
expenses_count = cursor.fetchone()['cnt']
cursor.execute("SELECT COUNT(*) as cnt FROM expenses_category")
categories_count = cursor.fetchone()['cnt']

print(f"\n–î–∞–Ω–Ω—ã–µ –≤ SQLite:")
print(f"  –ü—Ä–æ—Ñ–∏–ª–µ–π: {users_count}")
print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {categories_count}")
print(f"  –†–∞—Å—Ö–æ–¥–æ–≤: {expenses_count}")

# –°–û–ó–î–ê–ï–ú –ú–ê–ü–ü–ò–ù–ì –ü–†–û–§–ò–õ–ï–ô (—É–∂–µ —Å–æ–∑–¥–∞–Ω—ã –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∑–∞–ø—É—Å–∫–µ)
print("\n1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏...")
cursor.execute("SELECT id, telegram_id FROM users_profile")
profile_rows = cursor.fetchall()
profile_map = {}

for row in profile_rows:
    try:
        profile = Profile.objects.get(telegram_id=row['telegram_id'])
        profile_map[row['id']] = profile
        print(f"  ‚úì –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: {row['telegram_id']}")
    except Profile.DoesNotExist:
        print(f"  ‚úó –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {row['telegram_id']}")

print(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞: {len(profile_map)}")

# –ú–ò–ì–†–ê–¶–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô
print("\n2. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
cursor.execute("SELECT * FROM expenses_category")
categories = cursor.fetchall()
category_map = {}

for row in categories:
    try:
        profile = profile_map.get(row['profile_id'])
        if not profile:
            print(f"  ! –ü—Ä–æ—Ñ–∏–ª—å id={row['profile_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        category, created = ExpenseCategory.objects.update_or_create(
            profile=profile,
            name=row['name'],
            defaults={
                'name_ru': row['name_ru'] or row['name'],
                'name_en': row['name_en'],
                'icon': row['icon'] or 'üí∞',
                'is_active': bool(row['is_active']) if row['is_active'] is not None else True,
                'original_language': row['original_language'] or 'ru',
                'is_translatable': bool(row['is_translatable']) if row['is_translatable'] is not None else True,
            }
        )
        category_map[row['id']] = category

        if created:
            print(f"  + –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {row['name']}")
        else:
            print(f"  ~ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {row['name']}")

    except Exception as e:
        print(f"  ! –û—à–∏–±–∫–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π {row['name']}: {e}")

print(f"–ò—Ç–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(category_map)}")

# –ú–ò–ì–†–ê–¶–ò–Ø –†–ê–°–•–û–î–û–í
print("\n3. –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã...")
cursor.execute("SELECT * FROM expenses_expense ORDER BY created_at")
expenses = cursor.fetchall()

migrated = 0
errors = 0

for i, row in enumerate(expenses, 1):
    try:
        profile = profile_map.get(row['profile_id'])
        if not profile:
            errors += 1
            continue

        category = category_map.get(row['category_id']) if row['category_id'] else None

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        expense_date = date.today()
        if row['expense_date']:
            try:
                expense_date = date.fromisoformat(row['expense_date'])
            except:
                expense_date = date.today()

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        expense_time = datetime.now().time()
        if row['expense_time']:
            try:
                expense_time = datetime_time.fromisoformat(row['expense_time'])
            except:
                expense_time = datetime.now().time()

        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ö–æ–¥
        expense = Expense.objects.create(
            profile=profile,
            amount=Decimal(str(row['amount'])),
            category=category,
            description=row['description'] or '',
            expense_date=expense_date,
            expense_time=expense_time,
            currency=row['currency'] or 'RUB',
            payment_method=row['payment_method'] if row['payment_method'] else 'cash',
            is_deleted=bool(row['is_deleted']) if row['is_deleted'] else False,
            ai_categorized=bool(row['ai_categorized']) if row['ai_categorized'] else False,
            ai_confidence=Decimal(str(row['ai_confidence'])) if row['ai_confidence'] else None,
        )
        migrated += 1

        if migrated % 20 == 0:
            print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {migrated} —Ä–∞—Å—Ö–æ–¥–æ–≤...")

    except Exception as e:
        errors += 1
        if errors <= 5:
            print(f"  ! –û—à–∏–±–∫–∞ —Å —Ä–∞—Å—Ö–æ–¥–æ–º #{i}: {e}")

print(f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {migrated} –∏–∑ {len(expenses)}")
if errors > 0:
    print(f"–û—à–∏–±–æ–∫: {errors}")

# –ú–ò–ì–†–ê–¶–ò–Ø –†–ï–ì–£–õ–Ø–†–ù–´–• –ü–õ–ê–¢–ï–ñ–ï–ô
print("\n4. –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏...")
cursor.execute("SELECT * FROM expenses_recurring_payment")
recurring_rows = cursor.fetchall()

recurring_count = 0
for row in recurring_rows:
    try:
        profile = profile_map.get(row['profile_id'])
        if not profile:
            print(f"  ! –ü—Ä–æ—Ñ–∏–ª—å id={row['profile_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue

        category = category_map.get(row['category_id']) if row['category_id'] else None

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        next_payment_date = None
        if row['next_payment_date']:
            try:
                next_payment_date = date.fromisoformat(row['next_payment_date'])
            except:
                pass

        RecurringPayment.objects.create(
            profile=profile,
            amount=Decimal(str(row['amount'])),
            category=category,
            description=row['description'] or '–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂',
            frequency=row['frequency'] or 'monthly',
            next_payment_date=next_payment_date,
            is_active=bool(row['is_active']) if row['is_active'] is not None else True,
            payment_day=row['payment_day'] or 1,
            reminder_enabled=bool(row['reminder_enabled']) if row['reminder_enabled'] is not None else True,
        )
        recurring_count += 1
        print(f"  + –°–æ–∑–¥–∞–Ω —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {row['description'] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}")

    except Exception as e:
        print(f"  ! –û—à–∏–±–∫–∞ —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º: {e}")

print(f"–ò—Ç–æ–≥–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {recurring_count}")

conn.close()

# –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
print("\n" + "=" * 50)
print("–ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
print("=" * 50)
print("\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ PostgreSQL:")
print(f"  –ü—Ä–æ—Ñ–∏–ª–µ–π: {Profile.objects.count()}")
print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {ExpenseCategory.objects.count()}")
print(f"  –†–∞—Å—Ö–æ–¥–æ–≤: {Expense.objects.count()}")
print(f"  –†–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {RecurringPayment.objects.count()}")

# –î–µ—Ç–∞–ª–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
print("\n–î–µ—Ç–∞–ª–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
for profile in Profile.objects.all():
    expenses = Expense.objects.filter(profile=profile)
    expense_count = expenses.count()
    total_amount = sum(e.amount for e in expenses) if expense_count > 0 else 0
    categories = ExpenseCategory.objects.filter(profile=profile).count()
    recurring = RecurringPayment.objects.filter(profile=profile).count()

    if expense_count > 0 or categories > 0:
        print(f"  {profile.telegram_id}:")
        print(f"    - –†–∞—Å—Ö–æ–¥–æ–≤: {expense_count} –Ω–∞ —Å—É–º–º—É {total_amount:.2f}")
        print(f"    - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {categories}")
        print(f"    - –†–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {recurring}")

print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: docker-compose restart bot")