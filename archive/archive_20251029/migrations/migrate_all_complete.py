#!/usr/bin/env python
"""
–ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –í–°–ï–• –î–ê–ù–ù–´–• –ò–ó SQLITE –í POSTGRESQL
"""
import sqlite3
from datetime import datetime, date, time as datetime_time
from decimal import Decimal

print("=" * 50)
print("–ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –í–°–ï–• –î–ê–ù–ù–´–•")
print("=" * 50)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite
conn = sqlite3.connect('/tmp/expense_bot.db')
conn.row_factory = sqlite3.Row
cursor = conn.cursor()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ –±–∞–∑–µ
cursor.execute("SELECT COUNT(*) FROM users_profile")
total_profiles = cursor.fetchone()[0]
cursor.execute("SELECT COUNT(*) FROM expenses_expense")
total_expenses = cursor.fetchone()[0]
cursor.execute("SELECT COUNT(*) FROM expenses_category")
total_categories = cursor.fetchone()[0]
cursor.execute("SELECT COUNT(*) FROM households")
total_households = cursor.fetchone()[0]

print(f"\n–î–∞–Ω–Ω—ã–µ –≤ SQLite –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:")
print(f"  –ü—Ä–æ—Ñ–∏–ª–µ–π: {total_profiles}")
print(f"  –î–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤: {total_households}")
print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {total_categories}")
print(f"  –†–∞—Å—Ö–æ–¥–æ–≤: {total_expenses}")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ Django
from expenses.models import Profile, Household, ExpenseCategory, Expense, RecurringPayment, UserSettings

# –û–ß–ò–°–¢–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –î–ê–ù–ù–´–•
print("\n1. –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL...")
Expense.objects.all().delete()
ExpenseCategory.objects.all().delete()
RecurringPayment.objects.all().delete()
UserSettings.objects.all().delete()
Profile.objects.all().delete()
Household.objects.all().delete()
print("  ‚úì –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞")

# –ú–ò–ì–†–ê–¶–ò–Ø –î–û–ú–û–•–û–ó–Ø–ô–°–¢–í
print("\n2. –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–∞...")
cursor.execute("SELECT * FROM households")
households = cursor.fetchall()
household_map = {}

for row in households:
    household = Household.objects.create(
        id=row['id'],
        name=row['name'] or f"Household {row['id']}",
        is_active=bool(row['is_active']) if row['is_active'] is not None else True,
        max_members=row['max_members'] or 5,
        created_at=datetime.fromisoformat(row['created_at']) if row['created_at'] else datetime.now()
    )
    household_map[row['id']] = household
    print(f"  + –î–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–æ: {household.name} (ID={household.id})")

print(f"  –ò—Ç–æ–≥–æ –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤: {len(household_map)}")

# –ú–ò–ì–†–ê–¶–ò–Ø –ü–†–û–§–ò–õ–ï–ô
print("\n3. –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
cursor.execute("SELECT * FROM users_profile")
profiles = cursor.fetchall()
profile_map = {}

for row in profiles:
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    household = household_map.get(row['household_id']) if row['household_id'] else None

    profile = Profile.objects.create(
        id=row['id'],
        telegram_id=row['telegram_id'],
        language_code=row['language_code'] or 'ru',
        timezone=row['timezone'] or 'Europe/Moscow',
        currency=row['currency'] or 'RUB',
        is_active=bool(row['is_active']) if row['is_active'] is not None else True,
        created_at=datetime.fromisoformat(row['created_at']) if row['created_at'] else datetime.now(),
        updated_at=datetime.fromisoformat(row['updated_at']) if row['updated_at'] else datetime.now(),
        is_beta_tester=bool(row['is_beta_tester']) if row['is_beta_tester'] else False,
        household=household,
        referral_code=row['referral_code'],
        last_activity=datetime.fromisoformat(row['last_activity']) if row['last_activity'] else None,
    )
    profile_map[row['id']] = profile

    household_info = f", –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–æ={household.name}" if household else ""
    print(f"  + –ü—Ä–æ—Ñ–∏–ª—å: {row['telegram_id']} (ID={row['id']}{household_info})")

print(f"  –ò—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(profile_map)}")

# –ú–ò–ì–†–ê–¶–ò–Ø –ù–ê–°–¢–†–û–ï–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
print("\n4. –ú–∏–≥—Ä–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
cursor.execute("SELECT * FROM users_settings")
settings_rows = cursor.fetchall()

for row in settings_rows:
    profile = profile_map.get(row['profile_id'])
    if profile:
        settings = UserSettings.objects.create(
            profile=profile,
            view_scope=row['view_scope'] if 'view_scope' in row.keys() else 'personal',
            notifications_enabled=bool(row['notifications_enabled']) if 'notifications_enabled' in row.keys() else True,
        )
        print(f"  + –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {profile.telegram_id}: view_scope={settings.view_scope}")

print(f"  –ò—Ç–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {len(settings_rows)}")

# –ú–ò–ì–†–ê–¶–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô
print("\n5. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
cursor.execute("SELECT * FROM expenses_category")
categories = cursor.fetchall()
category_map = {}

for row in categories:
    profile = profile_map.get(row['profile_id'])
    if not profile:
        continue

    category = ExpenseCategory.objects.create(
        id=row['id'],
        profile=profile,
        name=row['name'],
        name_ru=row['name_ru'] or row['name'],
        name_en=row['name_en'],
        icon=row['icon'] or 'üí∞',
        is_active=bool(row['is_active']) if row['is_active'] is not None else True,
        created_at=datetime.fromisoformat(row['created_at']) if row['created_at'] else datetime.now(),
        updated_at=datetime.fromisoformat(row['updated_at']) if row['updated_at'] else datetime.now(),
    )
    category_map[row['id']] = category

print(f"  –ò—Ç–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(category_map)}")

# –ú–ò–ì–†–ê–¶–ò–Ø –†–ê–°–•–û–î–û–í
print("\n6. –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã...")
cursor.execute("SELECT * FROM expenses_expense ORDER BY created_at")
expenses = cursor.fetchall()

migrated = 0
for row in expenses:
    profile = profile_map.get(row['profile_id'])
    if not profile:
        continue

    category = category_map.get(row['category_id']) if row['category_id'] else None

    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    expense_date = date.fromisoformat(row['expense_date']) if row['expense_date'] else date.today()
    expense_time = datetime_time.fromisoformat(row['expense_time']) if row['expense_time'] else datetime.now().time()

    expense = Expense.objects.create(
        profile=profile,
        amount=Decimal(str(row['amount'])),
        category=category,
        description=row['description'] or '',
        expense_date=expense_date,
        expense_time=expense_time,
        currency=row['currency'] or 'RUB',
        created_at=datetime.fromisoformat(row['created_at']) if row['created_at'] else datetime.now(),
        updated_at=datetime.fromisoformat(row['updated_at']) if row['updated_at'] else datetime.now(),
        payment_method=row['payment_method'] if row['payment_method'] else 'cash',
        is_deleted=bool(row['is_deleted']) if row['is_deleted'] else False,
        ai_categorized=bool(row['ai_categorized']) if row['ai_categorized'] else False,
        ai_confidence=Decimal(str(row['ai_confidence'])) if row['ai_confidence'] else None,
    )
    migrated += 1

    if migrated % 20 == 0:
        print(f"  –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated} —Ä–∞—Å—Ö–æ–¥–æ–≤...")

print(f"  –ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {migrated}")

# –ú–ò–ì–†–ê–¶–ò–Ø –†–ï–ì–£–õ–Ø–†–ù–´–• –ü–õ–ê–¢–ï–ñ–ï–ô
print("\n7. –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏...")
cursor.execute("SELECT * FROM expenses_recurring_payment")
recurring_rows = cursor.fetchall()

for row in recurring_rows:
    profile = profile_map.get(row['profile_id'])
    if not profile:
        continue

    category = category_map.get(row['category_id']) if row['category_id'] else None

    RecurringPayment.objects.create(
        profile=profile,
        amount=Decimal(str(row['amount'])),
        expense_category=category,
        description=row['description'] or '',
        operation_type='expense',
        period_type=row['frequency'] if row['frequency'] else 'monthly',
        start_date=date.fromisoformat(row['start_date']) if row['start_date'] else date.today(),
        next_payment_date=date.fromisoformat(row['next_payment_date']) if row['next_payment_date'] else None,
        is_active=bool(row['is_active']) if row['is_active'] is not None else True,
        payment_day=row['payment_day'] or 1,
    )

print(f"  –ò—Ç–æ–≥–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {len(recurring_rows)}")

conn.close()

# –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
print("\n" + "=" * 50)
print("–ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ú–ò–ì–†–ê–¶–ò–ò")
print("=" * 50)

print(f"\n–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ PostgreSQL:")
print(f"  –î–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤: {Household.objects.count()}")
print(f"  –ü—Ä–æ—Ñ–∏–ª–µ–π: {Profile.objects.count()}")
print(f"  –ù–∞—Å—Ç—Ä–æ–µ–∫: {UserSettings.objects.count()}")
print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {ExpenseCategory.objects.count()}")
print(f"  –†–∞—Å—Ö–æ–¥–æ–≤: {Expense.objects.count()}")
print(f"  –†–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {RecurringPayment.objects.count()}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 881292737
print("\n" + "=" * 50)
print("–ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 881292737")
print("=" * 50)

try:
    profile = Profile.objects.get(telegram_id=881292737)
    expenses = Expense.objects.filter(profile=profile)
    categories = ExpenseCategory.objects.filter(profile=profile)

    print(f"‚úì –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω:")
    print(f"  ID: {profile.id}")
    print(f"  –î–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–æ: {profile.household.name if profile.household else '–ù–ï–¢'}")
    print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {categories.count()}")
    print(f"  –†–∞—Å—Ö–æ–¥–æ–≤: {expenses.count()}")

    if expenses.exists():
        total = sum(e.amount for e in expenses)
        print(f"  –û–±—â–∞—è —Å—É–º–º–∞: {total:.2f} —Ä—É–±")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–∞—Å—Ö–æ–¥–æ–≤
        print(f"\n  –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–∞—Å—Ö–æ–¥–æ–≤:")
        for e in expenses.order_by('-expense_date', '-expense_time')[:5]:
            cat_name = e.category.name if e.category else '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
            print(f"    {e.expense_date}: {e.amount:.2f} - {cat_name} - {e.description[:30]}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    try:
        settings = UserSettings.objects.get(profile=profile)
        print(f"\n  –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"    view_scope: {settings.view_scope}")
    except UserSettings.DoesNotExist:
        print(f"\n  ‚ö† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

except Profile.DoesNotExist:
    print("‚ùå –ü—Ä–æ—Ñ–∏–ª—å 881292737 –ù–ï –ù–ê–ô–î–ï–ù!")

print("\n‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
print("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: docker-compose restart bot")