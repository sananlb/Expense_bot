#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ callback –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–≥–æ–≤

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python analyze_callbacks.py                    # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    python analyze_callbacks.py --days 7           # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    python analyze_callbacks.py --user 123456789   # –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import json
import argparse
from collections import Counter, defaultdict
from datetime import datetime, timedelta
from pathlib import Path
import sys


def parse_log_line(line: str) -> dict:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    try:
        # –õ–æ–≥–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "INFO timestamp module {json}"
        # –ò—â–µ–º JSON –≤ —Å—Ç—Ä–æ–∫–µ
        json_start = line.find('{')
        if json_start == -1:
            return None

        json_str = line[json_start:]
        return json.loads(json_str)
    except (json.JSONDecodeError, ValueError):
        return None


def analyze_callbacks(log_file: str = 'logs/callback_tracking.log',
                     days: int = 1,
                     user_id: int = None,
                     verbose: bool = False):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç callback –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –ª–æ–≥–æ–≤

    Args:
        log_file: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
        days: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        verbose: –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    """
    log_path = Path(log_file)

    if not log_path.exists():
        print(f"‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file}")
        print(f"üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ª–æ–≥–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è")
        return

    # –°—á–µ—Ç—á–∏–∫–∏
    actions = Counter()
    users = Counter()
    hourly_activity = defaultdict(int)
    user_actions = defaultdict(lambda: Counter())
    callback_data_examples = defaultdict(list)

    # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    cutoff = datetime.now() - timedelta(days=days)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_lines = 0
    parsed_lines = 0
    filtered_lines = 0

    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ callback –ª–æ–≥–æ–≤...")
    print(f"üìÅ –§–∞–π–ª: {log_file}")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π")
    if user_id:
        print(f"üë§ –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_id}")
    print()

    # –ß–∏—Ç–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª
    with open(log_path, 'r', encoding='utf-8') as f:
        for line in f:
            total_lines += 1
            data = parse_log_line(line)

            if not data:
                continue

            parsed_lines += 1

            # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            try:
                timestamp = datetime.fromisoformat(data.get('timestamp', ''))
                if timestamp < cutoff:
                    continue
            except (ValueError, TypeError):
                continue

            # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if user_id and data.get('user_id') != user_id:
                continue

            filtered_lines += 1

            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            action = data.get('callback_action', 'unknown')
            actions[action] += 1

            uid = data.get('user_id')
            if uid:
                users[uid] += 1
                user_actions[uid][action] += 1

            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º
            try:
                hour = timestamp.hour
                hourly_activity[hour] += 1
            except:
                pass

            # –ü—Ä–∏–º–µ—Ä—ã callback_data –¥–ª—è –∫–∞–∂–¥–æ–≥–æ action
            callback_data = data.get('callback_data', '')
            if callback_data and len(callback_data_examples[action]) < 3:
                callback_data_examples[action].append(callback_data)

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {total_lines}")
    print(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ JSON: {parsed_lines}")
    print(f"üéØ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {filtered_lines}")
    print()

    if filtered_lines == 0:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   - –£–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥ (--days 7)")
        print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        print("   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–∂–∏–º–∞—é—Ç –∫–Ω–æ–ø–∫–∏")
        return

    # –¢–æ–ø –¥–µ–π—Å—Ç–≤–∏–π
    print("üîù –¢–æ–ø-15 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:")
    print("‚îÄ" * 50)
    for i, (action, count) in enumerate(actions.most_common(15), 1):
        percentage = (count / filtered_lines) * 100
        bar = "‚ñà" * int(percentage / 2)
        print(f"{i:2d}. {action:20s} ‚îÇ {count:4d} ({percentage:5.1f}%) {bar}")

        # –ü—Ä–∏–º–µ—Ä—ã callback_data
        if verbose and action in callback_data_examples:
            examples = callback_data_examples[action]
            print(f"    –ü—Ä–∏–º–µ—Ä—ã: {', '.join(examples[:3])}")

    print()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    print(f"üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    print("‚îÄ" * 50)
    print(f"   –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(users)}")
    print(f"   –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {sum(actions.values())}")

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    avg_per_user = (sum(actions.values()) / len(users)) if len(users) > 0 else 0
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {avg_per_user:.1f}")
    print()

    # –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not user_id:
        print("üèÜ –¢–æ–ø-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        print("‚îÄ" * 50)
        for i, (uid, count) in enumerate(users.most_common(5), 1):
            print(f"{i}. User ID {uid}: {count} –¥–µ–π—Å—Ç–≤–∏–π")

            # –¢–æ–ø –¥–µ–π—Å—Ç–≤–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if verbose:
                user_top_actions = user_actions[uid].most_common(3)
                for action, cnt in user_top_actions:
                    print(f"   - {action}: {cnt}")
        print()

    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º
    if hourly_activity:
        print("‚è∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º –¥–Ω—è (UTC):")
        print("‚îÄ" * 50)
        max_hour_count = max(hourly_activity.values())
        for hour in range(24):
            count = hourly_activity.get(hour, 0)
            if count > 0:
                bar_length = int((count / max_hour_count) * 30)
                bar = "‚ñà" * bar_length
                print(f"{hour:02d}:00 ‚îÇ {count:4d} {bar}")
        print()

    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if user_id and user_id in user_actions:
        print(f"üîç –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
        print("‚îÄ" * 50)
        for action, count in user_actions[user_id].most_common(10):
            print(f"   {action:25s}: {count:3d}")
        print()


def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(
        description='–ê–Ω–∞–ª–∏–∑ callback –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –ª–æ–≥–æ–≤ Expense Bot',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python analyze_callbacks.py                    # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
  python analyze_callbacks.py --days 7           # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
  python analyze_callbacks.py --user 123456789   # –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  python analyze_callbacks.py --verbose          # –° –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
  python analyze_callbacks.py --file logs/callback_tracking.log.1  # –°—Ç–∞—Ä—ã–π –ª–æ–≥ —Ñ–∞–π–ª
        """
    )

    parser.add_argument(
        '--days',
        type=int,
        default=1,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)'
    )

    parser.add_argument(
        '--user',
        type=int,
        help='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏'
    )

    parser.add_argument(
        '--file',
        type=str,
        default='logs/callback_tracking.log',
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: logs/callback_tracking.log)'
    )

    parser.add_argument(
        '--verbose',
        '-v',
        action='store_true',
        help='–î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏'
    )

    args = parser.parse_args()

    try:
        analyze_callbacks(
            log_file=args.file,
            days=args.days,
            user_id=args.user,
            verbose=args.verbose
        )
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)


if __name__ == '__main__':
    main()
