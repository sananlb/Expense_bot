#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import os
import sys
import django
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
django.setup()

from expenses.models import Profile, ExpenseCategory, Expense
from django.db import transaction
from bot.utils.default_categories import UNIFIED_CATEGORIES


def quick_fix_user_categories(telegram_id: int, execute: bool = False):
    """
    –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        profile = Profile.objects.get(telegram_id=telegram_id)
        print(f"{'[DRY RUN] ' if not execute else ''}–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        print(f"Profile ID: {profile.id}")
        print("-" * 60)
        
        categories = profile.categories.filter(is_active=True).order_by('name')
        print(f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {categories.count()}")
        
        fixed_count = 0
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        for category in categories:
            category_issues = []
            fixes_needed = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ü—É—Å—Ç—ã–µ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è
            if not category.name_ru:
                category_issues.append("‚ùå –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ name_ru")
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–∑ name
                if category.name:
                    clean_name = category.name.replace(category.icon or '', '').strip()
                    if any(ord(c) >= 1040 and ord(c) <= 1103 for c in clean_name):  # –ï—Å—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
                        fixes_needed.append(f"name_ru = '{clean_name}'")
                        if execute:
                            category.name_ru = clean_name
            
            if not category.name_en:
                category_issues.append("‚ùå –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ name_en")
                # –ò—â–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
                if category.name_ru:
                    for unified_cat in UNIFIED_CATEGORIES:
                        if unified_cat['name_ru'].lower() == category.name_ru.lower():
                            fixes_needed.append(f"name_en = '{unified_cat['name_en']}'")
                            if execute:
                                category.name_en = unified_cat['name_en']
                            break
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ name
            if category.name_ru or category.name_en:
                user_lang = profile.language_code or 'ru'
                expected_name = f"{category.icon or ''} {category.name_ru if user_lang == 'ru' else (category.name_en or category.name_ru)}"
                expected_name = expected_name.strip()
                
                if category.name != expected_name:
                    category_issues.append(f"‚ùå –ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ name: '{category.name}' != '{expected_name}'")
                    fixes_needed.append(f"name = '{expected_name}'")
                    if execute:
                        category.name = expected_name
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if not category.original_language or category.original_language == 'mixed':
                if category.name_ru and not category.name_en:
                    fixes_needed.append("original_language = 'ru'")
                    if execute:
                        category.original_language = 'ru'
                elif category.name_en and not category.name_ru:
                    fixes_needed.append("original_language = 'en'")
                    if execute:
                        category.original_language = 'en'
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category_issues or fixes_needed:
                print(f"\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}")
                print(f"   ID: {category.id}")
                print(f"   name_ru: '{category.name_ru or 'NULL'}'")
                print(f"   name_en: '{category.name_en or 'NULL'}'")
                print(f"   original_language: {category.original_language}")
                print(f"   is_translatable: {category.is_translatable}")
                
                for issue in category_issues:
                    print(f"   {issue}")
                
                if fixes_needed:
                    print("   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
                    for fix in fixes_needed:
                        print(f"      {fix}")
                    
                    if execute:
                        category.save()
                        print("   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
                    
                    fixed_count += 1
            else:
                print(f"‚úÖ {category.name} - OK")
        
        print(f"\n{'=' * 60}")
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {fixed_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        orphaned_expenses = profile.expenses.filter(category__isnull=True).count()
        if orphaned_expenses > 0:
            print(f"‚ö†Ô∏è  –†–∞—Å—Ö–æ–¥–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {orphaned_expenses}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        existing_names = set()
        for cat in categories:
            if cat.name_ru:
                existing_names.add(cat.name_ru.lower())
            if cat.name_en:
                existing_names.add(cat.name_en.lower())
        
        missing_categories = []
        for unified_cat in UNIFIED_CATEGORIES:
            if (unified_cat['name_ru'].lower() not in existing_names and 
                unified_cat['name_en'].lower() not in existing_names):
                missing_categories.append(unified_cat)
        
        if missing_categories:
            print(f"\n‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(missing_categories)}):")
            for cat in missing_categories[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   - {cat['icon']} {cat['name_ru']} / {cat['name_en']}")
            if len(missing_categories) > 5:
                print(f"   ... –∏ –µ—â–µ {len(missing_categories) - 5}")
        
        return fixed_count
        
    except Profile.DoesNotExist:
        print(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return 0
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 0


def show_category_stats(telegram_id: int):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        profile = Profile.objects.get(telegram_id=telegram_id)
        categories = profile.categories.filter(is_active=True)
        
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {telegram_id}")
        print("=" * 60)
        
        print(f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {categories.count()}")
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        with_both_languages = categories.filter(name_ru__isnull=False, name_en__isnull=False).exclude(name_ru='').exclude(name_en='')
        only_ru = categories.filter(name_ru__isnull=False, name_en__isnull=True).exclude(name_ru='') | categories.filter(name_ru__isnull=False, name_en='').exclude(name_ru='')
        only_en = categories.filter(name_en__isnull=False, name_ru__isnull=True).exclude(name_en='') | categories.filter(name_en__isnull=False, name_ru='').exclude(name_en='')
        empty_multilingual = categories.filter(
            (models.Q(name_ru__isnull=True) | models.Q(name_ru='')) &
            (models.Q(name_en__isnull=True) | models.Q(name_en=''))
        )
        
        print(f"–° –æ–±–æ–∏–º–∏ —è–∑—ã–∫–∞–º–∏: {with_both_languages.count()}")
        print(f"–¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π: {only_ru.count()}")
        print(f"–¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: {only_en.count()}")
        print(f"–ë–µ–∑ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π: {empty_multilingual.count()}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º
        total_expenses = profile.expenses.count()
        expenses_with_category = profile.expenses.filter(category__isnull=False).count()
        
        print(f"\nüí∞ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–°–•–û–î–û–í:")
        print(f"–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expenses}")
        print(f"–° –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π: {expenses_with_category}")
        print(f"–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {total_expenses - expenses_with_category}")
        
        # –¢–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–∞—Å—Ö–æ–¥–æ–≤
        from django.db.models import Count
        top_categories = categories.annotate(
            expense_count=Count('expenses')
        ).filter(expense_count__gt=0).order_by('-expense_count')[:5]
        
        if top_categories:
            print(f"\nüèÜ –¢–û–ü-5 –ö–ê–¢–ï–ì–û–†–ò–ô –ü–û –†–ê–°–•–û–î–ê–ú:")
            for i, cat in enumerate(top_categories, 1):
                print(f"{i}. {cat.name} - {cat.expense_count} —Ä–∞—Å—Ö–æ–¥–æ–≤")
        
    except Profile.DoesNotExist:
        print(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
    print("üîß –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô")
    print("=" * 40)
    
    if len(sys.argv) > 1:
        # –ó–∞–ø—É—Å–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        telegram_id = int(sys.argv[1])
        action = sys.argv[2] if len(sys.argv) > 2 else 'check'
        execute = '--execute' in sys.argv
        
        if action == 'stats':
            show_category_stats(telegram_id)
        else:
            quick_fix_user_categories(telegram_id, execute)
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        while True:
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            print("2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            print("0. –í—ã—Ö–æ–¥")
            
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()
            
            if choice == '0':
                break
            elif choice in ['1', '2', '3']:
                telegram_id = input("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").strip()
                try:
                    telegram_id = int(telegram_id)
                    
                    if choice == '1':
                        quick_fix_user_categories(telegram_id, False)
                    elif choice == '2':
                        quick_fix_user_categories(telegram_id, True)
                    elif choice == '3':
                        show_category_stats(telegram_id)
                        
                except ValueError:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    main()