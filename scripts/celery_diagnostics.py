#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Celery –¥–ª—è ExpenseBot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –∏ –≤—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã
"""

import os
import sys
import django
from datetime import datetime, timedelta
import pytz

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/home/batman/expense_bot')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
django.setup()

from django_celery_beat.models import PeriodicTask, CrontabSchedule, IntervalSchedule
from django.conf import settings
from django.utils import timezone as django_timezone
import redis
from celery import Celery

def check_timezone():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ timezone"""
    print("=" * 50)
    print("üïê –ü–†–û–í–ï–†–ö–ê TIMEZONE")
    print("=" * 50)
    
    print(f"Django TIME_ZONE: {settings.TIME_ZONE}")
    print(f"Django USE_TZ: {settings.USE_TZ}")
    print(f"Celery TIMEZONE: {getattr(settings, 'CELERY_TIMEZONE', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
    
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    now = datetime.now()
    now_tz = django_timezone.now()
    moscow_tz = pytz.timezone('Europe/Moscow')
    moscow_time = datetime.now(moscow_tz)
    
    print(f"\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:")
    print(f"  –°–∏—Å—Ç–µ–º–Ω–æ–µ (–±–µ–∑ TZ): {now}")
    print(f"  Django (—Å TZ): {now_tz}")
    print(f"  –ú–æ—Å–∫–≤–∞: {moscow_time}")
    print()

def check_redis_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    print("=" * 50)
    print("üì° –ü–†–û–í–ï–†–ö–ê REDIS")
    print("=" * 50)
    
    try:
        r = redis.from_url(settings.CELERY_BROKER_URL)
        r.ping()
        print("‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥–∏
        queues = ['celery', 'default', 'reports', 'recurring', 'maintenance', 'notifications']
        for queue in queues:
            queue_len = r.llen(queue)
            if queue_len > 0:
                print(f"  –û—á–µ—Ä–µ–¥—å '{queue}': {queue_len} –∑–∞–¥–∞—á")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
    print()

def check_periodic_tasks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –≤ –ë–î"""
    print("=" * 50)
    print("üìã –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò –í –ë–î")
    print("=" * 50)
    
    tasks = PeriodicTask.objects.all()
    
    if not tasks:
        print("‚ö†Ô∏è –ù–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –≤ –ë–î!")
        print("–≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ - –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –≤ django_celery_beat")
        return
    
    for task in tasks:
        print(f"\nüìå –ó–∞–¥–∞—á–∞: {task.name}")
        print(f"  Enabled: {'‚úÖ' if task.enabled else '‚ùå'}")
        print(f"  Task: {task.task}")
        
        # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if task.crontab:
            cron = task.crontab
            print(f"  –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (cron): {cron.minute} {cron.hour} * * {cron.day_of_week}")
            print(f"    –í—Ä–µ–º—è: {cron.hour}:{cron.minute:02d}")
            print(f"    –î–Ω–∏ –Ω–µ–¥–µ–ª–∏: {cron.day_of_week if cron.day_of_week != '*' else '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å'}")
        elif task.interval:
            print(f"  –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {task.interval.every} {task.interval.period}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫
        if task.last_run_at:
            moscow_tz = pytz.timezone('Europe/Moscow')
            last_run_moscow = task.last_run_at.astimezone(moscow_tz)
            print(f"  –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {last_run_moscow.strftime('%Y-%m-%d %H:%M:%S')} MSK")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–Ω–∞ –ª–∏ –±—ã–ª–∞ –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è
            if task.crontab and task.crontab.hour == 10 and task.crontab.minute == 0:
                today_10am = datetime.now(moscow_tz).replace(hour=10, minute=0, second=0, microsecond=0)
                if datetime.now(moscow_tz) > today_10am:
                    if last_run_moscow.date() < today_10am.date():
                        print(f"  ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è –≤ 10:00, –Ω–æ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å!")
                    else:
                        print(f"  ‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—Å–∫–∞–ª–∞—Å—å —Å–µ–≥–æ–¥–Ω—è")
        else:
            print(f"  ‚ö†Ô∏è –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∞—Å—å!")
        
        print(f"  Total runs: {task.total_run_count}")
        print(f"  Queue: {task.queue if task.queue else 'default'}")

def check_celery_beat_schedule():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ settings.py"""
    print("\n" + "=" * 50)
    print("‚öôÔ∏è –†–ê–°–ü–ò–°–ê–ù–ò–ï –ò–ó SETTINGS.PY")
    print("=" * 50)
    
    beat_schedule = getattr(settings, 'CELERY_BEAT_SCHEDULE', {})
    
    if not beat_schedule:
        print("‚ö†Ô∏è CELERY_BEAT_SCHEDULE –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings.py!")
        return
    
    for name, config in beat_schedule.items():
        print(f"\nüìå {name}")
        print(f"  Task: {config.get('task')}")
        print(f"  Schedule: {config.get('schedule')}")
        if 'options' in config:
            print(f"  Queue: {config['options'].get('queue', 'default')}")

def check_daily_admin_report():
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É –≤ 10:00"""
    print("\n" + "=" * 50)
    print("üéØ –ü–†–û–í–ï–†–ö–ê –ó–ê–î–ê–ß–ò –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –û–¢–ß–ï–¢–ê (10:00)")
    print("=" * 50)
    
    # –ò—â–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
    task = PeriodicTask.objects.filter(
        task='expense_bot.celery_tasks.send_daily_admin_report'
    ).first()
    
    if not task:
        print("‚ùå –ó–∞–¥–∞—á–∞ 'send_daily_admin_report' –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ –ë–î!")
        print("\nüîß –†–ï–®–ï–ù–ò–ï:")
        print("–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ –ë–î. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:")
        print("""
docker exec -it expense_bot_web python manage.py shell
>>> from django_celery_beat.models import PeriodicTask, CrontabSchedule
>>> from django.utils import timezone
>>> 
>>> # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è 10:00
>>> schedule, _ = CrontabSchedule.objects.get_or_create(
...     minute=0,
...     hour=10,
...     day_of_week='*',
...     day_of_month='*',
...     month_of_year='*',
...     timezone=timezone.get_current_timezone()
... )
>>> 
>>> # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
>>> PeriodicTask.objects.create(
...     crontab=schedule,
...     name='Daily Admin Report at 10:00',
...     task='expense_bot.celery_tasks.send_daily_admin_report',
...     queue='reports',
...     enabled=True
... )
>>> exit()
        """)
        return
    
    print(f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞: {task.name}")
    print(f"  Enabled: {'‚úÖ' if task.enabled else '‚ùå –ó–ê–î–ê–ß–ê –û–¢–ö–õ–Æ–ß–ï–ù–ê!'}")
    
    if task.crontab:
        print(f"  –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {task.crontab.hour}:{task.crontab.minute:02d}")
        if task.crontab.hour != 10 or task.crontab.minute != 0:
            print("  ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –Ω–µ 10:00!")
    
    if not task.enabled:
        print("\nüîß –†–ï–®–ï–ù–ò–ï: –í–∫–ª—é—á–∏—Ç—å –∑–∞–¥–∞—á—É:")
        print("""
docker exec -it expense_bot_web python manage.py shell
>>> from django_celery_beat.models import PeriodicTask
>>> task = PeriodicTask.objects.get(task='expense_bot.celery_tasks.send_daily_admin_report')
>>> task.enabled = True
>>> task.save()
>>> exit()
        """)

def test_task_execution():
    """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ –≤—Ä—É—á–Ω—É—é"""
    print("\n" + "=" * 50)
    print("üß™ –¢–ï–°–¢ –ó–ê–ü–£–°–ö–ê –ó–ê–î–ê–ß–ò")
    print("=" * 50)
    
    print("–î–ª—è —Ç–µ—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤—Ä—É—á–Ω—É—é, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:")
    print("""
docker exec -it expense_bot_web python manage.py shell
>>> from expense_bot.celery_tasks import send_daily_admin_report
>>> result = send_daily_admin_report.delay()
>>> print(f"Task ID: {result.id}")
>>> print(f"Status: {result.status}")
>>> # –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
>>> result.get(timeout=30)  # –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
>>> exit()
    """)

def main():
    print("\n" + "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CELERY –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–• –ó–ê–î–ê–ß" + "\n")
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
    print(f"–°–µ—Ä–≤–µ—Ä: 80.66.87.178")
    print()
    
    check_timezone()
    check_redis_connection()
    check_periodic_tasks()
    check_celery_beat_schedule()
    check_daily_admin_report()
    test_task_execution()
    
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 50)
    print("""
–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å:
1. ‚ùå –ó–∞–¥–∞—á–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –≤ django_celery_beat (–ë–î)
2. ‚ùå Celery Beat –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ —É–ø–∞–ª
3. ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è timezone
4. ‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (enabled=False)
5. ‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω

–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:
- docker logs expense_bot_celery_beat --tail 100
- docker logs expense_bot_celery --tail 100
- docker exec expense_bot_redis redis-cli ping
- docker ps | grep celery
    """)

if __name__ == "__main__":
    main()