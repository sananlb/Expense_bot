#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Celery –¥–ª—è ExpenseBot
# –ó–∞–ø—É—Å–∫–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: bash check_celery.sh

echo "================================================"
echo "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CELERY - ExpenseBot"
echo "================================================"
echo "–í—Ä–µ–º—è: $(date '+%Y-%m-%d %H:%M:%S')"
echo ""

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–¢–ï–ô–ù–ï–†–û–í"
echo "------------------------"
docker ps --format "table {{.Names}}\t{{.Status}}" | grep -E "(celery|redis)" || echo -e "${RED}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${NC}"
echo ""

echo "2Ô∏è‚É£ –°–¢–ê–¢–£–° CELERY BEAT"
echo "----------------------"
BEAT_STATUS=$(docker ps | grep expense_bot_celery_beat | grep -c "Up")
if [ "$BEAT_STATUS" -eq 1 ]; then
    echo -e "${GREEN}‚úÖ Celery Beat —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:"
    docker logs expense_bot_celery_beat --tail 5 | grep -E "(Scheduler|beat|task)"
else
    echo -e "${RED}‚ùå Celery Beat –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç!${NC}"
fi
echo ""

echo "3Ô∏è‚É£ –°–¢–ê–¢–£–° CELERY WORKER"
echo "------------------------"
WORKER_STATUS=$(docker ps | grep "expense_bot_celery" | grep -v "beat" | grep -c "Up")
if [ "$WORKER_STATUS" -eq 1 ]; then
    echo -e "${GREEN}‚úÖ Celery Worker —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á:"
    docker exec expense_bot_celery celery -A expense_bot inspect registered | grep -A2 "send_daily_admin_report" || echo "–ó–∞–¥–∞—á–∞ send_daily_admin_report –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
else
    echo -e "${RED}‚ùå Celery Worker –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç!${NC}"
fi
echo ""

echo "4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê REDIS"
echo "-----------------"
REDIS_PING=$(docker exec expense_bot_redis redis-cli ping 2>/dev/null)
if [ "$REDIS_PING" = "PONG" ]; then
    echo -e "${GREEN}‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥–∏
    echo "–ó–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—è—Ö:"
    docker exec expense_bot_redis redis-cli --raw LLEN celery | xargs -I {} echo "  celery (default): {} –∑–∞–¥–∞—á"
    docker exec expense_bot_redis redis-cli --raw LLEN reports | xargs -I {} echo "  reports: {} –∑–∞–¥–∞—á"
    docker exec expense_bot_redis redis-cli --raw LLEN notifications | xargs -I {} echo "  notifications: {} –∑–∞–¥–∞—á"
else
    echo -e "${RED}‚ùå Redis –ù–ï –æ—Ç–≤–µ—á–∞–µ—Ç!${NC}"
fi
echo ""

echo "5Ô∏è‚É£ –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò –í –ë–î"
echo "-----------------------------"
docker exec expense_bot_web python -c "
import os, django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
django.setup()
from django_celery_beat.models import PeriodicTask
tasks = PeriodicTask.objects.filter(enabled=True)
print(f'–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {tasks.count()}')
for task in tasks:
    print(f'  - {task.name}: {task.task}')
    if 'admin_report' in task.task:
        if task.crontab:
            print(f'    ‚è∞ –í—Ä–µ–º—è: {task.crontab.hour}:{task.crontab.minute:02d}')
        if task.last_run_at:
            print(f'    üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {task.last_run_at}')
" 2>/dev/null || echo -e "${RED}–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î${NC}"
echo ""

echo "6Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–ò–ï –û–®–ò–ë–ö–ò CELERY"
echo "---------------------------"
echo "Beat –æ—à–∏–±–∫–∏:"
docker logs expense_bot_celery_beat 2>&1 | grep -i error | tail -3 || echo "–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
echo ""
echo "Worker –æ—à–∏–±–∫–∏:"
docker logs expense_bot_celery 2>&1 | grep -i error | tail -3 || echo "–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
echo ""

echo "7Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ó–ê–î–ê–ß–ò 10:00"
echo "------------------------"
CURRENT_HOUR=$(date +%H)
echo "–¢–µ–∫—É—â–∏–π —á–∞—Å: $CURRENT_HOUR"

docker exec expense_bot_web python -c "
import os, django, pytz
from datetime import datetime
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
django.setup()
from django_celery_beat.models import PeriodicTask

task = PeriodicTask.objects.filter(task='expense_bot.celery_tasks.send_daily_admin_report').first()
if task:
    print(f'‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞: {task.name}')
    print(f'   –í–∫–ª—é—á–µ–Ω–∞: {\"–î–∞\" if task.enabled else \"–ù–ï–¢!\"}')
    if task.crontab:
        print(f'   –í—Ä–µ–º—è: {task.crontab.hour}:{task.crontab.minute:02d}')
    if task.last_run_at:
        moscow_tz = pytz.timezone('Europe/Moscow')
        last_run = task.last_run_at.astimezone(moscow_tz)
        print(f'   –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {last_run.strftime(\"%Y-%m-%d %H:%M:%S\")} MSK')
        today = datetime.now(moscow_tz).date()
        if last_run.date() == today:
            print('   ‚úÖ –ó–∞–ø—É—Å–∫–∞–ª–∞—Å—å —Å–µ–≥–æ–¥–Ω—è')
        else:
            print('   ‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –ù–ï –∑–∞–ø—É—Å–∫–∞–ª–∞—Å—å!')
else:
    print('‚ùå –ó–∞–¥–∞—á–∞ –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ –ë–î!')
    print('–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É - —Å–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –Ω–∏–∂–µ')
" 2>/dev/null || echo -e "${RED}–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á–∏${NC}"
echo ""

echo "================================================"
echo "üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò"
echo "================================================"

echo -e "${YELLOW}–ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è:${NC}"
echo "1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç (Up)"
echo "2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î –∏ enabled=True"
echo "3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å timezone (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Europe/Moscow)"
echo "4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Celery Beat:"
echo "   docker-compose restart expense_bot_celery_beat"
echo ""

echo -e "${YELLOW}–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –ë–î:${NC}"
cat << 'EOF'
docker exec -it expense_bot_web python manage.py shell
>>> from django_celery_beat.models import PeriodicTask, CrontabSchedule
>>> from django.utils import timezone
>>> 
>>> schedule, _ = CrontabSchedule.objects.get_or_create(
...     minute=0,
...     hour=10,
...     day_of_week='*',
...     day_of_month='*',
...     month_of_year='*',
...     timezone=timezone.get_current_timezone()
... )
>>> 
>>> PeriodicTask.objects.update_or_create(
...     task='expense_bot.celery_tasks.send_daily_admin_report',
...     defaults={
...         'crontab': schedule,
...         'name': 'Daily Admin Report at 10:00',
...         'queue': 'reports',
...         'enabled': True
...     }
... )
>>> exit()
EOF
echo ""

echo -e "${YELLOW}–î–ª—è —Ç–µ—Å—Ç–∞ –∑–∞–¥–∞—á–∏ –≤—Ä—É—á–Ω—É—é:${NC}"
cat << 'EOF'
docker exec -it expense_bot_web python manage.py shell
>>> from expense_bot.celery_tasks import send_daily_admin_report
>>> result = send_daily_admin_report.delay()
>>> print(f"Task ID: {result.id}")
>>> # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
>>> result.get(timeout=30)
>>> exit()
EOF