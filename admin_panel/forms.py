from django import forms
from django.utils import timezone
from datetime import datetime, timedelta
from .models import BroadcastMessage
from expenses.models import Profile


class BroadcastMessageForm(forms.ModelForm):
    """–§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫"""
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    send_immediately = forms.BooleanField(
        label='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É',
        required=False,
        initial=True,
        help_text='–°–Ω–∏–º–∏—Ç–µ –≥–∞–ª–æ—á–∫—É, —á—Ç–æ–±—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É'
    )
    
    scheduled_date = forms.DateField(
        label='–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏',
        required=False,
        widget=forms.DateInput(attrs={
            'type': 'date',
            'class': 'form-control'
        })
    )
    
    scheduled_time = forms.TimeField(
        label='–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏',
        required=False,
        widget=forms.TimeInput(attrs={
            'type': 'time',
            'class': 'form-control'
        })
    )
    
    class Meta:
        model = BroadcastMessage
        fields = [
            'title',
            'message_text',
            'recipient_type',
            'include_inactive_days',
            'custom_recipients',
        ]
        widgets = {
            'title': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': '–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–æ–≤–æ–≥–æ–¥–Ω—è—è –∞–∫—Ü–∏—è'
            }),
            'message_text': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 10,
                'placeholder': '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...\n\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown:\n*–∂–∏—Ä–Ω—ã–π* —Ç–µ–∫—Å—Ç\n_–∫—É—Ä—Å–∏–≤_\n[—Å—Å—ã–ª–∫–∞](https://example.com)'
            }),
            'recipient_type': forms.Select(attrs={
                'class': 'form-select',
                'id': 'recipient-type-select'
            }),
            'include_inactive_days': forms.NumberInput(attrs={
                'class': 'form-control',
                'min': 1,
                'placeholder': '30'
            }),
            'custom_recipients': forms.SelectMultiple(attrs={
                'class': 'form-select',
                'size': 10
            })
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—è custom_recipients
        self.fields['custom_recipients'].queryset = Profile.objects.filter(
            is_active=True
        ).order_by('-last_activity')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.fields['custom_recipients'].label_from_instance = self.label_from_instance
        
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–∞—Å—Å—ã–ª–∫—É
        if self.instance.pk:
            if self.instance.scheduled_at:
                self.fields['send_immediately'].initial = False
                self.fields['scheduled_date'].initial = self.instance.scheduled_at.date()
                self.fields['scheduled_time'].initial = self.instance.scheduled_at.time()
    
    def label_from_instance(self, obj):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ"""
        name = str(obj.telegram_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        if obj.subscriptions.filter(
            is_active=True,
            end_date__gt=timezone.now()
        ).exists():
            name += " ‚≠ê"  # –ü–æ–¥–ø–∏—Å—á–∏–∫
        if obj.is_beta_tester:
            name += " üß™"  # –ë–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä
        return name
    
    def clean(self):
        cleaned_data = super().clean()
        send_immediately = cleaned_data.get('send_immediately')
        scheduled_date = cleaned_data.get('scheduled_date')
        scheduled_time = cleaned_data.get('scheduled_time')
        recipient_type = cleaned_data.get('recipient_type')
        custom_recipients = cleaned_data.get('custom_recipients')
        include_inactive_days = cleaned_data.get('include_inactive_days')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if not send_immediately:
            if not scheduled_date or not scheduled_time:
                raise forms.ValidationError(
                    '–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏'
                )
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            scheduled_at = timezone.make_aware(
                datetime.combine(scheduled_date, scheduled_time)
            )
            
            if scheduled_at <= timezone.now():
                raise forms.ValidationError(
                    '–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º'
                )
            
            cleaned_data['scheduled_at'] = scheduled_at
        else:
            cleaned_data['scheduled_at'] = None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        if recipient_type == 'custom' and not custom_recipients:
            raise forms.ValidationError(
                '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–æ—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏'
            )
        
        if recipient_type == 'inactive' and not include_inactive_days:
            raise forms.ValidationError(
                '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
            )
        
        return cleaned_data
    
    def save(self, commit=True):
        instance = super().save(commit=False)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º scheduled_at –∏–∑ cleaned_data
        if 'scheduled_at' in self.cleaned_data:
            instance.scheduled_at = self.cleaned_data['scheduled_at']
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        if instance.scheduled_at:
            instance.status = 'scheduled'
        else:
            instance.status = 'draft'
        
        if commit:
            instance.save()
            self.save_m2m()
        
        return instance


class BroadcastFilterForm(forms.Form):
    """–§–æ—Ä–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    
    STATUS_CHOICES = [('', '–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã')] + BroadcastMessage.STATUS_CHOICES
    
    status = forms.ChoiceField(
        choices=STATUS_CHOICES,
        required=False,
        widget=forms.Select(attrs={
            'class': 'form-select form-select-sm'
        })
    )
    
    date_from = forms.DateField(
        label='–°',
        required=False,
        widget=forms.DateInput(attrs={
            'type': 'date',
            'class': 'form-control form-control-sm'
        })
    )
    
    date_to = forms.DateField(
        label='–ü–æ',
        required=False,
        widget=forms.DateInput(attrs={
            'type': 'date',
            'class': 'form-control form-control-sm'
        })
    )
    
    search = forms.CharField(
        label='–ü–æ–∏—Å–∫',
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control form-control-sm',
            'placeholder': '–ù–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç...'
        })
    )