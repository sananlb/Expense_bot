#!/usr/bin/env python
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
"""
import os
import sys
import django
import asyncio
from datetime import timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/Users/aleksejnalbantov/Desktop/expense_bot')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
django.setup()

from django.utils import timezone
from expenses.models import Profile, Subscription, Expense, Income


async def test_trial_subscription_logic():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    """
    print("\n" + "="*60)
    print("–¢–ï–°–¢ –õ–û–ì–ò–ö–ò –ü–†–û–ë–ù–û–ô –ü–û–î–ü–ò–°–ö–ò")
    print("="*60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
    test_user_id = 12345678  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π telegram_id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            profile = await Profile.objects.aget(telegram_id=test_user_id)
            print(f"\n‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω: telegram_id={test_user_id}")
            print(f"   - is_beta_tester: {profile.is_beta_tester}")
            print(f"   - accepted_privacy: {profile.accepted_privacy}")
        except Profile.DoesNotExist:
            print(f"\n‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è telegram_id={test_user_id}")
            print("   –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞ —Å–Ω–∞—á–∞–ª–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞—Ç
        has_expenses = await Expense.objects.filter(profile=profile).aexists()
        print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏:")
        print(f"   - –ï—Å—Ç—å —Ç—Ä–∞—Ç—ã: {has_expenses}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ—Ö–æ–¥–æ–≤
        has_incomes = await Income.objects.filter(profile=profile).aexists()
        print(f"   - –ï—Å—Ç—å –¥–æ—Ö–æ–¥—ã: {has_incomes}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–¥–ø–∏—Å–æ–∫
        has_subscription_history = await Subscription.objects.filter(profile=profile).aexists()
        print(f"   - –ï—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {has_subscription_history}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        is_new_user = not has_expenses and not has_incomes and not has_subscription_history
        print(f"\nüÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π: {is_new_user}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        existing_trial = await profile.subscriptions.filter(
            type='trial'
        ).aexists()
        print(f"\nüéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:")
        print(f"   - –ë—ã–ª —Ä–∞–Ω–µ–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {existing_trial}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        has_active_subscription = await profile.subscriptions.filter(
            is_active=True,
            end_date__gt=timezone.now()
        ).aexists()
        print(f"   - –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {has_active_subscription}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        all_subscriptions = await profile.subscriptions.all().acount()
        print(f"   - –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {all_subscriptions}")
        
        if all_subscriptions > 0:
            async for sub in profile.subscriptions.all():
                status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if sub.is_active and sub.end_date > timezone.now() else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
                print(f"\n     –ü–æ–¥–ø–∏—Å–∫–∞ #{sub.id}:")
                print(f"       - –¢–∏–ø: {sub.get_type_display()}")
                print(f"       - –°—Ç–∞—Ç—É—Å: {status}")
                print(f"       - –ù–∞—á–∞–ª–æ: {sub.start_date.strftime('%Y-%m-%d %H:%M')}")
                print(f"       - –ö–æ–Ω–µ—Ü: {sub.end_date.strftime('%Y-%m-%d %H:%M')}")
                print(f"       - is_active: {sub.is_active}")
        
        # –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        print("\n" + "="*60)
        print("–ê–ù–ê–õ–ò–ó –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–ë–ù–û–ô –ü–û–î–ü–ò–°–ö–ò:")
        print("="*60)
        
        if profile.is_beta_tester:
            print("\n‚ùå –ù–ï –ë–£–î–ï–¢ –°–û–ó–î–ê–ù–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä")
        elif not is_new_user:
            print("\n‚ùå –ù–ï –ë–£–î–ï–¢ –°–û–ó–î–ê–ù–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–æ–≤—ã–π (–µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π)")
        elif existing_trial:
            print("\n‚ùå –ù–ï –ë–£–î–ï–¢ –°–û–ó–î–ê–ù–ê: –£–∂–µ –±—ã–ª –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        elif has_active_subscription:
            print("\n‚ùå –ù–ï –ë–£–î–ï–¢ –°–û–ó–î–ê–ù–ê: –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
        else:
            print("\n‚úÖ –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –°–û–ó–î–ê–ù–ê: –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
            print("\n–£—Å–ª–æ–≤–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:")
            print("  1. ‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π)")
            print("  2. ‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
            print("  3. ‚úÖ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")
            print("  4. ‚úÖ –ù–µ –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            print("\nüîß –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏...")
            trial_end = timezone.now() + timedelta(days=7)
            print(f"   - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {trial_end.strftime('%Y-%m-%d %H:%M')}")
            print("   - –¢–∏–ø: trial")
            print("   - –°—É–º–º–∞: 0")
            print("   - is_active: True")
            
    except Exception as e:
        import traceback
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        print(traceback.format_exc())


if __name__ == "__main__":
    print("\n–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏...")
    print("–ó–∞–º–µ–Ω–∏—Ç–µ test_user_id –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π telegram_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    asyncio.run(test_trial_subscription_logic())