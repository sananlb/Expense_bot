"""
–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è ExpenseBot —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
"""
from django.contrib import admin
from django.utils.html import format_html
from django.db.models import Sum, Count
from django.urls import reverse
from django.utils.safestring import mark_safe
from .models import (
    Profile, UserSettings, ExpenseCategory, Expense, Budget,
    Cashback, RecurringPayment, Subscription, PromoCode,
    PromoCodeUsage, Income, IncomeCategory,
    AffiliateProgram, AffiliateLink, AffiliateReferral, AffiliateCommission,
    AdvertiserCampaign
)
from dateutil.relativedelta import relativedelta
from bot.utils.category_helpers import get_category_display_name


class SubscriptionInline(admin.TabularInline):
    """Inline —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ"""
    model = Subscription
    extra = 0  # –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    fields = ['type', 'payment_method', 'start_date', 'end_date', 'is_active', 'days_left']
    readonly_fields = ['days_left', 'type', 'payment_method', 'start_date']  # –î–µ–ª–∞–µ–º –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–ª–µ–π readonly
    ordering = ['-end_date']
    can_delete = False  # –ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ inline
    
    def days_left(self, obj):
        """–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"""
        from django.utils import timezone
        if obj and obj.end_date:
            if obj.is_active and obj.end_date > timezone.now():
                days = (obj.end_date - timezone.now()).days
                return f"{days} –¥–Ω–µ–π"
            return "–ò—Å—Ç–µ–∫–ª–∞"
        return "-"
    
    days_left.short_description = '–û—Å—Ç–∞–ª–æ—Å—å'
    
    def has_delete_permission(self, request, obj=None):
        return True
    
    def get_formset(self, request, obj=None, **kwargs):
        formset = super().get_formset(request, obj, **kwargs)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        if obj:
            from django.utils import timezone
            formset.form.base_fields['end_date'].initial = timezone.now() + relativedelta(months=1)
            formset.form.base_fields['is_active'].initial = True
        return formset


@admin.register(Profile)
class ProfileAdmin(admin.ModelAdmin):
    list_display = ['telegram_id', 'subscription_status',
                    'is_beta_tester', 'referrals_count_display', 'payment_stats',
                    'language_code', 'currency', 'is_active', 'acquisition_source_display', 'created_at']
    list_filter = ['is_active', 'is_beta_tester', 'language_code', 'currency', 'acquisition_source', 'created_at']
    search_fields = ['telegram_id', 'beta_access_key', 'acquisition_campaign']
    readonly_fields = ['created_at', 'updated_at',
                       'referrals_count', 'active_referrals_count',
                       'total_payments_count', 'total_stars_paid',
                       'acquisition_date']
    inlines = [SubscriptionInline]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('telegram_id',)
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('language_code', 'timezone', 'currency')
        }),
        ('–ò—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è', {
            'fields': ('acquisition_source', 'acquisition_campaign', 'acquisition_date', 'acquisition_details'),
            'description': '–î–∞–Ω–Ω—ã–µ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (UTM-–º–µ—Ç–∫–∏)'
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π', {
            'fields': ('total_payments_count', 'total_stars_paid'),
            'description': '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram Stars'
        }),
        ('–ë–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', {
            'fields': ('is_beta_tester', 'beta_access_key'),
            'classes': ('collapse',)
        }),
        ('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', {
            'fields': ('referrals_count', 'active_referrals_count'),
            'classes': ('collapse',)
        }),
        ('–°—Ç–∞—Ç—É—Å', {
            'fields': ('is_active', 'created_at', 'updated_at')
        }),
    )
    
    def get_queryset(self, request):
        qs = super().get_queryset(request)
        return qs.annotate(
            total_expenses=Sum('expenses__amount'),
            expenses_count=Count('expenses'),
            _referrals_count=Count('referred_users')
        )
    
    def subscription_status(self, obj):
        """–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ (—Å—É–º–º–∞—Ä–Ω–æ –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º)"""
        from django.utils import timezone
        from django.db.models import Max
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        active_subs = obj.subscriptions.filter(
            is_active=True,
            end_date__gt=timezone.now()
        )
        
        if active_subs.exists():
            # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
            max_end_date = active_subs.aggregate(Max('end_date'))['end_date__max']
            total_days = (max_end_date - timezone.now()).days
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
            sub_count = active_subs.count()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç
            if total_days > 30:
                color = 'green'
            elif total_days > 7:
                color = 'orange'
            else:
                color = 'red'
            
            # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if sub_count > 1:
                return format_html(
                    '<span style="color: {};">‚úÖ {} –¥–Ω–µ–π ({} –ø–æ–¥–ø.)</span>',
                    color, total_days, sub_count
                )
            else:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π
                sub_type = active_subs.first().type
                type_label = {'trial': '–ø—Ä–æ–±.', 'month': '–º–µ—Å.', 'six_months': '6 –º–µ—Å.'}.get(sub_type, '')
                return format_html(
                    '<span style="color: {};">‚úÖ {} –¥–Ω–µ–π {}</span>',
                    color, total_days, f'({type_label})' if type_label else ''
                )
        return format_html('<span style="color: red;">‚ùå –ù–µ—Ç</span>')
    
    subscription_status.short_description = '–ü–æ–¥–ø–∏—Å–∫–∞'
    
    def referrals_count_display(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
        total = getattr(obj, '_referrals_count', 0)
        active = obj.active_referrals_count
        
        if total > 0:
            return format_html('{} ({} –∞–∫—Ç.)', total, active)
        return '0'
    
    referrals_count_display.short_description = '–†–µ—Ñ–µ—Ä–∞–ª—ã'

    def payment_stats(self, obj):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
        payments = obj.total_payments_count or 0
        stars = obj.total_stars_paid or 0

        if payments > 0:
            return format_html(
                '<span title="–í—Å–µ–≥–æ {} –ø–ª–∞—Ç–µ–∂–µ–π"><b>{}‚≠ê</b> ({} –ø–ª.)</span>',
                payments, stars, payments
            )
        return format_html('<span style="color: gray;">‚Äî</span>')

    payment_stats.short_description = '–ü–ª–∞—Ç–µ–∂–∏'

    def acquisition_source_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è –±–ª–æ–≥–µ—Ä–æ–≤"""
        if obj.acquisition_source:
            source_labels = {
                'organic': 'üå±',
                'blogger': 'üìπ',
                'ads': 'üì¢',
                'referral': 'ü§ù',
                'social': 'üì±',
                'other': 'üìç'
            }
            icon = source_labels.get(obj.acquisition_source, '‚ùì')

            # –î–ª—è –±–ª–æ–≥–µ—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –∏ —Å—Å—ã–ª–∫—É
            if obj.acquisition_source == 'blogger' and obj.acquisition_campaign:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –±–ª–æ–≥–µ—Ä–∞ –∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏
                campaign_name = obj.acquisition_campaign.split('_')[0] if '_' in obj.acquisition_campaign else obj.acquisition_campaign

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
                link = f"https://t.me/showmecoinbot?start=b_{obj.acquisition_campaign}"

                return format_html(
                    '{} <b>{}</b> <a href="{}" target="_blank" title="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –±–ª–æ–≥–µ—Ä–∞">üîó</a>',
                    icon, campaign_name, link
                )
            elif obj.acquisition_campaign:
                return format_html(
                    '{} {}',
                    icon, obj.acquisition_campaign
                )
            else:
                return format_html('{} {}', icon, obj.get_acquisition_source_display())
        return format_html('<span style="color: gray;">‚Äî</span>')

    acquisition_source_display.short_description = '–ò—Å—Ç–æ—á–Ω–∏–∫'
    payment_stats.admin_order_field = 'total_stars_paid'

    actions = ['make_beta_tester', 'remove_beta_tester',
               'add_month_subscription', 'add_six_months_subscription']
    
    def make_beta_tester(self, request, queryset):
        """–°–¥–µ–ª–∞—Ç—å –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä–∞–º–∏"""
        updated = queryset.update(is_beta_tester=True)
        self.message_user(request, f'{updated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–∞–ª–∏ –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä–∞–º–∏.')
    
    make_beta_tester.short_description = '–°–¥–µ–ª–∞—Ç—å –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä–∞–º–∏'
    
    def remove_beta_tester(self, request, queryset):
        """–£–±—Ä–∞—Ç—å –∏–∑ –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä–æ–≤"""
        updated = queryset.update(is_beta_tester=False)
        self.message_user(request, f'{updated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä–æ–≤.')
    
    remove_beta_tester.short_description = '–£–±—Ä–∞—Ç—å –∏–∑ –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä–æ–≤'
    
    # generate_referral_codes —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ Telegram Stars
    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
    
    def add_month_subscription(self, request, queryset):
        """–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É"""
        from django.utils import timezone
        count = 0
        for profile in queryset:
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            active_sub = profile.subscriptions.filter(
                is_active=True,
                end_date__gt=timezone.now()
            ).order_by('-end_date').first()
            
            if active_sub:
                # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                active_sub.end_date = active_sub.end_date + relativedelta(months=1)
                active_sub.save()
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π
                Subscription.objects.create(
                    profile=profile,
                    type='month',
                    payment_method='stars',
                    amount=0,  # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É
                    start_date=timezone.now(),
                    end_date=timezone.now() + relativedelta(months=1),
                    is_active=True
                )
            count += 1
        
        self.message_user(request, f'–ü—Ä–æ–¥–ª–µ–Ω–æ {count} –º–µ—Å—è—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.')
    
    add_month_subscription.short_description = '–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É'
    
    def add_six_months_subscription(self, request, queryset):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É–≥–æ–¥–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É"""
        from django.utils import timezone
        count = 0
        for profile in queryset:
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            active_sub = profile.subscriptions.filter(
                is_active=True,
                end_date__gt=timezone.now()
            ).order_by('-end_date').first()
            
            if active_sub:
                # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                active_sub.end_date = active_sub.end_date + relativedelta(months=6)
                active_sub.save()
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π
                Subscription.objects.create(
                    profile=profile,
                    type='six_months',
                    payment_method='stars',
                    amount=0,  # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É
                    start_date=timezone.now(),
                    end_date=timezone.now() + relativedelta(months=6),
                    is_active=True
                )
            count += 1
        
        self.message_user(request, f'–ü—Ä–æ–¥–ª–µ–Ω–æ {count} –ø–æ–ª—É–≥–æ–¥–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.')
    
    add_six_months_subscription.short_description = '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É–≥–æ–¥–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É'


@admin.register(UserSettings)
class UserSettingsAdmin(admin.ModelAdmin):
    list_display = ['profile', 'budget_alerts_enabled']
    list_filter = ['budget_alerts_enabled']
    search_fields = ['profile__telegram_id']
    
    fieldsets = (
        ('–ü—Ä–æ—Ñ–∏–ª—å', {
            'fields': ('profile',)
        }),
        ('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', {
            'fields': ('budget_alerts_enabled',)
        }),
        ('–°–∏—Å—Ç–µ–º–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    readonly_fields = ['created_at', 'updated_at']


@admin.register(ExpenseCategory)
class ExpenseCategoryAdmin(admin.ModelAdmin):
    list_display = ['display_category', 'profile', 'name', 'is_active', 'created_at']
    list_filter = ['is_active', 'created_at']
    search_fields = ['name', 'profile__username']
    list_per_page = 50
    
    def display_category(self, obj):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        return get_category_display_name(obj, 'ru')  # –ê–¥–º–∏–Ω–∫–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    display_category.short_description = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
    
    fieldsets = (
        (None, {
            'fields': ('profile', 'name', 'icon', 'is_active')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    readonly_fields = ['created_at', 'updated_at']


@admin.register(Expense)
class ExpenseAdmin(admin.ModelAdmin):
    list_display = ['profile', 'amount', 'display_category', 'expense_date', 
                    'ai_categorized', 'created_at']
    list_filter = ['expense_date', 'ai_categorized', 'category', 'created_at']
    search_fields = ['description', 'profile__username', 'category__name']
    date_hierarchy = 'expense_date'
    list_per_page = 100
    
    def display_category(self, obj):
        if obj.category:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            return get_category_display_name(obj.category, 'ru')  # –ê–¥–º–∏–Ω–∫–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        return "‚Äî"
    display_category.short_description = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('profile', 'amount', 'category', 'description')
        }),
        ('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', {
            'fields': ('expense_date', 'expense_time')
        }),
        ('AI –æ–±—Ä–∞–±–æ—Ç–∫–∞', {
            'fields': ('ai_categorized', 'ai_confidence'),
            'classes': ('collapse',)
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', {
            'fields': ('receipt_photo',),
            'classes': ('collapse',)
        }),
        ('–°–∏—Å—Ç–µ–º–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    readonly_fields = ['created_at', 'updated_at']
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('profile', 'category')


# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—é–¥–∂–µ—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω (30.10.2025)
# @admin.register(Budget)
# class BudgetAdmin(admin.ModelAdmin):
#     list_display = ['profile', 'category', 'amount', 'period_type', 'start_date',
#                     'end_date', 'is_active']
#     list_filter = ['period_type', 'is_active', 'start_date']
#     search_fields = ['profile__username', 'category__name']
#     date_hierarchy = 'start_date'
#
#     fieldsets = (
#         ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
#             'fields': ('profile', 'category', 'amount', 'period_type')
#         }),
#         ('–ü–µ—Ä–∏–æ–¥', {
#             'fields': ('start_date', 'end_date')
#         }),
#         ('–°—Ç–∞—Ç—É—Å', {
#             'fields': ('is_active', 'created_at', 'updated_at')
#         }),
#     )
#     readonly_fields = ['created_at', 'updated_at']


@admin.register(Cashback)
class CashbackAdmin(admin.ModelAdmin):
    list_display = ['profile', 'display_category', 'bank_name', 'cashback_percent', 
                    'month', 'limit_amount', 'created_at']
    list_filter = ['bank_name', 'month', 'created_at']
    search_fields = ['profile__username', 'category__name', 'bank_name']
    list_per_page = 50
    
    def display_category(self, obj):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        return get_category_display_name(obj.category, 'ru')  # –ê–¥–º–∏–Ω–∫–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    display_category.short_description = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('profile', 'category', 'bank_name')
        }),
        ('–ö–µ—à–±—ç–∫', {
            'fields': ('cashback_percent', 'month', 'limit_amount')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    readonly_fields = ['created_at', 'updated_at']
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('profile', 'category')


@admin.register(RecurringPayment)
class RecurringPaymentAdmin(admin.ModelAdmin):
    list_display = ['description', 'profile_link', 'category', 'amount',
                    'currency', 'day_of_month', 'is_active', 'last_processed']
    list_filter = ['is_active', 'currency', 'day_of_month', 'created_at']
    search_fields = ['description', 'profile__username', 'profile__telegram_id',
                     'category__name']
    
    def profile_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å"""
        return format_html(
            '<a href="{}">{}</a>',
            reverse('admin:expenses_profile_change', args=[obj.profile.id]),
            obj.profile
        )
    
    profile_link.short_description = '–ü—Ä–æ—Ñ–∏–ª—å'


@admin.register(Subscription)
class SubscriptionAdmin(admin.ModelAdmin):
    list_display = ['profile_link', 'type', 'payment_method', 'amount',
                    'start_date', 'end_date', 'is_active', 'days_left']
    list_filter = ['type', 'payment_method', 'is_active', 'notification_sent',
                   'created_at']
    search_fields = ['profile__telegram_id', 'profile__username',
                     'telegram_payment_charge_id']
    readonly_fields = ['created_at', 'updated_at']
    date_hierarchy = 'end_date'
    
    def profile_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å"""
        return format_html(
            '<a href="{}">{}</a>',
            reverse('admin:expenses_profile_change', args=[obj.profile.id]),
            obj.profile
        )
    
    profile_link.short_description = '–ü—Ä–æ—Ñ–∏–ª—å'
    
    def days_left(self, obj):
        """–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"""
        from django.utils import timezone
        if obj.is_active and obj.end_date > timezone.now():
            days = (obj.end_date - timezone.now()).days
            color = 'green' if days > 7 else 'orange' if days > 0 else 'red'
            return format_html(
                '<span style="color: {};">{} –¥–Ω–µ–π</span>',
                color, days
            )
        return format_html('<span style="color: gray;">–ò—Å—Ç–µ–∫–ª–∞</span>')
    
    days_left.short_description = '–û—Å—Ç–∞–ª–æ—Å—å'
    
    actions = ['extend_30_days', 'send_expiry_notifications']
    
    def extend_30_days(self, request, queryset):
        """–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 30 –¥–Ω–µ–π"""
        from dateutil.relativedelta import relativedelta
        count = 0
        for sub in queryset:
            sub.end_date = sub.end_date + relativedelta(months=1)
            sub.save()
            count += 1
        self.message_user(request, f'–ü—Ä–æ–¥–ª–µ–Ω–æ {count} –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ 30 –¥–Ω–µ–π.')
    
    extend_30_days.short_description = '–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 30 –¥–Ω–µ–π'


@admin.register(PromoCode)
class PromoCodeAdmin(admin.ModelAdmin):
    list_display = ['code', 'get_discount_display', 'applicable_subscription_types',
                    'get_active_status', 'used_count', 'max_uses', 'valid_until', 'created_by']
    list_filter = ['is_active', 'discount_type', 'applicable_subscription_types',
                   'created_at', 'valid_until']
    search_fields = ['code', 'description']
    readonly_fields = ['used_count', 'created_at', 'updated_at', 'created_by']

    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('code', 'description', 'is_active')
        }),
        ('–°–∫–∏–¥–∫–∞', {
            'fields': ('discount_type', 'discount_value', 'applicable_subscription_types')
        }),
        ('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è', {
            'fields': ('max_uses', 'used_count', 'valid_from', 'valid_until')
        }),
        ('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': ('created_by', 'created_at', 'updated_at'),
            'classes': ('collapse',)
        })
    )

    actions = ['activate_codes', 'deactivate_codes']

    def get_changeform_initial_data(self, request):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        initial = super().get_changeform_initial_data(request)
        # –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è valid_until -
        # –ø—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã–±–∏—Ä–∞–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        return initial

    def get_active_status(self, obj):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"""
        from django.utils.html import format_html

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        if obj.max_uses and obj.used_count >= obj.max_uses:
            return format_html('<span style="color: red;">‚úó</span>')
        elif obj.is_active:
            return format_html('<span style="color: green;">‚úì</span>')
        else:
            return format_html('<span style="color: red;">‚úó</span>')

    get_active_status.short_description = '–ê–∫—Ç–∏–≤–µ–Ω'
    get_active_status.admin_order_field = 'is_active'

    def save_model(self, request, obj, form, change):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º created_by –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        if not change:  # –¢–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∞ –ø–æ telegram_id
            # –ï—Å–ª–∏ —É –∞–¥–º–∏–Ω–∞ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–æ—Ç–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            from expenses.models import Profile
            try:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ username –∞–¥–º–∏–Ω–∞
                admin_profile = Profile.objects.filter(username=request.user.username).first()
                if not admin_profile:
                    # –ï—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∞
                    admin_profile = Profile.objects.filter(telegram_id=881292737).first()  # –í–∞—à telegram_id
                obj.created_by = admin_profile
            except Exception:
                pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
        super().save_model(request, obj, form, change)

    def activate_codes(self, request, queryset):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã"""
        updated = queryset.update(is_active=True)
        self.message_user(request, f'{updated} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.')
    
    activate_codes.short_description = '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'
    
    def deactivate_codes(self, request, queryset):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã"""
        updated = queryset.update(is_active=False)
        self.message_user(request, f'{updated} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.')
    
    deactivate_codes.short_description = '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'


@admin.register(PromoCodeUsage)
class PromoCodeUsageAdmin(admin.ModelAdmin):
    list_display = ['promocode', 'profile', 'subscription', 'used_at']
    list_filter = ['used_at', 'promocode']
    search_fields = ['promocode__code', 'profile__username',
                     'profile__telegram_id']
    readonly_fields = ['promocode', 'profile', 'subscription', 'used_at']
    
    def has_add_permission(self, request):
        return False


# ReferralBonusAdmin —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ Telegram Stars
# –°–º. AffiliateProgram, AffiliateLink, AffiliateReferral, AffiliateCommission


@admin.register(IncomeCategory)
class IncomeCategoryAdmin(admin.ModelAdmin):
    list_display = ['display_category', 'profile', 'name', 'is_active', 'is_default', 'created_at']
    list_filter = ['is_active', 'is_default', 'created_at']
    search_fields = ['name', 'profile__telegram_id']
    list_per_page = 50
    
    def display_category(self, obj):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        return get_category_display_name(obj, 'ru')  # –ê–¥–º–∏–Ω–∫–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    display_category.short_description = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞'
    
    fieldsets = (
        (None, {
            'fields': ('profile', 'name', 'icon', 'is_active', 'is_default')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    readonly_fields = ['created_at', 'updated_at']
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('profile')


@admin.register(Income)
class IncomeAdmin(admin.ModelAdmin):
    list_display = ['profile', 'display_amount', 'display_category', 'income_type', 
                    'income_date', 'is_recurring', 'ai_categorized', 'created_at']
    list_filter = ['income_date', 'income_type', 'is_recurring', 'ai_categorized', 
                   'category', 'created_at']
    search_fields = ['description', 'profile__telegram_id', 'category__name']
    date_hierarchy = 'income_date'
    list_per_page = 100
    
    def display_amount(self, obj):
        return format_html('<span style="color: green; font-weight: bold;">+{} {}</span>', 
                          obj.amount, obj.currency)
    display_amount.short_description = '–°—É–º–º–∞'
    display_amount.admin_order_field = 'amount'
    
    def display_category(self, obj):
        if obj.category:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            return get_category_display_name(obj.category, 'ru')  # –ê–¥–º–∏–Ω–∫–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        return "‚Äî"
    display_category.short_description = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('profile', 'amount', 'currency', 'category', 'description')
        }),
        ('–¢–∏–ø –¥–æ—Ö–æ–¥–∞', {
            'fields': ('income_type',)
        }),
        ('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', {
            'fields': ('income_date', 'income_time')
        }),
        ('–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å', {
            'fields': ('is_recurring', 'recurrence_day'),
            'description': '–î–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞—Ä–ø–ª–∞—Ç–∞ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü)'
        }),
        ('AI –æ–±—Ä–∞–±–æ—Ç–∫–∞', {
            'fields': ('ai_categorized', 'ai_confidence'),
            'classes': ('collapse',)
        }),
        ('–°–∏—Å—Ç–µ–º–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    readonly_fields = ['created_at', 'updated_at']
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('profile', 'category')


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω–∫–∏
admin.site.site_header = "ExpenseBot Admin"
admin.site.site_title = "ExpenseBot"
admin.site.index_title = "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"


# ==============================
# –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (–ø—Ä–æ—Å–º–æ—Ç—Ä)
# ==============================

@admin.register(AffiliateProgram)
class AffiliateProgramAdmin(admin.ModelAdmin):
    list_display = [
        'commission_percent', 'commission_permille', 'is_active',
        'duration_months', 'start_date', 'end_date', 'telegram_program_id',
        'created_at'
    ]
    list_filter = ['is_active', 'duration_months', 'start_date', 'created_at']
    search_fields = ['telegram_program_id']
    readonly_fields = ['start_date', 'end_date', 'created_at', 'updated_at', 'telegram_program_id']
    fieldsets = (
        ('–û–±—â–∏–µ', {
            'fields': ('is_active', 'commission_permille', 'duration_months')
        }),
        ('Telegram', {
            'fields': ('telegram_program_id',),
            'classes': ('collapse',)
        }),
        ('–°–∏—Å—Ç–µ–º–Ω—ã–µ', {
            'fields': ('start_date', 'end_date', 'created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )

    def commission_percent(self, obj):
        return f"{obj.get_commission_percent()}%"
    commission_percent.short_description = '–ö–æ–º–∏—Å—Å–∏—è'


@admin.register(AffiliateLink)
class AffiliateLinkAdmin(admin.ModelAdmin):
    list_display = [
        'profile_link', 'affiliate_code', 'clicks', 'conversions',
        'conversion_rate_display', 'total_earned', 'is_active', 'created_at'
    ]
    list_filter = ['is_active', 'created_at']
    search_fields = ['affiliate_code', 'profile__telegram_id']
    readonly_fields = [
        'profile', 'affiliate_code', 'telegram_link', 'clicks', 'conversions',
        'total_earned', 'created_at', 'updated_at'
    ]
    fieldsets = (
        (None, {
            'fields': ('profile', 'affiliate_code', 'telegram_link', 'is_active')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('clicks', 'conversions', 'total_earned')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    list_per_page = 50

    def profile_link(self, obj):
        return format_html(
            '<a href="{}">{}</a>',
            reverse('admin:expenses_profile_change', args=[obj.profile.id]),
            obj.profile.telegram_id
        )
    profile_link.short_description = '–ü—Ä–æ—Ñ–∏–ª—å'

    def conversion_rate_display(self, obj):
        return f"{obj.get_conversion_rate()}%"
    conversion_rate_display.short_description = '–ö–æ–Ω–≤–µ—Ä—Å–∏—è'


@admin.register(AffiliateReferral)
class AffiliateReferralAdmin(admin.ModelAdmin):
    list_display = [
        'referrer_link', 'referred_link', 'joined_at', 'first_payment_at',
        'total_payments', 'total_spent'
    ]
    list_filter = ['joined_at', 'first_payment_at']
    search_fields = ['referrer__telegram_id', 'referred__telegram_id']
    readonly_fields = [
        'referrer', 'referred', 'affiliate_link', 'joined_at', 'first_payment_at',
        'total_payments', 'total_spent'
    ]
    fieldsets = (
        (None, {
            'fields': ('referrer', 'referred', 'affiliate_link')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('joined_at', 'first_payment_at', 'total_payments', 'total_spent')
        }),
    )

    def referrer_link(self, obj):
        return format_html(
            '<a href="{}">{}</a>',
            reverse('admin:expenses_profile_change', args=[obj.referrer.id]),
            obj.referrer.telegram_id
        )
    referrer_link.short_description = '–†–µ—Ñ–µ—Ä–µ—Ä'

    def referred_link(self, obj):
        return format_html(
            '<a href="{}">{}</a>',
            reverse('admin:expenses_profile_change', args=[obj.referred.id]),
            obj.referred.telegram_id
        )
    referred_link.short_description = '–†–µ—Ñ–µ—Ä–∞–ª'


@admin.register(AffiliateCommission)
class AffiliateCommissionAdmin(admin.ModelAdmin):
    list_display = [
        'id', 'referrer_link', 'referred_link', 'payment_amount',
        'commission_amount', 'commission_rate_display', 'status',
        'created_at', 'hold_until', 'paid_at'
    ]
    list_filter = ['status', 'created_at', 'hold_until', 'paid_at']
    search_fields = [
        'referrer__telegram_id', 'referred__telegram_id',
        'telegram_payment_id', 'telegram_transaction_id'
    ]
    readonly_fields = [
        'referrer', 'referred', 'subscription', 'referral', 'payment_amount',
        'commission_amount', 'commission_rate', 'telegram_transaction_id',
        'telegram_payment_id', 'status', 'created_at', 'hold_until', 'paid_at',
        'notes'
    ]
    fieldsets = (
        ('–°–≤—è–∑–∏', {
            'fields': ('referrer', 'referred', 'subscription', 'referral')
        }),
        ('–§–∏–Ω–∞–Ω—Å—ã', {
            'fields': ('payment_amount', 'commission_amount', 'commission_rate')
        }),
        ('Telegram', {
            'fields': ('telegram_payment_id', 'telegram_transaction_id'),
            'classes': ('collapse',)
        }),
        ('–°—Ç–∞—Ç—É—Å –∏ –¥–∞—Ç—ã', {
            'fields': ('status', 'created_at', 'hold_until', 'paid_at')
        }),
        ('–ü—Ä–∏–º–µ—á–∞–Ω–∏—è', {
            'fields': ('notes',),
            'classes': ('collapse',)
        }),
    )
    list_per_page = 100

    def referrer_link(self, obj):
        return format_html(
            '<a href="{}">{}</a>',
            reverse('admin:expenses_profile_change', args=[obj.referrer.id]),
            obj.referrer.telegram_id
        )
    referrer_link.short_description = '–†–µ—Ñ–µ—Ä–µ—Ä'

    def referred_link(self, obj):
        return format_html(
            '<a href="{}">{}</a>',
            reverse('admin:expenses_profile_change', args=[obj.referred.id]),
            obj.referred.telegram_id
        )
    referred_link.short_description = '–†–µ—Ñ–µ—Ä–∞–ª'

    def commission_rate_display(self, obj):
        return f"{obj.get_commission_percent()}%"
    commission_rate_display.short_description = '–°—Ç–∞–≤–∫–∞'


# ==============================
# –†–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
# ==============================

@admin.register(AdvertiserCampaign)
class AdvertiserCampaignAdmin(admin.ModelAdmin):
    list_display = [
        'name', 'campaign', 'link_display', 'source_type', 'status',
        'users_count', 'paying_users_count', 'conversion_display',
        'total_revenue_display', 'roi_display', 'is_active', 'created_at'
    ]
    list_filter = ['source_type', 'status', 'is_active', 'created_at', 'start_date']
    search_fields = ['name', 'campaign', 'utm_code', 'contact_info']
    readonly_fields = ['utm_code', 'link_display_detail', 'created_at', 'updated_at', 'created_by']
    date_hierarchy = 'created_at'

    fieldsets = (
        ('üìä –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', {
            'description': (
                '<div style="background: #e8f4fd; padding: 15px; border-left: 4px solid #2196F3; margin-bottom: 20px; border-radius: 4px;">'
                '<h3 style="margin-top: 0; color: #1976D2;">–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–º–ø–∞–Ω–∏–∏ –≤ –±–æ—Ç–µ:</h3>'
                '<p style="margin: 10px 0;"><strong>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:</strong> <code style="background: #fff; padding: 4px 8px; border-radius: 3px;">/blogger_stats –ò–ú–Ø_–ë–õ–û–ì–ï–†–ê</code></p>'
                '<p style="margin: 10px 0;"><strong>–ü—Ä–∏–º–µ—Ä—ã:</strong></p>'
                '<ul style="margin: 5px 0;">'
                '<li><code style="background: #fff; padding: 2px 6px; border-radius: 3px;">/blogger_stats ivan</code> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–≥–µ—Ä–∞ ivan</li>'
                '<li><code style="background: #fff; padding: 2px 6px; border-radius: 3px;">/blogger_stats maria</code> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–≥–µ—Ä–∞ maria</li>'
                '</ul>'
                '<p style="margin: 10px 0 0 0;"><strong>–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –∫–æ–º–∞–Ω–¥–∞:</strong> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ–Ω–≤–µ—Ä—Å–∏–∏, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –¥–æ—Ö–æ–¥ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.</p>'
                '</div>'
            ),
            'fields': ()
        }),
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'campaign', 'utm_code', 'source_type')
        }),
        ('–°—Ç–∞—Ç—É—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', {
            'fields': ('is_active', 'status')
        }),
        ('–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', {
            'fields': ('start_date', 'end_date', 'budget', 'target_users', 'target_conversion'),
            'classes': ('collapse',)
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('description', 'contact_info'),
            'classes': ('collapse',)
        }),
        ('–°–∏—Å—Ç–µ–º–Ω—ã–µ', {
            'fields': ('created_by', 'created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )

    actions = ['activate_campaigns', 'deactivate_campaigns', 'set_completed']

    def get_queryset(self, request):
        """–î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º queryset –±–µ–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã –º–æ–¥–µ–ª–∏
        return super().get_queryset(request)

    def link_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
        link = obj.link
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ –∫–ª–∏–∫—É
        return format_html(
            '<div style="display: flex; align-items: center; gap: 5px;">'
            '<code style="background: #f5f5f5; padding: 3px 6px; border-radius: 3px; font-size: 11px;">{}</code>'
            '<button onclick="navigator.clipboard.writeText(\'{}\'); this.textContent=\'‚úì\'; '
            'setTimeout(() => this.textContent=\'üìã\', 2000); return false;" '
            'style="padding: 2px 6px; background: #4CAF50; color: white; border: none; '
            'border-radius: 3px; cursor: pointer; font-size: 11px;" '
            'title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É">üìã</button>'
            '</div>',
            link, link
        )
    link_display.short_description = '–°—Å—ã–ª–∫–∞'
    link_display.allow_tags = True

    def link_display_detail(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Å—ã–ª–∫–∏ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ"""
        link = obj.link
        return format_html(
            '<div style="margin: 10px 0;">'
            '<input type="text" value="{}" readonly '
            'style="width: 400px; padding: 5px; font-family: monospace; background: #f5f5f5; border: 1px solid #ddd; border-radius: 3px;" '
            'onclick="this.select();" />'
            '<button onclick="navigator.clipboard.writeText(\'{}\'); this.textContent=\'‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ\'; '
            'setTimeout(() => this.textContent=\'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å\', 2000); return false;" '
            'style="margin-left: 10px; padding: 5px 15px; background: #4CAF50; color: white; border: none; '
            'border-radius: 3px; cursor: pointer;">'
            'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>'
            '<div style="margin-top: 5px; color: #666; font-size: 12px;">–ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–∫–ª–∞–º–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è</div>'
            '</div>',
            link, link
        )
    link_display_detail.short_description = '–°—Å—ã–ª–∫–∞ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏'

    def users_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        stats = obj.get_stats()
        return stats.get('total_users', 0)
    users_count.short_description = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'

    def paying_users_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        stats = obj.get_stats()
        return stats.get('paying_users', 0)
    paying_users_count.short_description = '–ü–ª–∞—Ç—è—â–∏—Ö'

    def conversion_display(self, obj):
        """–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–ª–∞—Ç—è—â–∏—Ö"""
        stats = obj.get_stats()
        conversion = stats.get('conversion_to_paying', 0)

        if conversion >= 15:
            color = 'green'
            icon = 'üî•'
        elif conversion >= 10:
            color = 'orange'
            icon = '‚úÖ'
        elif conversion >= 5:
            color = 'blue'
            icon = 'üìà'
        else:
            color = 'red'
            icon = 'üìä'

        return format_html(
            '<span style="color: {};">{} {}%</span>',
            color, icon, f"{conversion:.1f}"
        )
    conversion_display.short_description = '–ö–æ–Ω–≤–µ—Ä—Å–∏—è'

    def total_revenue_display(self, obj):
        """–û–±—â–∏–π –¥–æ—Ö–æ–¥"""
        stats = obj.get_stats()
        revenue_stars = stats.get('total_revenue', 0)
        revenue_rub = stats.get('total_revenue_rub', 0)

        if revenue_stars > 0:
            return format_html(
                '<span title="‚âà {} ‚ÇΩ">{}‚≠ê</span>',
                revenue_rub, revenue_stars
            )
        return format_html('<span style="color: gray;">‚Äî</span>')
    total_revenue_display.short_description = '–î–æ—Ö–æ–¥'

    def roi_display(self, obj):
        """ROI –∫–∞–º–ø–∞–Ω–∏–∏"""
        stats = obj.get_stats()
        roi = stats.get('roi', 0)

        if roi > 100:
            color = 'green'
            icon = 'üí∞'
        elif roi > 0:
            color = 'orange'
            icon = 'üìà'
        elif roi == 0:
            return format_html('<span style="color: gray;">‚Äî</span>')
        else:
            color = 'red'
            icon = 'üìâ'

        return format_html(
            '<span style="color: {};">{} {}%</span>',
            color, icon, f"{roi:.1f}"
        )
    roi_display.short_description = 'ROI'

    def save_model(self, request, obj, form, change):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º created_by –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏"""
        if not change and not obj.created_by:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∞
            try:
                from expenses.models import Profile
                admin_profile = Profile.objects.filter(telegram_id=881292737).first()
                if admin_profile:
                    obj.created_by = request.user
            except Exception:
                pass
        super().save_model(request, obj, form, change)

    def activate_campaigns(self, request, queryset):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏"""
        updated = queryset.update(is_active=True, status='active')
        self.message_user(request, f'{updated} –∫–∞–º–ø–∞–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.')
    activate_campaigns.short_description = '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏'

    def deactivate_campaigns(self, request, queryset):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏"""
        updated = queryset.update(is_active=False, status='paused')
        self.message_user(request, f'{updated} –∫–∞–º–ø–∞–Ω–∏–π –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.')
    deactivate_campaigns.short_description = '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏'

    def set_completed(self, request, queryset):
        """–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ"""
        updated = queryset.update(status='completed')
        self.message_user(request, f'{updated} –∫–∞–º–ø–∞–Ω–∏–π –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ.')
    set_completed.short_description = '–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ'
