# Generated by Django 4.2.11 on 2025-09-06 09:38

from django.db import migrations
import re


# Маппинг стандартных категорий для перевода
CATEGORY_TRANSLATIONS = {
    # Русский -> Английский
    'Продукты': 'Products',
    'Супермаркеты': 'Supermarkets',
    'Другие продукты': 'Other Products',
    'Кафе и рестораны': 'Cafes and Restaurants',
    'Рестораны и кафе': 'Restaurants and Cafes',
    'АЗС': 'Gas Stations',
    'Транспорт': 'Transport',
    'Такси': 'Taxi',
    'Общественный транспорт': 'Public Transport',
    'Автомобиль': 'Car',
    'Жилье': 'Housing',
    'Аптеки': 'Pharmacies',
    'Медицина': 'Medicine',
    'Красота': 'Beauty',
    'Спорт': 'Sports',
    'Спорт и фитнес': 'Sports and Fitness',
    'Спортивные товары': 'Sports Goods',
    'Одежда и обувь': 'Clothes and Shoes',
    'Цветы': 'Flowers',
    'Развлечения': 'Entertainment',
    'Образование': 'Education',
    'Подарки': 'Gifts',
    'Путешествия': 'Travel',
    'Связь и интернет': 'Communication and Internet',
    'Коммунальные услуги и подписки': 'Utilities and Subscriptions',
    'Родственники': 'Relatives',
    'Прочие расходы': 'Other Expenses',
    
    # Английский -> Русский (обратный маппинг)
    'Products': 'Продукты',
    'Supermarkets': 'Супермаркеты',
    'Other Products': 'Другие продукты',
    'Cafes and Restaurants': 'Кафе и рестораны',
    'Restaurants and Cafes': 'Рестораны и кафе',
    'Gas Stations': 'АЗС',
    'Transport': 'Транспорт',
    'Taxi': 'Такси',
    'Public Transport': 'Общественный транспорт',
    'Car': 'Автомобиль',
    'Housing': 'Жилье',
    'Pharmacies': 'Аптеки',
    'Medicine': 'Медицина',
    'Beauty': 'Красота',
    'Sports': 'Спорт',
    'Sports and Fitness': 'Спорт и фитнес',
    'Sports Goods': 'Спортивные товары',
    'Clothes and Shoes': 'Одежда и обувь',
    'Flowers': 'Цветы',
    'Entertainment': 'Развлечения',
    'Education': 'Образование',
    'Gifts': 'Подарки',
    'Travel': 'Путешествия',
    'Communication and Internet': 'Связь и интернет',
    'Utilities and Subscriptions': 'Коммунальные услуги и подписки',
    'Relatives': 'Родственники',
    'Other Expenses': 'Прочие расходы',
}


def detect_language(text):
    """Определение языка текста"""
    has_cyrillic = bool(re.search(r'[а-яА-ЯёЁ]', text))
    has_latin = bool(re.search(r'[a-zA-Z]', text))
    
    if has_cyrillic and not has_latin:
        return 'ru'
    elif has_latin and not has_cyrillic:
        return 'en'
    else:
        return 'mixed'


def extract_emoji(text):
    """Извлечь эмодзи из текста"""
    emoji_pattern = re.compile(
        "["
        "\U0001F600-\U0001F64F"
        "\U0001F300-\U0001F5FF"
        "\U0001F680-\U0001F6FF"
        "\U0001F1E0-\U0001F1FF"
        "\U00002702-\U000027B0"
        "\U000024C2-\U0001F251"
        "]+", flags=re.UNICODE
    )
    emojis = emoji_pattern.findall(text)
    return emojis[0] if emojis else None


def remove_emoji(text):
    """Удалить эмодзи из текста"""
    emoji_pattern = re.compile(
        "["
        "\U0001F600-\U0001F64F"
        "\U0001F300-\U0001F5FF"
        "\U0001F680-\U0001F6FF"
        "\U0001F1E0-\U0001F1FF"
        "\U00002702-\U000027B0"
        "\U000024C2-\U0001F251"
        "]+", flags=re.UNICODE
    )
    return emoji_pattern.sub('', text).strip()


def migrate_categories_data(apps, schema_editor):
    """Миграция существующих категорий на мультиязычную структуру"""
    ExpenseCategory = apps.get_model('expenses', 'ExpenseCategory')
    CategoryKeyword = apps.get_model('expenses', 'CategoryKeyword')
    
    # Обрабатываем все категории
    for category in ExpenseCategory.objects.all():
        # Извлекаем текст без эмодзи
        text = remove_emoji(category.name).strip()
        
        if not text:
            continue
        
        # Определяем язык категории
        lang = detect_language(text)
        
        if lang == 'ru':
            category.name_ru = text
            category.original_language = 'ru'
            
            # Если это стандартная категория - добавляем перевод
            if text in CATEGORY_TRANSLATIONS:
                category.name_en = CATEGORY_TRANSLATIONS[text]
                category.is_translatable = True
            else:
                category.is_translatable = False
                
        elif lang == 'en':
            category.name_en = text
            category.original_language = 'en'
            
            # Если это стандартная категория - добавляем перевод
            if text in CATEGORY_TRANSLATIONS:
                category.name_ru = CATEGORY_TRANSLATIONS[text]
                category.is_translatable = True
            else:
                category.is_translatable = False
                
        else:  # mixed
            # Для смешанных языков сохраняем в оба поля
            category.name_ru = text
            category.name_en = text
            category.original_language = 'mixed'
            category.is_translatable = False
        
        category.save()
    
    # Обрабатываем ключевые слова
    for keyword in CategoryKeyword.objects.all():
        # Определяем язык ключевого слова
        lang = detect_language(keyword.keyword)
        
        if lang == 'ru':
            keyword.language = 'ru'
        else:
            keyword.language = 'en'
        
        keyword.save()


def reverse_migration(apps, schema_editor):
    """Откат миграции"""
    # Ничего не делаем при откате, так как старое поле name остается
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('expenses', '0029_add_multilingual_category_fields'),
    ]

    operations = [
        migrations.RunPython(migrate_categories_data, reverse_migration),
    ]