# Generated by Django 4.2.11 on 2025-09-08 11:57

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('expenses', '0033_top5pin_top5snapshot_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='SystemHealthCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('database_status', models.BooleanField(default=True)),
                ('database_response_time', models.FloatField(null=True)),
                ('redis_status', models.BooleanField(default=True)),
                ('redis_response_time', models.FloatField(null=True)),
                ('redis_memory_usage', models.BigIntegerField(null=True)),
                ('telegram_api_status', models.BooleanField(default=True)),
                ('telegram_api_response_time', models.FloatField(null=True)),
                ('openai_api_status', models.BooleanField(default=True)),
                ('openai_api_response_time', models.FloatField(null=True)),
                ('google_ai_api_status', models.BooleanField(default=True)),
                ('google_ai_api_response_time', models.FloatField(null=True)),
                ('celery_status', models.BooleanField(default=True)),
                ('celery_workers_count', models.IntegerField(null=True)),
                ('celery_queue_size', models.IntegerField(null=True)),
                ('disk_free_gb', models.FloatField(null=True)),
                ('memory_usage_percent', models.FloatField(null=True)),
                ('cpu_usage_percent', models.FloatField(null=True)),
                ('overall_status', models.CharField(default='healthy', max_length=20)),
                ('issues', models.JSONField(default=list)),
            ],
            options={
                'verbose_name': 'Проверка здоровья системы',
                'verbose_name_plural': 'Проверки здоровья системы',
                'db_table': 'system_health_checks',
                'indexes': [models.Index(fields=['-timestamp'], name='system_heal_timesta_4b08aa_idx'), models.Index(fields=['overall_status'], name='system_heal_overall_ee05de_idx')],
            },
        ),
        migrations.CreateModel(
            name='AIServiceMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(choices=[('openai', 'OpenAI'), ('google', 'Google AI'), ('yandex', 'Yandex SpeechKit')], max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('response_time', models.FloatField()),
                ('tokens_used', models.IntegerField(blank=True, null=True)),
                ('characters_processed', models.IntegerField(blank=True, null=True)),
                ('success', models.BooleanField(default=True)),
                ('error_type', models.CharField(blank=True, max_length=100, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('user_id', models.BigIntegerField(null=True)),
                ('operation_type', models.CharField(max_length=50)),
                ('model_used', models.CharField(blank=True, max_length=100, null=True)),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
            ],
            options={
                'verbose_name': 'Метрика AI сервиса',
                'verbose_name_plural': 'Метрики AI сервисов',
                'db_table': 'ai_service_metrics',
                'indexes': [models.Index(fields=['service', 'timestamp'], name='ai_service__service_18a828_idx'), models.Index(fields=['success'], name='ai_service__success_6bc23d_idx'), models.Index(fields=['-timestamp'], name='ai_service__timesta_83bcdc_idx'), models.Index(fields=['user_id', 'timestamp'], name='ai_service__user_id_b50f3f_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('messages_sent', models.IntegerField(default=0)),
                ('voice_messages', models.IntegerField(default=0)),
                ('photos_sent', models.IntegerField(default=0)),
                ('commands_used', models.JSONField(default=dict)),
                ('expenses_added', models.IntegerField(default=0)),
                ('incomes_added', models.IntegerField(default=0)),
                ('categories_used', models.JSONField(default=dict)),
                ('ai_categorizations', models.IntegerField(default=0)),
                ('manual_categorizations', models.IntegerField(default=0)),
                ('cashback_calculated', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('cashback_transactions', models.IntegerField(default=0)),
                ('errors_encountered', models.IntegerField(default=0)),
                ('error_types', models.JSONField(default=dict)),
                ('total_session_time', models.IntegerField(default=0)),
                ('peak_hour', models.IntegerField(null=True)),
                ('pdf_reports_generated', models.IntegerField(default=0)),
                ('recurring_payments_processed', models.IntegerField(default=0)),
                ('budget_checks', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='expenses.profile')),
            ],
            options={
                'verbose_name': 'Аналитика пользователя',
                'verbose_name_plural': 'Аналитика пользователей',
                'db_table': 'user_analytics',
                'indexes': [models.Index(fields=['date'], name='user_analyt_date_41e1a2_idx'), models.Index(fields=['profile', 'date'], name='user_analyt_profile_4ccaa1_idx'), models.Index(fields=['-date'], name='user_analyt_date_e4ae64_idx')],
                'unique_together': {('profile', 'date')},
            },
        ),
    ]
