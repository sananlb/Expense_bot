"""
–ú–æ–¥–µ–ª—å –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–ª–æ–≥–µ—Ä–∞–º
"""
from django.db import models
from django.db.models import Count, Sum, Q
from django.utils import timezone
from datetime import timedelta
from expenses.models import Profile, Subscription


class BloggerAggregateManager(models.Manager):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–ª–æ–≥–µ—Ä–∞–º"""

    def get_queryset(self):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤ —Å –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        from django.db.models import Count, Sum, Q, F, Value
        from django.db.models.functions import Substr

        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –±–ª–æ–≥–µ—Ä–æ–≤ (–ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –¥–æ _)
        bloggers = Profile.objects.filter(
            acquisition_source='blogger',
            acquisition_campaign__isnull=False
        ).values(
            'acquisition_campaign'
        ).distinct()

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤
        unique_bloggers = {}
        for item in bloggers:
            campaign = item['acquisition_campaign']
            if campaign:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –±–ª–æ–≥–µ—Ä–∞ (—á–∞—Å—Ç—å –¥–æ –ø–µ—Ä–≤–æ–≥–æ _)
                blogger_name = campaign.split('_')[0]
                if blogger_name not in unique_bloggers:
                    unique_bloggers[blogger_name] = {
                        'campaigns': [],
                        'first_campaign': campaign
                    }
                unique_bloggers[blogger_name]['campaigns'].append(campaign)

        return unique_bloggers


class BloggerAggregate(models.Model):
    """
    –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–ª–æ–≥–µ—Ä–æ–≤.
    –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏.
    """

    blogger_name = models.CharField(max_length=100, primary_key=True, verbose_name='–ò–º—è –±–ª–æ–≥–µ—Ä–∞')
    total_users = models.IntegerField(default=0, verbose_name='–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    active_users = models.IntegerField(default=0, verbose_name='–ê–∫—Ç–∏–≤–Ω—ã—Ö (7–¥)')
    paying_users = models.IntegerField(default=0, verbose_name='–ü–ª–∞—Ç—è—â–∏—Ö')
    trial_users = models.IntegerField(default=0, verbose_name='–ù–∞ –ø—Ä–æ–±–Ω–æ–º')
    conversion_to_paying = models.FloatField(default=0, verbose_name='–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–ª–∞—Ç—è—â–∏—Ö (%)')
    total_revenue = models.IntegerField(default=0, verbose_name='–û–±—â–∏–π –¥–æ—Ö–æ–¥ (‚≠ê)')
    campaigns = models.JSONField(default=list, verbose_name='–ö–∞–º–ø–∞–Ω–∏–∏')
    first_user_date = models.DateTimeField(null=True, verbose_name='–ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    last_user_date = models.DateTimeField(null=True, verbose_name='–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

    class Meta:
        managed = False  # –ù–µ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ –ë–î
        verbose_name = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–≥–µ—Ä–∞'
        verbose_name_plural = 'üìπ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–≥–µ—Ä–æ–≤'

    def __str__(self):
        return self.blogger_name

    @classmethod
    def get_all_bloggers(cls):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª–æ–≥–µ—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        bloggers_data = []

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –±–ª–æ–≥–µ—Ä–æ–≤
        campaigns = Profile.objects.filter(
            acquisition_source='blogger',
            acquisition_campaign__isnull=False
        ).values_list('acquisition_campaign', flat=True).distinct()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–ª–æ–≥–µ—Ä–∞–º
        blogger_campaigns = {}
        for campaign in campaigns:
            if campaign:
                blogger_name = campaign.split('_')[0]
                if blogger_name not in blogger_campaigns:
                    blogger_campaigns[blogger_name] = []
                blogger_campaigns[blogger_name].append(campaign)

        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–≥–µ—Ä–∞ —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for blogger_name, campaigns_list in blogger_campaigns.items():
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ –±–ª–æ–≥–µ—Ä–∞
            users = Profile.objects.filter(
                acquisition_source='blogger',
                acquisition_campaign__in=campaigns_list
            )

            total = users.count()
            if total == 0:
                continue

            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            week_ago = timezone.now() - timedelta(days=7)
            active = users.filter(last_activity__gte=week_ago).count()

            # –ü–ª–∞—Ç—è—â–∏–µ
            paying = users.filter(
                subscriptions__is_active=True,
                subscriptions__type__in=['month', 'six_months']
            ).distinct().count()

            # –ù–∞ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
            trial = users.filter(
                subscriptions__is_active=True,
                subscriptions__type='trial'
            ).distinct().count()

            # –û–±—â–∏–π –¥–æ—Ö–æ–¥
            total_revenue = users.aggregate(
                total=Sum('total_stars_paid')
            )['total'] or 0

            # –î–∞—Ç—ã
            dates = users.aggregate(
                first=models.Min('acquisition_date'),
                last=models.Max('acquisition_date')
            )

            # –ö–æ–Ω–≤–µ—Ä—Å–∏—è
            conversion = (paying / total * 100) if total > 0 else 0

            blogger_data = cls(
                blogger_name=blogger_name,
                total_users=total,
                active_users=active,
                paying_users=paying,
                trial_users=trial,
                conversion_to_paying=conversion,
                total_revenue=total_revenue,
                campaigns=campaigns_list,
                first_user_date=dates['first'],
                last_user_date=dates['last']
            )
            bloggers_data.append(blogger_data)

        return bloggers_data

    @property
    def personal_link(self):
        """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –±–ª–æ–≥–µ—Ä–∞"""
        return f"https://t.me/showmecoinbot?start=b_{self.blogger_name}"

    @property
    def efficiency_rating(self):
        """–û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if self.conversion_to_paying >= 15:
            return "üî• –û—Ç–ª–∏—á–Ω–æ"
        elif self.conversion_to_paying >= 10:
            return "‚úÖ –•–æ—Ä–æ—à–æ"
        elif self.conversion_to_paying >= 5:
            return "üìà –ù–æ—Ä–º–∞–ª—å–Ω–æ"
        else:
            return "üìä –ù–∏–∑–∫–∞—è"

    def get_users_queryset(self):
        """–ü–æ–ª—É—á–∏—Ç—å queryset –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–ª–æ–≥–µ—Ä–∞"""
        return Profile.objects.filter(
            acquisition_source='blogger',
            acquisition_campaign__in=self.campaigns
        )