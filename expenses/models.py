"""
–ú–æ–¥–µ–ª–∏ ExpenseBot —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é
"""
from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator
from django.utils import timezone
from datetime import date, datetime, time
from decimal import Decimal
import string
import random


class Profile(models.Model):
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    telegram_id = models.BigIntegerField(unique=True, db_index=True)
    
    # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    language_code = models.CharField(
        max_length=2, 
        default='ru', 
        choices=[('ru', '–†—É—Å—Å–∫–∏–π'), ('en', 'English')]
    )
    timezone = models.CharField(max_length=50, default='UTC')
    currency = models.CharField(max_length=3, default='RUB')
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    # –ë–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    is_beta_tester = models.BooleanField(
        default=False,
        verbose_name='–ë–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä',
        help_text='–ò–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤ –±–µ—Ç–∞-—Ä–µ–∂–∏–º–µ'
    )
    beta_access_key = models.CharField(
        max_length=50,
        null=True,
        blank=True,
        verbose_name='–ö–ª—é—á –±–µ—Ç–∞-–¥–æ—Å—Ç—É–ø–∞',
        help_text='–ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    )
    
    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ - –£–î–ê–õ–ï–ù–û
    # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ Telegram Stars —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª–∏:
    # AffiliateLink, AffiliateReferral, AffiliateCommission
    last_activity = models.DateTimeField(
        null=True,
        blank=True,
        verbose_name='–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        help_text='–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    )

    # –ü—Ä–∞–≤–æ–≤—ã–µ —Å–æ–≥–ª–∞—Å–∏—è
    accepted_privacy = models.BooleanField(
        default=False,
        verbose_name='–ü—Ä–∏–Ω—è—Ç–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î–Ω'
    )
    accepted_offer = models.BooleanField(
        default=False,
        verbose_name='–ü—Ä–∏–Ω—è—Ç–∞ –ø—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞'
    )
    
    # –°–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç (–¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–æ)
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –æ–¥–Ω–æ–º—É –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤—É.
    # –ï—Å–ª–∏ null ‚Äî –≤–µ–¥–µ—Ç –ª–∏—á–Ω—ã–π –±—é–¥–∂–µ—Ç.
    household = models.ForeignKey(
        'Household',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='profiles',
        verbose_name='–î–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–æ'
    )
    
    class Meta:
        db_table = 'users_profile'
        verbose_name = '–ü—Ä–æ—Ñ–∏–ª—å'
        verbose_name_plural = '–ü—Ä–æ—Ñ–∏–ª–∏'
        indexes = [
            models.Index(fields=['telegram_id']),
        ]
    
    def __str__(self):
        return f"User {self.telegram_id}"
    
    # –ú–µ—Ç–æ–¥ generate_referral_code —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ Telegram Stars
    
    @property
    def referrals_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return self.referred_users.count()
    
    @property
    def active_referrals_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        from django.db.models import Q
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ AffiliateReferral
        referred_profiles = Profile.objects.filter(
            referred_by__referrer=self
        )
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        return referred_profiles.filter(
            Q(subscriptions__is_active=True) &
            Q(subscriptions__end_date__gt=timezone.now())
        ).distinct().count()


class Household(models.Model):
    """–î–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–æ (—Å–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç)"""
    created_at = models.DateTimeField(auto_now_add=True)
    name = models.CharField(max_length=100, null=True, blank=True)
    creator = models.ForeignKey(
        Profile, 
        on_delete=models.SET_NULL, 
        null=True,
        related_name='created_households',
        verbose_name='–°–æ–∑–¥–∞—Ç–µ–ª—å'
    )
    max_members = models.IntegerField(default=5, verbose_name='–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
    is_active = models.BooleanField(default=True, verbose_name='–ê–∫—Ç–∏–≤–Ω–æ')

    class Meta:
        db_table = 'households'
        verbose_name = '–î–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–æ'
        verbose_name_plural = '–î–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–∞'
        indexes = [
            models.Index(fields=['is_active']),
        ]

    def __str__(self):
        return self.name or f"Household #{self.id}"
    
    @property
    def members_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–∞"""
        return self.profiles.count()
    
    def can_add_member(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        return self.is_active and self.members_count < self.max_members


class FamilyInvite(models.Model):
    """–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ deep-link"""
    inviter = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='family_invites')
    household = models.ForeignKey(Household, on_delete=models.CASCADE, related_name='invites')
    token = models.CharField(max_length=64, unique=True, db_index=True)
    created_at = models.DateTimeField(auto_now_add=True)
    expires_at = models.DateTimeField(null=True, blank=True)
    is_active = models.BooleanField(default=True)
    used_by = models.ForeignKey(
        Profile, 
        on_delete=models.SET_NULL, 
        null=True, 
        blank=True,
        related_name='used_invites',
        verbose_name='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
    )
    used_at = models.DateTimeField(null=True, blank=True, verbose_name='–î–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')

    class Meta:
        db_table = 'family_invites'
        verbose_name = '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–µ–º. –±—é–¥–∂–µ—Ç'
        verbose_name_plural = '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —Å–µ–º. –±—é–¥–∂–µ—Ç'
        indexes = [
            models.Index(fields=['token']),
            models.Index(fields=['is_active', 'expires_at']),
        ]

    def __str__(self):
        return f"Invite {self.token} -> HH#{self.household_id} by {self.inviter_id}"

    def is_valid(self):
        from django.utils import timezone as dj_tz
        if not self.is_active:
            return False
        if self.used_by:
            return False
        if self.expires_at and dj_tz.now() > self.expires_at:
            return False
        return True
    
    @staticmethod
    def generate_token():
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        import secrets
        return secrets.token_urlsafe(32)


class UserSettings(models.Model):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    profile = models.OneToOneField(Profile, on_delete=models.CASCADE, related_name='settings')
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    budget_alerts_enabled = models.BooleanField(default=True)
    
    # –ö–µ—à–±—ç–∫
    cashback_enabled = models.BooleanField(default=True, verbose_name='–ö–µ—à–±—ç–∫ –≤–∫–ª—é—á–µ–Ω')

    # –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: –ª–∏—á–Ω—ã–π –∏–ª–∏ —Å–µ–º–µ–π–Ω—ã–π
    VIEW_SCOPE_CHOICES = [
        ('personal', '–õ–∏—á–Ω—ã–π'),
        ('household', '–°–µ–º—å—è'),
    ]
    view_scope = models.CharField(
        max_length=20,
        choices=VIEW_SCOPE_CHOICES,
        default='personal',
        verbose_name='–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    )
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'users_settings'
        verbose_name = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'
        verbose_name_plural = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'


class ExpenseCategory(models.Model):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    LANGUAGE_CHOICES = [
        ('ru', 'Russian'),
        ('en', 'English'),
        ('mixed', 'Mixed'),
    ]
    
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='categories')
    name = models.CharField(max_length=100)  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    
    # –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    name_ru = models.CharField(max_length=100, blank=True, null=True, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º')
    name_en = models.CharField(max_length=100, blank=True, null=True, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º')
    
    # –Ø–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å)
    original_language = models.CharField(
        max_length=10,
        choices=LANGUAGE_CHOICES,
        default='ru',
        verbose_name='–Ø–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞'
    )
    
    # –§–ª–∞–≥: –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
    is_translatable = models.BooleanField(default=True, verbose_name='–¢—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞')
    
    icon = models.CharField(max_length=10, default='üí∞')
    
    # –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'expenses_category'
        verbose_name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'
        unique_together = ['profile', 'name']
        indexes = [
            models.Index(fields=['profile', 'name']),
            models.Index(fields=['profile', 'name_ru']),
            models.Index(fields=['profile', 'name_en']),
        ]
        
    def save(self, *args, **kwargs):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º save –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—è name"""
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ name –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if self.name_ru:
            self.name = f"{self.icon} {self.name_ru}" if self.icon else self.name_ru
        elif self.name_en:
            self.name = f"{self.icon} {self.name_en}" if self.icon else self.name_en
        # –ï—Å–ª–∏ name –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —á—Ç–æ –µ—Å—Ç—å
        elif not self.name:
            self.name = "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            
        super().save(*args, **kwargs)
    
    def __str__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_display_name –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        return self.get_display_name('ru')
    
    def get_display_name(self, language_code='ru'):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ"""
        
        if not self.is_translatable:
            # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
            if self.original_language == 'ru':
                name = self.name_ru
            elif self.original_language == 'en':
                name = self.name_en
            else:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ name –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                name = self.name.replace(self.icon, '').strip()
            
            return f"{self.icon} {name}" if name else self.name
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–∏–º–∞—è - –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–π —è–∑—ã–∫ —Å fallback
        if language_code == 'ru':
            name = self.name_ru or self.name_en
        else:
            name = self.name_en or self.name_ru
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback –Ω–∞ —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ name
        if not name:
            name = self.name.replace(self.icon, '').strip()
        
        return f"{self.icon} {name}" if name else self.name


class CategoryKeyword(models.Model):
    """–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    LANGUAGE_CHOICES = [
        ('ru', 'Russian'),
        ('en', 'English'),
    ]
    
    category = models.ForeignKey(ExpenseCategory, on_delete=models.CASCADE, related_name='keywords')
    keyword = models.CharField(max_length=100, db_index=True)
    
    # –Ø–∑—ã–∫ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    language = models.CharField(
        max_length=10,
        choices=LANGUAGE_CHOICES,
        default='ru',
        verbose_name='–Ø–∑—ã–∫ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞'
    )
    
    # –°—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ä—É—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
    usage_count = models.IntegerField(default=0, verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π')
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å –¥–ª—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Å–ª–æ–≤
    normalized_weight = models.FloatField(default=1.0, verbose_name='–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å')
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        db_table = 'expenses_category_keyword'
        verbose_name = '–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
        verbose_name_plural = '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π'
        unique_together = ['category', 'keyword', 'language']
        indexes = [
            models.Index(fields=['category', 'keyword']),
            models.Index(fields=['normalized_weight']),
            models.Index(fields=['language']),
        ]
    
    def __str__(self):
        return f"{self.keyword} ({self.language}) -> {self.category.name} (–≤–µ—Å: {self.normalized_weight:.2f})"


class Expense(models.Model):
    """–¢—Ä–∞—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='expenses')
    category = models.ForeignKey(
        ExpenseCategory, 
        on_delete=models.SET_NULL, 
        null=True,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å NULL –¥–ª—è –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        blank=True,
        related_name='expenses'
    )
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    amount = models.DecimalField(max_digits=12, decimal_places=2, validators=[MinValueValidator(0.01)])
    currency = models.CharField(max_length=3, default='RUB')  # –í–∞–ª—é—Ç–∞ —Ç—Ä–∞—Ç—ã
    description = models.TextField(blank=True)
    
    # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ –¢–ó)
    expense_date = models.DateField(default=date.today)
    expense_time = models.TimeField(default=datetime.now)
    
    # –í–ª–æ–∂–µ–Ω–∏—è
    receipt_photo = models.CharField(max_length=255, blank=True)
    
    # AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
    ai_categorized = models.BooleanField(default=False)  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ AI
    ai_confidence = models.DecimalField(
        max_digits=3, 
        decimal_places=2, 
        null=True, 
        blank=True,
        validators=[MinValueValidator(0), MaxValueValidator(1)]
    )  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    # –ö–µ—à–±–µ–∫
    cashback_excluded = models.BooleanField(default=False)  # –ò—Å–∫–ª—é—á–∏—Ç—å –∫–µ—à–±–µ–∫ –¥–ª—è —ç—Ç–æ–π —Ç—Ä–∞—Ç—ã
    cashback_amount = models.DecimalField(
        max_digits=12, 
        decimal_places=2, 
        default=Decimal('0'),
        validators=[MinValueValidator(0)]
    )  # –°—É–º–º–∞ –∫–µ—à–±–µ–∫–∞ –¥–ª—è —ç—Ç–æ–π —Ç—Ä–∞—Ç—ã
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'expenses_expense'
        verbose_name = '–¢—Ä–∞—Ç–∞'
        verbose_name_plural = '–¢—Ä–∞—Ç—ã'
        ordering = ['-expense_date', '-expense_time']
        indexes = [
            models.Index(fields=['profile', '-expense_date']),
            models.Index(fields=['profile', 'category', '-expense_date']),
        ]
    
    def __str__(self):
        return f"{self.amount} {self.profile.currency} - {self.description[:30]}"


class Budget(models.Model):
    """–ë—é–¥–∂–µ—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='budgets')
    category = models.ForeignKey(ExpenseCategory, on_delete=models.CASCADE, null=True, blank=True)
    
    amount = models.DecimalField(max_digits=12, decimal_places=2)
    period_type = models.CharField(
        max_length=20,
        choices=[
            ('monthly', '–ú–µ—Å—è—á–Ω—ã–π'),
            ('weekly', '–ù–µ–¥–µ–ª—å–Ω—ã–π'),
            ('daily', '–î–Ω–µ–≤–Ω–æ–π')
        ]
    )
    start_date = models.DateField()
    end_date = models.DateField(null=True, blank=True)
    
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'expenses_budget'
        verbose_name = '–ë—é–¥–∂–µ—Ç'
        verbose_name_plural = '–ë—é–¥–∂–µ—Ç—ã'


class RecurringPayment(models.Model):
    """–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã)"""
    
    # –¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π
    OPERATION_TYPE_EXPENSE = 'expense'
    OPERATION_TYPE_INCOME = 'income'
    OPERATION_TYPE_CHOICES = [
        (OPERATION_TYPE_EXPENSE, '–†–∞—Å—Ö–æ–¥'),
        (OPERATION_TYPE_INCOME, '–î–æ—Ö–æ–¥'),
    ]
    
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='recurring_payments')
    
    # –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥)
    operation_type = models.CharField(
        max_length=10, 
        choices=OPERATION_TYPE_CHOICES,
        default=OPERATION_TYPE_EXPENSE,
        verbose_name='–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏',
        db_index=True
    )
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Ç–µ–ø–µ—Ä—å –æ–±–∞ –ø–æ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ
    expense_category = models.ForeignKey(
        ExpenseCategory, 
        on_delete=models.SET_NULL, 
        null=True, 
        blank=True,
        related_name='recurring_expenses',
        verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞'
    )
    income_category = models.ForeignKey(
        'IncomeCategory',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='recurring_incomes',
        verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞'
    )
    
    amount = models.DecimalField(max_digits=12, decimal_places=2, validators=[MinValueValidator(0.01)])
    currency = models.CharField(max_length=3, default='RUB')
    description = models.CharField(max_length=200, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
    day_of_month = models.IntegerField(
        validators=[MinValueValidator(1), MaxValueValidator(30)],
        verbose_name='–î–µ–Ω—å –º–µ—Å—è—Ü–∞'
    )
    is_active = models.BooleanField(default=True, verbose_name='–ê–∫—Ç–∏–≤–µ–Ω')
    last_processed = models.DateField(null=True, blank=True, verbose_name='–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'expenses_recurring_payment'
        verbose_name = '–†–µ–≥—É–ª—è—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è'
        verbose_name_plural = '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'
        indexes = [
            models.Index(fields=['profile', 'is_active']),
            models.Index(fields=['day_of_month', 'is_active']),
            models.Index(fields=['operation_type', 'is_active']),
        ]
        constraints = [
            models.CheckConstraint(
                check=(
                    models.Q(operation_type='expense', expense_category__isnull=False) |
                    models.Q(operation_type='income', income_category__isnull=False)
                ),
                name='category_type_consistency'
            )
        ]
    
    def __str__(self):
        operation_sign = '+' if self.operation_type == self.OPERATION_TYPE_INCOME else '-'
        return f"{self.description} {operation_sign}{self.amount} {self.currency} ({self.day_of_month} —á–∏—Å–ª–∞)"
    
    @property
    def category(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        if self.operation_type == self.OPERATION_TYPE_EXPENSE:
            return self.expense_category
        return self.income_category
    
    def clean(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏"""
        from django.core.exceptions import ValidationError
        
        if self.operation_type == self.OPERATION_TYPE_EXPENSE and not self.expense_category:
            raise ValidationError('–î–ª—è —Ä–∞—Å—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞')
        
        if self.operation_type == self.OPERATION_TYPE_INCOME and not self.income_category:
            raise ValidationError('–î–ª—è –¥–æ—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞')
        
        # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –ø–æ–ª—è
        if self.operation_type == self.OPERATION_TYPE_EXPENSE:
            self.income_category = None
        else:
            self.expense_category = None


class Cashback(models.Model):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–±—ç–∫–∞—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='cashbacks')
    category = models.ForeignKey(ExpenseCategory, on_delete=models.CASCADE, null=True, blank=True)
    bank_name = models.CharField(max_length=100, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞')
    cashback_percent = models.DecimalField(
        max_digits=4, 
        decimal_places=2, 
        verbose_name='–ü—Ä–æ—Ü–µ–Ω—Ç –∫–µ—à–±—ç–∫–∞',
        validators=[MinValueValidator(0), MaxValueValidator(99)]
    )
    month = models.IntegerField(
        choices=[(i, i) for i in range(1, 13)], 
        verbose_name='–ú–µ—Å—è—Ü'
    )
    limit_amount = models.DecimalField(
        max_digits=12, 
        decimal_places=2, 
        null=True, 
        blank=True, 
        verbose_name='–õ–∏–º–∏—Ç'
    )
    description = models.CharField(
        max_length=200, 
        blank=True, 
        default='', 
        verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ'
    )
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'expenses_cashback'
        verbose_name = '–ö–µ—à–±—ç–∫'
        verbose_name_plural = '–ö–µ—à–±—ç–∫–∏'
        unique_together = [['profile', 'bank_name', 'month', 'category']]
        indexes = [
            models.Index(fields=['profile', 'month']),
            models.Index(fields=['profile', 'category']),
        ]
    
    def __str__(self):
        category_name = self.category.name if self.category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        return f"{self.bank_name} - {category_name} - {self.cashback_percent}%"


# –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class Subscription(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    SUBSCRIPTION_TYPES = [
        ('trial', '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥'),
        ('month', '–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'),
        ('six_months', '–ü–æ–ª—É–≥–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'),
    ]
    
    PAYMENT_METHODS = [
        ('trial', '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥'),
        ('stars', 'Telegram Stars'),
    ]
    
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='subscriptions')
    type = models.CharField(max_length=20, choices=SUBSCRIPTION_TYPES, default='month', blank=True)
    payment_method = models.CharField(max_length=20, choices=PAYMENT_METHODS, default='stars', blank=True)
    
    amount = models.IntegerField(default=0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ (0 –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞)
    telegram_payment_charge_id = models.CharField(max_length=255, unique=True, null=True, blank=True)
    
    start_date = models.DateTimeField(default=timezone.now)
    end_date = models.DateTimeField()
    
    is_active = models.BooleanField(default=True)
    notification_sent = models.BooleanField(default=False)  # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'subscriptions'
        verbose_name = '–ü–æ–¥–ø–∏—Å–∫–∞'
        verbose_name_plural = '–ü–æ–¥–ø–∏—Å–∫–∏'
        indexes = [
            models.Index(fields=['profile', 'is_active']),
            models.Index(fields=['end_date']),
        ]
    
    def __str__(self):
        return f"{self.profile} - {self.get_type_display()} –¥–æ {self.end_date.strftime('%d.%m.%Y')}"
    
    
    @property
    def is_valid(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        return self.is_active and self.end_date > timezone.now()


class SubscriptionNotification(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö"""
    NOTIFICATION_TYPES = [
        ('one_day', '–ó–∞ –¥–µ–Ω—å'),
    ]
    
    subscription = models.ForeignKey(
        Subscription,
        on_delete=models.CASCADE,
        related_name='notifications'
    )
    notification_type = models.CharField(
        max_length=20,
        choices=NOTIFICATION_TYPES
    )
    sent_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        db_table = 'subscription_notifications'
        unique_together = ['subscription', 'notification_type']
        verbose_name = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ'
        verbose_name_plural = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö'
    
    def __str__(self):
        return f"{self.subscription} - {self.get_notification_type_display()}"


class PromoCode(models.Model):
    """–ü—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    DISCOUNT_TYPES = [
        ('percent', '–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏'),
        ('fixed', '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞'),
        ('days', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏'),
    ]
    
    code = models.CharField(
        max_length=50,
        unique=True,
        db_index=True,
        verbose_name='–ö–æ–¥'
    )
    description = models.TextField(
        blank=True,
        verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ',
        help_text='–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞'
    )
    
    # –¢–∏–ø –∏ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏
    discount_type = models.CharField(
        max_length=10,
        choices=DISCOUNT_TYPES,
        default='percent',
        verbose_name='–¢–∏–ø —Å–∫–∏–¥–∫–∏'
    )
    discount_value = models.DecimalField(
        max_digits=5,
        decimal_places=2,
        verbose_name='–ó–Ω–∞—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏',
        help_text='–ü—Ä–æ—Ü–µ–Ω—Ç (0-100), –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –∏–ª–∏ –¥–Ω–∏'
    )
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    max_uses = models.IntegerField(
        default=0,
        verbose_name='–ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π',
        help_text='0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'
    )
    used_count = models.IntegerField(
        default=0,
        verbose_name='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π'
    )
    
    # –ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è
    valid_from = models.DateTimeField(
        default=timezone.now,
        verbose_name='–î–µ–π—Å—Ç–≤—É–µ—Ç —Å'
    )
    valid_until = models.DateTimeField(
        null=True,
        blank=True,
        verbose_name='–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ'
    )
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    is_active = models.BooleanField(
        default=True,
        verbose_name='–ê–∫—Ç–∏–≤–µ–Ω'
    )
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    created_by = models.ForeignKey(
        Profile,
        on_delete=models.SET_NULL,
        null=True,
        related_name='created_promocodes',
        verbose_name='–°–æ–∑–¥–∞–Ω'
    )
    
    class Meta:
        db_table = 'promocodes'
        verbose_name = '–ü—Ä–æ–º–æ–∫–æ–¥'
        verbose_name_plural = '–ü—Ä–æ–º–æ–∫–æ–¥—ã'
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.code} ({self.get_discount_display()})"
    
    def get_discount_display(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏"""
        if self.discount_type == 'percent':
            return f"-{self.discount_value}%"
        elif self.discount_type == 'fixed':
            return f"-{self.discount_value} –∑–≤—ë–∑–¥"
        else:
            return f"+{int(self.discount_value)} –¥–Ω–µ–π"
    
    def is_valid(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        now = timezone.now()
        if not self.is_active:
            return False
        if self.valid_until and now > self.valid_until:
            return False
        if now < self.valid_from:
            return False
        if self.max_uses > 0 and self.used_count >= self.max_uses:
            return False
        return True
    
    def apply_discount(self, base_price):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∫–∏–¥–∫—É –∫ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω–µ"""
        if self.discount_type == 'percent':
            return base_price * (1 - self.discount_value / 100)
        elif self.discount_type == 'fixed':
            return max(0, base_price - self.discount_value)
        return base_price


class PromoCodeUsage(models.Model):
    """–ò—Å—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    promocode = models.ForeignKey(
        PromoCode,
        on_delete=models.CASCADE,
        related_name='usages',
        verbose_name='–ü—Ä–æ–º–æ–∫–æ–¥'
    )
    profile = models.ForeignKey(
        Profile,
        on_delete=models.CASCADE,
        related_name='promocode_usages',
        verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    )
    subscription = models.ForeignKey(
        'Subscription',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name='–ü–æ–¥–ø–∏—Å–∫–∞'
    )
    used_at = models.DateTimeField(auto_now_add=True, verbose_name='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω')
    
    class Meta:
        db_table = 'promocode_usages'
        verbose_name = '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞'
        verbose_name_plural = '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤'
        unique_together = ['promocode', 'profile']
    
    def __str__(self):
        return f"{self.promocode.code} - {self.profile}"


# –ú–æ–¥–µ–ª—å ReferralBonus —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ Telegram Stars


class IncomeCategory(models.Model):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤"""
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='income_categories')
    name = models.CharField(max_length=100)
    icon = models.CharField(max_length=10, default='üíµ')
    
    # –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è
    name_ru = models.CharField(max_length=100, blank=True, null=True, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ (RU)')
    name_en = models.CharField(max_length=100, blank=True, null=True, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ (EN)')
    original_language = models.CharField(
        max_length=10, 
        choices=[('ru', '–†—É—Å—Å–∫–∏–π'), ('en', 'English'), ('other', 'Other')],
        default='ru',
        verbose_name='–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —è–∑—ã–∫'
    )
    is_translatable = models.BooleanField(default=True, verbose_name='–ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏')
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    is_active = models.BooleanField(default=True)
    is_default = models.BooleanField(default=False)  # –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'incomes_category'
        verbose_name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤'
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤'
        unique_together = ['profile', 'name']
        indexes = [
            models.Index(fields=['profile', 'name']),
            models.Index(fields=['profile', 'name_ru']),
            models.Index(fields=['profile', 'name_en']),
        ]
    
    def save(self, *args, **kwargs):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º save –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—è name"""
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ name –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if self.name_ru:
            self.name = f"{self.icon} {self.name_ru}" if self.icon else self.name_ru
        elif self.name_en:
            self.name = f"{self.icon} {self.name_en}" if self.icon else self.name_en
        # –ï—Å–ª–∏ name –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —á—Ç–æ –µ—Å—Ç—å
        elif not self.name:
            self.name = "–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã"
            
        super().save(*args, **kwargs)
        
    def __str__(self):
        return self.get_display_name('ru')
    
    def get_display_name(self, language_code='ru'):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ"""
        
        if not self.is_translatable:
            # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
            if self.original_language == 'ru':
                name = self.name_ru
            elif self.original_language == 'en':
                name = self.name_en
            else:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ name –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                name = self.name.replace(self.icon, '').strip()
        else:
            # –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–π —è–∑—ã–∫
            if language_code == 'ru':
                name = self.name_ru or self.name_en or self.name.replace(self.icon, '').strip()
            elif language_code == 'en':
                name = self.name_en or self.name_ru or self.name.replace(self.icon, '').strip()
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–∞–∫ fallback
                name = self.name_en or self.name_ru or self.name.replace(self.icon, '').strip()
        
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
        if name and self.icon and name.startswith(self.icon):
            return name
        elif name and self.icon:
            return f"{self.icon} {name}"
        elif name:
            return name
        else:
            return "–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã"


class Income(models.Model):
    """–î–æ—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='incomes')
    category = models.ForeignKey(
        IncomeCategory, 
        on_delete=models.SET_NULL, 
        null=True,
        blank=True,
        related_name='incomes'
    )
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    amount = models.DecimalField(max_digits=12, decimal_places=2, validators=[MinValueValidator(0.01)])
    currency = models.CharField(max_length=3, default='RUB')  # –í–∞–ª—é—Ç–∞ –¥–æ—Ö–æ–¥–∞
    description = models.TextField(blank=True)
    
    # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    income_date = models.DateField(default=date.today)
    income_time = models.TimeField(default=datetime.now)
    
    # –¢–∏–ø –¥–æ—Ö–æ–¥–∞
    income_type = models.CharField(
        max_length=20,
        default='other',
        choices=[
            ('salary', '–ó–∞—Ä–ø–ª–∞—Ç–∞'),
            ('bonus', '–ü—Ä–µ–º–∏—è'),
            ('freelance', '–§—Ä–∏–ª–∞–Ω—Å'),
            ('investment', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'),
            ('gift', '–ü–æ–¥–∞—Ä–æ–∫'),
            ('refund', '–í–æ–∑–≤—Ä–∞—Ç'),
            ('cashback', '–ö–µ—à–±—ç–∫'),
            ('other', '–ü—Ä–æ—á–µ–µ')
        ]
    )
    
    # –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å
    is_recurring = models.BooleanField(default=False)  # –†–µ–≥—É–ª—è—Ä–Ω—ã–π –¥–æ—Ö–æ–¥
    recurrence_day = models.IntegerField(
        null=True, 
        blank=True,
        validators=[MinValueValidator(1), MaxValueValidator(31)],
        help_text='–î–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤'
    )
    
    # AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
    ai_categorized = models.BooleanField(default=False)  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ AI
    ai_confidence = models.DecimalField(
        max_digits=3, 
        decimal_places=2, 
        null=True, 
        blank=True,
        validators=[MinValueValidator(0), MaxValueValidator(1)]
    )  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'incomes_income'
        verbose_name = '–î–æ—Ö–æ–¥'
        verbose_name_plural = '–î–æ—Ö–æ–¥—ã'
        ordering = ['-income_date', '-income_time']
        indexes = [
            models.Index(fields=['profile', '-income_date']),
            models.Index(fields=['profile', 'category', '-income_date']),
        ]
    
    def __str__(self):
        return f"+{self.amount} {self.currency} - {self.description[:30]}"


class IncomeCategoryKeyword(models.Model):
    """–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤"""
    category = models.ForeignKey(IncomeCategory, on_delete=models.CASCADE, related_name='keywords')
    keyword = models.CharField(max_length=100, db_index=True)
    
    # –°—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ä—É—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
    usage_count = models.IntegerField(default=0, verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π')
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å –¥–ª—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Å–ª–æ–≤
    normalized_weight = models.FloatField(default=1.0, verbose_name='–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å')
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        db_table = 'expenses_income_category_keyword'
        verbose_name = '–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞'
        verbose_name_plural = '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤'
        unique_together = ['category', 'keyword']
        indexes = [
            models.Index(fields=['keyword']),
            models.Index(fields=['category', 'usage_count']),
        ]
    
    def __str__(self):
        return f"{self.keyword} -> {self.category.name}"


DEFAULT_CATEGORIES = [
    ('–ü—Ä–æ–¥—É–∫—Ç—ã', 'üõí'),
    ('–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', 'üçΩÔ∏è'),
    ('–ê–ó–°', '‚õΩ'),
    ('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'üöï'),
    ('–ê–≤—Ç–æ–º–æ–±–∏–ª—å', 'üöó'),
    ('–ñ–∏–ª—å–µ', 'üè†'),
    ('–ê–ø—Ç–µ–∫–∏', 'üíä'),
    ('–ú–µ–¥–∏—Ü–∏–Ω–∞', 'üè•'),
    ('–ö—Ä–∞—Å–æ—Ç–∞', 'üíÑ'),
    ('–°–ø–æ—Ä—Ç –∏ —Ñ–∏—Ç–Ω–µ—Å', 'üèÉ'),
    ('–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å', 'üëî'),
    ('–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'üé≠'),
    ('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'üìö'),
    ('–ü–æ–¥–∞—Ä–∫–∏', 'üéÅ'),
    ('–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '‚úàÔ∏è'),
    ('–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏', 'üë™'),
    ('–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∏', 'üì±'),
    ('–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', 'üí∞')
]


class Top5Snapshot(models.Model):
    """–°–Ω–µ–ø—à–æ—Ç —Ç–æ–ø-5 –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = models.OneToOneField(Profile, on_delete=models.CASCADE, related_name='top5_snapshot')
    window_start = models.DateField()
    window_end = models.DateField()
    items = models.JSONField(default=list)  # —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–æ–ø-5
    hash = models.CharField(max_length=64, db_index=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = 'top5_snapshots'
        verbose_name = '–°–Ω–µ–ø—à–æ—Ç –¢–æ–ø‚Äë5'
        verbose_name_plural = '–°–Ω–µ–ø—à–æ—Ç—ã –¢–æ–ø‚Äë5'


class Top5Pin(models.Model):
    """–î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¢–æ–ø‚Äë5 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = models.OneToOneField(Profile, on_delete=models.CASCADE, related_name='top5_pin')
    chat_id = models.BigIntegerField()
    message_id = models.BigIntegerField()
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = 'top5_pins'
        verbose_name = '–ó–∞–∫—Ä–µ–ø –¢–æ–ø‚Äë5'
        verbose_name_plural = '–ó–∞–∫—Ä–µ–ø—ã –¢–æ–ø‚Äë5'


# =============================================================================
# –ú–æ–¥–µ–ª–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
# =============================================================================

class UserAnalytics(models.Model):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='analytics')
    date = models.DateField(auto_now_add=True)
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    messages_sent = models.IntegerField(default=0)
    voice_messages = models.IntegerField(default=0)
    photos_sent = models.IntegerField(default=0)
    commands_used = models.JSONField(default=dict)  # {"command": count}
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
    expenses_added = models.IntegerField(default=0)
    incomes_added = models.IntegerField(default=0)
    categories_used = models.JSONField(default=dict)  # {"category_id": count}
    ai_categorizations = models.IntegerField(default=0)
    manual_categorizations = models.IntegerField(default=0)
    
    # –ö–µ—à–±—ç–∫
    cashback_calculated = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    cashback_transactions = models.IntegerField(default=0)
    
    # –û—à–∏–±–∫–∏
    errors_encountered = models.IntegerField(default=0)
    error_types = models.JSONField(default=dict)  # {"error_type": count}
    
    # –í—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    total_session_time = models.IntegerField(default=0)
    peak_hour = models.IntegerField(null=True)  # —á–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (0-23)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    pdf_reports_generated = models.IntegerField(default=0)
    recurring_payments_processed = models.IntegerField(default=0)
    budget_checks = models.IntegerField(default=0)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'user_analytics'
        verbose_name = '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        verbose_name_plural = '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        unique_together = ['profile', 'date']
        indexes = [
            models.Index(fields=['date']),
            models.Index(fields=['profile', 'date']),
            models.Index(fields=['-date']),  # –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        ]
    
    def __str__(self):
        return f"Analytics for {self.profile.telegram_id} on {self.date}"


class AIServiceMetrics(models.Model):
    """–ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç—ã AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    SERVICE_CHOICES = [
        ('openai', 'OpenAI'),
        ('google', 'Google AI'),
        ('yandex', 'Yandex SpeechKit'),
    ]
    
    service = models.CharField(max_length=50, choices=SERVICE_CHOICES)
    timestamp = models.DateTimeField(auto_now_add=True)
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    response_time = models.FloatField()  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    tokens_used = models.IntegerField(null=True, blank=True)  # –¥–ª—è OpenAI
    characters_processed = models.IntegerField(null=True, blank=True)  # –¥–ª—è Google/Yandex
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    success = models.BooleanField(default=True)
    error_type = models.CharField(max_length=100, null=True, blank=True)
    error_message = models.TextField(null=True, blank=True)
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç
    user_id = models.BigIntegerField(null=True)  # telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    operation_type = models.CharField(max_length=50)  # 'categorization', 'voice_recognition', etc.
    model_used = models.CharField(max_length=100, null=True, blank=True)  # –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ —É—Å–ª–æ–≤–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö, –º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –≤–∞–ª—é—Ç—É)
    estimated_cost = models.DecimalField(max_digits=10, decimal_places=6, null=True, blank=True)
    
    class Meta:
        db_table = 'ai_service_metrics'
        verbose_name = '–ú–µ—Ç—Ä–∏–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞'
        verbose_name_plural = '–ú–µ—Ç—Ä–∏–∫–∏ AI —Å–µ—Ä–≤–∏—Å–æ–≤'
        indexes = [
            models.Index(fields=['service', 'timestamp']),
            models.Index(fields=['success']),
            models.Index(fields=['-timestamp']),
            models.Index(fields=['user_id', 'timestamp']),
        ]
    
    def __str__(self):
        return f"{self.service} - {self.timestamp} - {'‚úì' if self.success else '‚úó'}"


class SystemHealthCheck(models.Model):
    """–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    
    timestamp = models.DateTimeField(auto_now_add=True)
    
    # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    database_status = models.BooleanField(default=True)
    database_response_time = models.FloatField(null=True)  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    redis_status = models.BooleanField(default=True)
    redis_response_time = models.FloatField(null=True)
    redis_memory_usage = models.BigIntegerField(null=True)  # –≤ –±–∞–π—Ç–∞—Ö
    
    telegram_api_status = models.BooleanField(default=True)
    telegram_api_response_time = models.FloatField(null=True)
    
    openai_api_status = models.BooleanField(default=True)
    openai_api_response_time = models.FloatField(null=True)
    
    google_ai_api_status = models.BooleanField(default=True)
    google_ai_api_response_time = models.FloatField(null=True)
    
    celery_status = models.BooleanField(default=True)
    celery_workers_count = models.IntegerField(null=True)
    celery_queue_size = models.IntegerField(null=True)
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    disk_free_gb = models.FloatField(null=True)
    memory_usage_percent = models.FloatField(null=True)
    cpu_usage_percent = models.FloatField(null=True)
    
    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    overall_status = models.CharField(max_length=20, default='healthy')  # healthy, degraded, unhealthy
    issues = models.JSONField(default=list)  # —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å
    
    class Meta:
        db_table = 'system_health_checks'
        verbose_name = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã'
        verbose_name_plural = '–ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã'
        indexes = [
            models.Index(fields=['-timestamp']),
            models.Index(fields=['overall_status']),
        ]
    
    def __str__(self):
        return f"Health Check - {self.timestamp} - {self.overall_status}"


DEFAULT_INCOME_CATEGORIES = [
    ('–ó–∞—Ä–ø–ª–∞—Ç–∞', 'üíº'),
    ('–ü—Ä–µ–º–∏–∏ –∏ –±–æ–Ω—É—Å—ã', 'üéÅ'),
    ('–§—Ä–∏–ª–∞–Ω—Å', 'üíª'),
    ('–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'üìà'),
    ('–ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –≤–∫–ª–∞–¥–∞–º', 'üè¶'),
    ('–ê—Ä–µ–Ω–¥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', 'üè†'),
    ('–í–æ–∑–≤—Ä–∞—Ç—ã –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏', 'üí∏'),
    ('–ö–µ—à–±—ç–∫', 'üí≥'),
    ('–ü–æ–¥–∞—Ä–∫–∏', 'üéâ'),
    ('–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã', 'üí∞')
]

CATEGORY_KEYWORDS = {
    '–ü—Ä–æ–¥—É–∫—Ç—ã': [
        '–º–∞–≥–Ω–∏—Ç', '–ø—è—Ç–µ—Ä–æ—á–∫–∞', '–ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫', '–∞—à–∞–Ω', '–ª–µ–Ω—Ç–∞', '–¥–∏–∫—Å–∏', '–≤–∫—É—Å–≤–∏–ª–ª',
        'metro', '–æ–∫–µ–π', '–∞–∑–±—É–∫–∞ –≤–∫—É—Å–∞', '–ø—Ä–æ–¥—É–∫—Ç—ã', '—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç', '–≥–∏–ø–µ—Ä–º–∞—Ä–∫–µ—Ç',
        '–æ–≤–æ—â–∏', '—Ñ—Ä—É–∫—Ç—ã', '–º—è—Å–æ', '—Ä—ã–±–∞', '–º–æ–ª–æ–∫–æ', '—Ö–ª–µ–±', 'grocery', 'market',
        '–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π', '–±–∞–∫–∞–ª–µ—è', '—Å—ã—Ä', '–∫–æ–ª–±–∞—Å–∞', '–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π', '24 —á–∞—Å–∞',
        '–º–∞–∫–∞—Ä–æ–Ω—ã', '–∫—Ä—É–ø–∞', '—Ä–∏—Å', '–≥—Ä–µ—á–∫–∞', '—è–π—Ü–∞', '–º–∞—Å–ª–æ', '—Å–∞—Ö–∞—Ä', '—Å–æ–ª—å', '–º—É–∫–∞',
        '—Ö–∞–º—Å–∞', '–∫–∏–ª—å–∫–∞', '—Å–µ–ª–µ–¥–∫–∞', '—Å–µ–ª—å–¥—å', '—Å–∫—É–º–±—Ä–∏—è', '–º–∏–Ω—Ç–∞–π', '—Ç—Ä–µ—Å–∫–∞',
        '–∫–±', '–∫—Ä–∞—Å–Ω–æ–µ –±–µ–ª–æ–µ', '–≤–≤'
    ],
    '–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã': [
        '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–∞—Ñ–µ', '–±–∞—Ä', '–ø–∞–±', '–∫–æ—Ñ–µ–π–Ω—è', '–ø–∏—Ü—Ü–µ—Ä–∏—è', '—Å—É—à–∏', '—Ñ–∞—Å—Ç—Ñ—É–¥',
        'mcdonalds', 'kfc', 'burger king', 'subway', 'starbucks', 'coffee', '–æ–±–µ–¥',
        '—É–∂–∏–Ω', '–∑–∞–≤—Ç—Ä–∞–∫', '–ª–∞–Ω—á', '–¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã', 'delivery club', '—è–Ω–¥–µ–∫—Å –µ–¥–∞',
        '—à–æ–∫–æ–ª–∞–¥–Ω–∏—Ü–∞', '—Ç–µ—Ä–µ–º–æ–∫', '–∫—Ä–æ—à–∫–∞ –∫–∞—Ä—Ç–æ—à–∫–∞', '–¥–æ–¥–æ –ø–∏—Ü—Ü–∞', '–ø–∞–ø–∞ –¥–∂–æ–Ω—Å',
        '–∫–æ—Ñ–µ', '–∫–∞–ø—É—á–∏–Ω–æ', '–ª–∞—Ç—Ç–µ', '–∞–º–µ—Ä–∏–∫–∞–Ω–æ', '—ç—Å–ø—Ä–µ—Å—Å–æ', '—á–∞–π', '–ø–∏—Ü—Ü–∞', 
        '–±—É—Ä–≥–µ—Ä', '—Ä–æ–ª–ª—ã', '–ø–∞—Å—Ç–∞', '—Å–∞–ª–∞—Ç', '–¥–µ—Å–µ—Ä—Ç', '–º–æ—Ä–æ–∂–µ–Ω–æ–µ', '—Ç–æ—Ä—Ç'
    ],
    '–ê–ó–°': [
        '–∞–∑—Å', '–∑–∞–ø—Ä–∞–≤–∫–∞', '–±–µ–Ω–∑–∏–Ω', '—Ç–æ–ø–ª–∏–≤–æ', '–≥–∞–∑–ø—Ä–æ–º', '–ª—É–∫–æ–π–ª', '—Ä–æ—Å–Ω–µ—Ñ—Ç—å',
        'shell', 'bp', 'esso', '—Ç–∞—Ç–Ω–µ—Ñ—Ç—å', '–≥–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å', '–¥–∏–∑–µ–ª—å', '–≥–∞–∑', '–≥—Å–º',
        '92', '95', '98', '–∞–∏-92', '–∞–∏-95', '–∞–∏-98', '–¥—Ç', '–∞–≤—Ç–æ–∑–∞–ø—Ä–∞–≤–∫–∞'
    ],
    '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': [
        '—Ç–∞–∫—Å–∏', 'uber', '—è–Ω–¥–µ–∫—Å —Ç–∞–∫—Å–∏', '—Å–∏—Ç–∏–º–æ–±–∏–ª', 'gett', 'wheely', '–º–µ—Ç—Ä–æ',
        '–∞–≤—Ç–æ–±—É—Å', '—Ç—Ä–æ–ª–ª–µ–π–±—É—Å', '—Ç—Ä–∞–º–≤–∞–π', '–º–∞—Ä—à—Ä—É—Ç–∫–∞', '—ç–ª–µ–∫—Ç—Ä–∏—á–∫–∞', '–ø—Ä–æ–µ–∑–¥',
        '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '—Ç—Ä–æ–π–∫–∞', '–µ–¥–∏–Ω—ã–π', '–±–∏–ª–µ—Ç', '–ø–æ–¥–æ—Ä–æ–∂–Ω–∏–∫', '–ø—Ä–æ–µ–∑–¥–Ω–æ–π'
    ],
    '–ê–≤—Ç–æ–º–æ–±–∏–ª—å': [
        '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–º–∞—à–∏–Ω–∞', '–∞–≤—Ç–æ', '—Å—Ç–æ', '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å', '—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂', '–º–æ–π–∫–∞',
        '–ø–∞—Ä–∫–æ–≤–∫–∞', '—à—Ç—Ä–∞—Ñ', '–≥–∏–±–¥–¥', '–æ—Å–∞–≥–æ', '–∫–∞—Å–∫–æ', '—Ç–µ—Ö–æ—Å–º–æ—Ç—Ä', '—Ä–µ–º–æ–Ω—Ç',
        '–∑–∞–ø—á–∞—Å—Ç–∏', '–º–∞—Å–ª–æ', '–∞–Ω—Ç–∏—Ñ—Ä–∏–∑', '—Å—Ç–µ–∫–ª–æ–æ–º—ã–≤–∞—Ç–µ–ª—å', '–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏',
        '–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Ä–æ–≥–∞', '–ø–ª–∞—Ç–Ω–∞—è —Ç—Ä–∞—Å—Å–∞', 'toll', '–º4', '–∑—Å–¥', '—Ü–∫–∞–¥'
    ],
    '–ñ–∏–ª—å–µ': [
        '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–∞—Ä–µ–Ω–¥–∞', '–∏–ø–æ—Ç–µ–∫–∞', '–∂–∫—Ö', '–∫–æ–º–º—É–Ω–∞–ª–∫–∞', '–∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞',
        '—É–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è', '—Ç—Å–∂', '–∂—Å–∫', '–∫–∞–ø—Ä–µ–º–æ–Ω—Ç', '–¥–æ–º–æ—Ñ–æ–Ω', '–∫–æ–Ω—Å—å–µ—Ä–∂',
        '–æ—Ö—Ä–∞–Ω–∞', '—É–±–æ—Ä–∫–∞', '—Ä–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã', '—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫', '—ç–ª–µ–∫—Ç—Ä–∏–∫'
    ],
    '–ê–ø—Ç–µ–∫–∏': [
        '–∞–ø—Ç–µ–∫–∞', '—Ä–∏–≥–ª–∞', '–∞—Å–Ω–∞', '36.6', '–≥–æ—Ä–∑–¥—Ä–∞–≤', '—Å—Ç–æ–ª–∏—á–∫–∏', '—Ñ–∞—Ä–º–∞—Ü–∏—è',
        '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞', '–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã', '—Ç–∞–±–ª–µ—Ç–∫–∏', '–≤–∏—Ç–∞–º–∏–Ω—ã', '–±–∞–¥', 'pharmacy',
        '–∞–ø—Ç–µ—á–Ω—ã–π', '—Ä–µ—Ü–µ–ø—Ç', '–ø—Ä–µ–ø–∞—Ä–∞—Ç', '–ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π', '–∑–¥—Ä–∞–≤—Å–∏—Ç–∏'
    ],
    '–ú–µ–¥–∏—Ü–∏–Ω–∞': [
        '–∫–ª–∏–Ω–∏–∫–∞', '–±–æ–ª—å–Ω–∏—Ü–∞', '–ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞', '–≤—Ä–∞—á', '–¥–æ–∫—Ç–æ—Ä', '–º–µ–¥—Ü–µ–Ω—Ç—Ä',
        '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è', '–∑—É–±–Ω–æ–π', '–∞–Ω–∞–ª–∏–∑—ã', '—É–∑–∏', '–º—Ä—Ç', '–∫—Ç', '—Ä–µ–Ω—Ç–≥–µ–Ω',
        '–æ—Å–º–æ—Ç—Ä', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–ª–µ—á–µ–Ω–∏–µ', '–æ–ø–µ—Ä–∞—Ü–∏—è', '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π', '—Ç–µ—Ä–∞–ø–µ–≤—Ç'
    ],
    '–ö—Ä–∞—Å–æ—Ç–∞': [
        '—Å–∞–ª–æ–Ω', '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è', '–±–∞—Ä–±–µ—Ä—à–æ–ø', '–º–∞–Ω–∏–∫—é—Ä', '–ø–µ–¥–∏–∫—é—Ä', '–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥',
        '—Å–ø–∞', 'spa', '–º–∞—Å—Å–∞–∂', '—Å–æ–ª—è—Ä–∏–π', '—ç–ø–∏–ª—è—Ü–∏—è', '–¥–µ–ø–∏–ª—è—Ü–∏—è', '—Å—Ç—Ä–∏–∂–∫–∞',
        '–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ', '—É–∫–ª–∞–¥–∫–∞', '–∫–æ—Å–º–µ—Ç–∏–∫–∞', 'beauty', '–∫—Ä–∞—Å–æ—Ç–∞', '—É—Ö–æ–¥'
    ],
    '–°–ø–æ—Ä—Ç –∏ —Ñ–∏—Ç–Ω–µ—Å': [
        '—Ñ–∏—Ç–Ω–µ—Å', '—Å–ø–æ—Ä—Ç–∑–∞–ª', '—Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π', '–±–∞—Å—Å–µ–π–Ω', '–π–æ–≥–∞', '–ø–∏–ª–∞—Ç–µ—Å', '—Ç–∞–Ω—Ü—ã',
        '—Å–ø–æ—Ä—Ç', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '–∞–±–æ–Ω–µ–º–µ–Ω—Ç', 'world class', 'fitness', 'x-fit',
        '—Å–ø–æ—Ä—Ç–º–∞—Å—Ç–µ—Ä', '–¥–µ–∫–∞—Ç–ª–æ–Ω', '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π', '—Ç—Ä–µ–Ω–µ—Ä', '—Å–µ–∫—Ü–∏—è', '—Ñ–∏—Ç–Ω–µ—Å –∫–ª—É–±'
    ],
    '–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å': [
        '–æ–¥–µ–∂–¥–∞', '–æ–±—É–≤—å', 'zara', 'h&m', 'uniqlo', 'mango', 'bershka', '–º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã',
        '–±—É—Ç–∏–∫', '–¥–∂–∏–Ω—Å—ã', '–ø–ª–∞—Ç—å–µ', '–∫–æ—Å—Ç—é–º', '–∫—Ä–æ—Å—Å–æ–≤–∫–∏', '—Ç—É—Ñ–ª–∏', '—Å–∞–ø–æ–≥–∏',
        '–∫—É—Ä—Ç–∫–∞', '–ø–∞–ª—å—Ç–æ', '—Ä—É–±–∞—à–∫–∞', '—é–±–∫–∞', '–±—Ä—é–∫–∏', '–±–µ–ª—å–µ', '–Ω–æ—Å–∫–∏'
    ],
    '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': [
        '–∫–∏–Ω–æ', '—Ç–µ–∞—Ç—Ä', '–∫–æ–Ω—Ü–µ—Ä—Ç', '–º—É–∑–µ–π', '–≤—ã—Å—Ç–∞–≤–∫–∞', '–∫–ª—É–±', '–∫–∞—Ä–∞–æ–∫–µ', '–±–æ—É–ª–∏–Ω–≥',
        '–±–∏–ª—å—è—Ä–¥', '–∫–≤–µ—Å—Ç', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–æ—Ç–¥—ã—Ö', '–¥–æ—Å—É–≥', '–ø–∞—Ä–∫', '–∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã',
        '—Ü–∏—Ä–∫', '–∑–æ–æ–ø–∞—Ä–∫', '–∞–∫–≤–∞–ø–∞—Ä–∫', '–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä', '—Å–∏–Ω–µ–º–∞', 'imax', '–±–∏–ª–µ—Ç',
        '–ø–∏–≤–æ', '–≤–∏–Ω–æ', '–∞–ª–∫–æ–≥–æ–ª—å', '–∫–æ–∫—Ç–µ–π–ª—å', '–≤–∏—Å–∫–∏', '–≤–æ–¥–∫–∞', '–∫–æ–Ω—å—è–∫', '—à–∞–º–ø–∞–Ω—Å–∫–æ–µ'
    ],
    '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': [
        '–∫—É—Ä—Å—ã', '–æ–±—É—á–µ–Ω–∏–µ', '—à–∫–æ–ª–∞', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–∏–Ω—Å—Ç–∏—Ç—É—Ç', '–∫–æ–ª–ª–µ–¥–∂', '—É—á–µ–±–∞',
        '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '—Ç—Ä–µ–Ω–∏–Ω–≥', '—Å–µ–º–∏–Ω–∞—Ä', '–≤–µ–±–∏–Ω–∞—Ä', '—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä', '—É—á–µ–±–Ω–∏–∫',
        '–∫–Ω–∏–≥–∏', '–∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è', '—Ç–µ—Ç—Ä–∞–¥–∏', '—Ä—É—á–∫–∏', '—É—á–µ–±–Ω—ã–π', '—ç–∫–∑–∞–º–µ–Ω', '–¥–∏–ø–ª–æ–º'
    ],
    '–ü–æ–¥–∞—Ä–∫–∏': [
        '–ø–æ–¥–∞—Ä–æ–∫', '—Å—É–≤–µ–Ω–∏—Ä', '—Ü–≤–µ—Ç—ã', '–±—É–∫–µ—Ç', '–æ—Ç–∫—Ä—ã—Ç–∫–∞', '–ø–æ–¥–∞—Ä–æ—á–Ω—ã–π', '–ø—Ä–µ–∑–µ–Ω—Ç',
        '–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ', '–ø—Ä–∞–∑–¥–Ω–∏–∫', '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '—é–±–∏–ª–µ–π', '—Å–≤–∞–¥—å–±–∞', 'gift',
        '—Ñ–ª–æ—Ä–∏—Å—Ç', '—Ü–≤–µ—Ç–æ—á–Ω—ã–π', '—É–ø–∞–∫–æ–≤–∫–∞', '–ª–µ–Ω—Ç–∞', '—à–∞—Ä—ã', '–¥–µ–∫–æ—Ä'
    ],
    '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': [
        '–∞–≤–∏–∞–±–∏–ª–µ—Ç', '–±–∏–ª–µ—Ç', '—Å–∞–º–æ–ª–µ—Ç', '–ø–æ–µ–∑–¥', '—Ä–∂–¥', '–∞—ç—Ä–æ—Ñ–ª–æ—Ç', '–ø–æ–±–µ–¥–∞',
        's7', 'utair', '–æ—Ç–µ–ª—å', '–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞', '—Ö–æ—Å—Ç–µ–ª', 'booking', 'airbnb',
        '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '–æ—Ç–ø—É—Å–∫', '—Ç—É—Ä–∏–∑–º', '—ç–∫—Å–∫—É—Ä—Å–∏—è', '–≥–∏–¥', '–≤–∏–∑–∞', '–ø–∞—Å–ø–æ—Ä—Ç'
    ],
    '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∏': [
        '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '–º–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–º—Ç—Å', '–±–∏–ª–∞–π–Ω', '–º–µ–≥–∞—Ñ–æ–Ω', '—Ç–µ–ª–µ2',
        '—Ä–æ—Å—Ç–µ–ª–µ–∫–æ–º', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '–≥–∞–∑', '–≤–æ–¥–∞', '–æ—Ç–æ–ø–ª–µ–Ω–∏–µ', 'netflix', 'spotify',
        'youtube', '–ø–æ–¥–ø–∏—Å–∫–∞', 'apple', 'google', '—è–Ω–¥–µ–∫—Å –ø–ª—é—Å', '–∫–∏–Ω–æ–ø–æ–∏—Å–∫', '–∏–≤–∏',
        '–æ–∫–∫–æ', '–∞–º–µ–¥–∏–∞—Ç–µ–∫–∞', 'xbox', 'playstation', 'steam', '–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ'
    ]
}


# ============================================
# –ú–û–î–ï–õ–ò –î–õ–Ø –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –ü–†–û–ì–†–ê–ú–ú–´ TELEGRAM STARS
# ============================================

class AffiliateProgram(models.Model):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã Telegram Stars"""
    commission_permille = models.IntegerField(
        verbose_name='–ö–æ–º–∏—Å—Å–∏—è –≤ –ø—Ä–æ–º–∏–ª–ª–µ',
        help_text='100 = 10%, 200 = 20%, –º–∞–∫—Å–∏–º—É–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è Telegram'
    )
    duration_months = models.IntegerField(
        null=True, 
        blank=True,
        verbose_name='–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (–º–µ—Å—è—Ü—ã)',
        help_text='–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã'
    )
    start_date = models.DateTimeField(
        auto_now_add=True,
        verbose_name='–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞'
    )
    end_date = models.DateTimeField(
        null=True, 
        blank=True,
        verbose_name='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è',
        help_text='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–∑ duration_months'
    )
    is_active = models.BooleanField(
        default=True,
        verbose_name='–ê–∫—Ç–∏–≤–Ω–∞'
    )
    telegram_program_id = models.CharField(
        max_length=255, 
        unique=True, 
        null=True, 
        blank=True,
        verbose_name='ID –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ Telegram'
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'affiliate_program'
        verbose_name = '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'
        verbose_name_plural = '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã'
        ordering = ['-created_at']
    
    def __str__(self):
        return f"Affiliate Program ({int(self.commission_permille/10)}%)"
    
    def get_commission_percent(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        return int(self.commission_permille / 10)
    
    def calculate_commission(self, amount):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é –æ—Ç —Å—É–º–º—ã"""
        return int(amount * self.commission_permille / 1000)


class AffiliateLink(models.Model):
    """–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è Telegram Stars"""
    profile = models.OneToOneField(
        Profile, 
        on_delete=models.CASCADE,
        related_name='affiliate_link',
        verbose_name='–ü—Ä–æ—Ñ–∏–ª—å'
    )
    affiliate_code = models.CharField(
        max_length=100, 
        unique=True, 
        db_index=True,
        verbose_name='–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥'
    )
    telegram_link = models.URLField(
        verbose_name='–°—Å—ã–ª–∫–∞ Telegram',
        help_text='–ü–æ–ª–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ t.me/bot?start=ref_CODE'
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    clicks = models.IntegerField(
        default=0,
        verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤'
    )
    conversions = models.IntegerField(
        default=0,
        verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–π'
    )
    total_earned = models.IntegerField(
        default=0,
        verbose_name='–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–≤—ë–∑–¥'
    )
    
    # –°—Ç–∞—Ç—É—Å
    is_active = models.BooleanField(
        default=True,
        verbose_name='–ê–∫—Ç–∏–≤–Ω–∞'
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'affiliate_links'
        verbose_name = '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞'
        verbose_name_plural = '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏'
    
    def __str__(self):
        return f"{self.profile} - {self.affiliate_code}"
    
    def get_conversion_rate(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        if self.clicks == 0:
            return 0
        return round((self.conversions / self.clicks) * 100, 2)


class AffiliateReferral(models.Model):
    """–°–≤—è–∑—å –º–µ–∂–¥—É —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤ –∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    referrer = models.ForeignKey(
        Profile,
        on_delete=models.CASCADE,
        related_name='referred_users',
        verbose_name='–†–µ—Ñ–µ—Ä–µ—Ä'
    )
    referred = models.OneToOneField(
        Profile,
        on_delete=models.CASCADE,
        related_name='referred_by',
        verbose_name='–ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    )
    affiliate_link = models.ForeignKey(
        AffiliateLink,
        on_delete=models.CASCADE,
        related_name='referrals',
        verbose_name='–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞'
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    joined_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name='–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
    )
    first_payment_at = models.DateTimeField(
        null=True,
        blank=True,
        verbose_name='–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞'
    )
    total_payments = models.IntegerField(
        default=0,
        verbose_name='–í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π'
    )
    total_spent = models.IntegerField(
        default=0,
        verbose_name='–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–≤—ë–∑–¥'
    )
    
    class Meta:
        db_table = 'affiliate_referrals'
        verbose_name = '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å'
        verbose_name_plural = '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏'
        unique_together = ['referred']  # –û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≥–ª–∞—à—ë–Ω —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —Ä–µ—Ñ–µ–æ—Ä–µ—Ä–æ–º
    
    def __str__(self):
        return f"{self.referrer} ‚Üí {self.referred}"


class AffiliateCommission(models.Model):
    """–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∫–æ–º–∏—Å—Å–∏–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
    COMMISSION_STATUS = [
        ('pending', '–û–∂–∏–¥–∞–µ—Ç'),
        ('hold', '–ù–∞ —Ö–æ–ª–¥–µ'),  # 21-–¥–Ω–µ–≤–Ω—ã–π —Ö–æ–ª–¥ Telegram
        ('paid', '–í—ã–ø–ª–∞—á–µ–Ω–æ'),
        ('cancelled', '–û—Ç–º–µ–Ω–µ–Ω–æ'),
        ('refunded', '–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ')
    ]
    
    referrer = models.ForeignKey(
        Profile, 
        on_delete=models.CASCADE, 
        related_name='commissions_earned',
        verbose_name='–†–µ—Ñ–µ—Ä–µ—Ä'
    )
    referred = models.ForeignKey(
        Profile, 
        on_delete=models.CASCADE, 
        related_name='commissions_generated',
        verbose_name='–ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π'
    )
    subscription = models.ForeignKey(
        Subscription, 
        on_delete=models.CASCADE,
        related_name='affiliate_commissions',
        verbose_name='–ü–æ–¥–ø–∏—Å–∫–∞'
    )
    referral = models.ForeignKey(
        AffiliateReferral,
        on_delete=models.CASCADE,
        related_name='commissions',
        verbose_name='–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å'
    )
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    payment_amount = models.IntegerField(
        verbose_name='–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ (–∑–≤—ë–∑–¥—ã)'
    )
    commission_amount = models.IntegerField(
        verbose_name='–°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–∏ (–∑–≤—ë–∑–¥—ã)'
    )
    commission_rate = models.IntegerField(
        verbose_name='–°—Ç–∞–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ (–ø—Ä–æ–º–∏–ª–ª–µ)'
    )
    
    # Telegram –¥–∞–Ω–Ω—ã–µ
    telegram_transaction_id = models.CharField(
        max_length=255, 
        unique=True, 
        null=True,
        blank=True,
        verbose_name='ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Telegram'
    )
    telegram_payment_id = models.CharField(
        max_length=255,
        null=True,
        blank=True,
        verbose_name='ID –ø–ª–∞—Ç–µ–∂–∞ –≤ Telegram'
    )
    
    # –°—Ç–∞—Ç—É—Å
    status = models.CharField(
        max_length=20, 
        choices=COMMISSION_STATUS,
        default='pending',
        verbose_name='–°—Ç–∞—Ç—É—Å'
    )
    
    # –î–∞—Ç—ã
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
    )
    hold_until = models.DateTimeField(
        null=True,
        blank=True,
        verbose_name='–•–æ–ª–¥ –¥–æ',
        help_text='21 –¥–µ–Ω—å —Å –º–æ–º–µ–Ω—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞'
    )
    paid_at = models.DateTimeField(
        null=True, 
        blank=True,
        verbose_name='–î–∞—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã'
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    notes = models.TextField(
        blank=True,
        verbose_name='–ü—Ä–∏–º–µ—á–∞–Ω–∏—è'
    )
    
    class Meta:
        db_table = 'affiliate_commissions'
        verbose_name = '–ö–æ–º–∏—Å—Å–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞'
        verbose_name_plural = '–ö–æ–º–∏—Å—Å–∏–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤'
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['referrer', 'status']),
            models.Index(fields=['telegram_transaction_id']),
            models.Index(fields=['telegram_payment_id']),  # –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –ø–ª–∞—Ç–µ–∂—É
            models.Index(fields=['created_at']),
        ]
        constraints = [
            models.UniqueConstraint(
                fields=['telegram_payment_id'], 
                name='unique_telegram_payment_id',
                condition=models.Q(telegram_payment_id__isnull=False)
            )
        ]
    
    def __str__(self):
        return f"{self.referrer} - {self.commission_amount} stars ({self.get_status_display()})"
    
    def get_commission_percent(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏"""
        return int(self.commission_rate / 10)  # –ø—Ä–æ–º–∏–ª–ª–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    
    def calculate_hold_date(self):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ö–æ–ª–¥–∞ (21 –¥–µ–Ω—å)"""
        from datetime import timedelta
        return self.created_at + timedelta(days=21)
