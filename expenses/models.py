"""
–ú–æ–¥–µ–ª–∏ ExpenseBot —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é
"""
from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator
from django.utils import timezone
from datetime import date, datetime
from decimal import Decimal


class Profile(models.Model):
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    telegram_id = models.BigIntegerField(unique=True, db_index=True)
    username = models.CharField(max_length=255, null=True, blank=True)
    first_name = models.CharField(max_length=255, null=True, blank=True)
    last_name = models.CharField(max_length=255, null=True, blank=True)
    
    # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    language_code = models.CharField(
        max_length=2, 
        default='ru', 
        choices=[('ru', '–†—É—Å—Å–∫–∏–π'), ('en', 'English')]
    )
    timezone = models.CharField(max_length=50, default='UTC')
    currency = models.CharField(max_length=3, default='RUB')
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'users_profile'
        verbose_name = '–ü—Ä–æ—Ñ–∏–ª—å'
        verbose_name_plural = '–ü—Ä–æ—Ñ–∏–ª–∏'
        indexes = [
            models.Index(fields=['telegram_id']),
        ]
    
    def __str__(self):
        return f"{self.first_name} (@{self.username or 'no_username'})"


class UserSettings(models.Model):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    profile = models.OneToOneField(Profile, on_delete=models.CASCADE, related_name='settings')
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    daily_reminder_enabled = models.BooleanField(default=True)
    daily_reminder_time = models.TimeField(default='20:00')
    weekly_summary_enabled = models.BooleanField(default=True)
    monthly_summary_enabled = models.BooleanField(default=True)
    budget_alerts_enabled = models.BooleanField(default=True)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'users_settings'
        verbose_name = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'
        verbose_name_plural = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'


class ExpenseCategory(models.Model):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='categories')
    name = models.CharField(max_length=100)
    icon = models.CharField(max_length=10, default='üí∞')
    
    # –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'expenses_category'
        verbose_name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'
        unique_together = ['profile', 'name']
        indexes = [
            models.Index(fields=['profile', 'name']),
        ]
        
    def __str__(self):
        return f"{self.icon} {self.name}"


class Expense(models.Model):
    """–¢—Ä–∞—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='expenses')
    category = models.ForeignKey(
        ExpenseCategory, 
        on_delete=models.SET_NULL, 
        null=True,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å NULL –¥–ª—è –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        blank=True,
        related_name='expenses'
    )
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    amount = models.DecimalField(max_digits=12, decimal_places=2, validators=[MinValueValidator(0.01)])
    currency = models.CharField(max_length=3, default='RUB')  # –í–∞–ª—é—Ç–∞ —Ç—Ä–∞—Ç—ã
    description = models.TextField(blank=True)
    
    # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ –¢–ó)
    expense_date = models.DateField(default=date.today)
    expense_time = models.TimeField(default=datetime.now)
    
    # –í–ª–æ–∂–µ–Ω–∏—è
    receipt_photo = models.CharField(max_length=255, blank=True)
    
    # AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
    ai_categorized = models.BooleanField(default=False)  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ AI
    ai_confidence = models.DecimalField(
        max_digits=3, 
        decimal_places=2, 
        null=True, 
        blank=True,
        validators=[MinValueValidator(0), MaxValueValidator(1)]
    )  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'expenses_expense'
        verbose_name = '–¢—Ä–∞—Ç–∞'
        verbose_name_plural = '–¢—Ä–∞—Ç—ã'
        ordering = ['-expense_date', '-expense_time']
        indexes = [
            models.Index(fields=['profile', '-expense_date']),
            models.Index(fields=['profile', 'category', '-expense_date']),
        ]
    
    def __str__(self):
        return f"{self.amount} {self.profile.currency} - {self.description[:30]}"


class Budget(models.Model):
    """–ë—é–¥–∂–µ—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='budgets')
    category = models.ForeignKey(ExpenseCategory, on_delete=models.CASCADE, null=True, blank=True)
    
    amount = models.DecimalField(max_digits=12, decimal_places=2)
    period_type = models.CharField(
        max_length=20,
        choices=[
            ('monthly', '–ú–µ—Å—è—á–Ω—ã–π'),
            ('weekly', '–ù–µ–¥–µ–ª—å–Ω—ã–π'),
            ('daily', '–î–Ω–µ–≤–Ω–æ–π')
        ]
    )
    start_date = models.DateField()
    end_date = models.DateField(null=True, blank=True)
    
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'expenses_budget'
        verbose_name = '–ë—é–¥–∂–µ—Ç'
        verbose_name_plural = '–ë—é–¥–∂–µ—Ç—ã'


class Cashback(models.Model):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–±—ç–∫–∞—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='cashbacks')
    category = models.ForeignKey(ExpenseCategory, on_delete=models.CASCADE)
    bank_name = models.CharField(max_length=100, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞')
    cashback_percent = models.DecimalField(
        max_digits=4, 
        decimal_places=2, 
        verbose_name='–ü—Ä–æ—Ü–µ–Ω—Ç –∫–µ—à–±—ç–∫–∞',
        validators=[MinValueValidator(0), MaxValueValidator(99)]
    )
    month = models.IntegerField(
        choices=[(i, i) for i in range(1, 13)], 
        verbose_name='–ú–µ—Å—è—Ü'
    )
    limit_amount = models.DecimalField(
        max_digits=12, 
        decimal_places=2, 
        null=True, 
        blank=True, 
        verbose_name='–õ–∏–º–∏—Ç'
    )
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'expenses_cashback'
        verbose_name = '–ö–µ—à–±—ç–∫'
        verbose_name_plural = '–ö–µ—à–±—ç–∫–∏'
        unique_together = ['profile', 'category', 'bank_name', 'month']
        indexes = [
            models.Index(fields=['profile', 'month']),
            models.Index(fields=['profile', 'category']),
        ]
    
    def __str__(self):
        return f"{self.bank_name} - {self.category.name} - {self.cashback_percent}%"


# –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
DEFAULT_CATEGORIES = [
    ('–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ã', 'üõí'),
    ('–î—Ä—É–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã', 'ü´ë'),
    ('–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ', 'üçΩÔ∏è'),
    ('–ê–ó–°', '‚õΩ'),
    ('–¢–∞–∫—Å–∏', 'üöï'),
    ('–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'üöå'),
    ('–ê–≤—Ç–æ–º–æ–±–∏–ª—å', 'üöó'),
    ('–ñ–∏–ª—å–µ', 'üè†'),
    ('–ê–ø—Ç–µ–∫–∏', 'üíä'),
    ('–ú–µ–¥–∏—Ü–∏–Ω–∞', 'üè•'),
    ('–°–ø–æ—Ä—Ç', 'üèÉ'),
    ('–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã', 'üèÄ'),
    ('–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å', 'üëî'),
    ('–¶–≤–µ—Ç—ã', 'üåπ'),
    ('–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'üé≠'),
    ('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'üìö'),
    ('–ü–æ–¥–∞—Ä–∫–∏', 'üéÅ'),
    ('–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '‚úàÔ∏è'),
    ('–°–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç', 'üì±'),
    ('–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', 'üí∞')
]