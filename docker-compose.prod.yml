version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: expense_bot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - expense_bot_network

  db:
    image: postgres:15-alpine
    container_name: expense_bot_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME:-expense_bot}
      - POSTGRES_USER=${DB_USER:-expense_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-expense_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - expense_bot_network

  redis:
    image: redis:7-alpine
    container_name: expense_bot_redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - expense_bot_network

  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: expense_bot_app
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DJANGO_SETTINGS_MODULE=expense_bot.settings
    volumes:
      - ./logs:/app/logs
      - media_volume:/app/media
      - static_volume:/app/staticfiles
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: python run_bot.py
    networks:
      - expense_bot_network

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: expense_bot_celery
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DJANGO_SETTINGS_MODULE=expense_bot.settings
    volumes:
      - ./logs:/app/logs
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: celery -A expense_bot worker --loglevel=info --concurrency=2 -Q default,reports,recurring,maintenance,notifications
    networks:
      - expense_bot_network

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: expense_bot_celery_beat
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DJANGO_SETTINGS_MODULE=expense_bot.settings
    volumes:
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: celery -A expense_bot beat --loglevel=info
    networks:
      - expense_bot_network

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: expense_bot_web
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DJANGO_SETTINGS_MODULE=expense_bot.settings
    volumes:
      - ./logs:/app/logs
      - media_volume:/app/media
      - static_volume:/app/staticfiles
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: gunicorn expense_bot.wsgi:application --bind 0.0.0.0:8000 --workers 2 --timeout 120
    expose:
      - "8000"
    networks:
      - expense_bot_network

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  expense_bot_network:
    driver: bridge
