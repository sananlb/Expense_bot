from django.db import models
from django.contrib.postgres.fields import ArrayField
from django.core.validators import MinValueValidator, MaxValueValidator
from django.utils import timezone
from django.db.models import Sum, Count, Avg, Q, F
from datetime import datetime, timedelta
from decimal import Decimal
import uuid


class Profile(models.Model):
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
    telegram_id = models.BigIntegerField(unique=True, primary_key=True)
    first_name = models.CharField(max_length=100)
    username = models.CharField(max_length=100, null=True, blank=True)
    
    # –ü–æ–¥–ø–∏—Å–∫–∞ –∏ –¥–æ—Å—Ç—É–ø
    subscription_end_date = models.DateTimeField(null=True, blank=True)
    trial_end_date = models.DateTimeField(null=True, blank=True)
    is_beta_tester = models.BooleanField(default=False)
    
    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    referrer = models.ForeignKey('self', on_delete=models.SET_NULL, null=True, blank=True, related_name='referrals')
    referral_code = models.CharField(max_length=20, unique=True, null=True, blank=True)
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    last_activity = models.DateTimeField(auto_now=True)
    is_active = models.BooleanField(default=True)
    
    # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
    locale = models.CharField(max_length=10, default='ru')
    
    # –°–æ–≥–ª–∞—Å–∏—è
    accepted_privacy = models.BooleanField(default=False)
    accepted_offer = models.BooleanField(default=False)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        db_table = 'profiles'
        verbose_name = '–ü—Ä–æ—Ñ–∏–ª—å'
        verbose_name_plural = '–ü—Ä–æ—Ñ–∏–ª–∏'
        indexes = [
            models.Index(fields=['referral_code']),
            models.Index(fields=['last_activity']),
        ]
    
    def __str__(self):
        return f"{self.first_name} (@{self.username or 'no_username'})"
    
    @property
    def has_active_subscription(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        if self.subscription_end_date:
            return self.subscription_end_date > timezone.now()
        return False
    
    @property
    def is_in_trial(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        if self.trial_end_date:
            return self.trial_end_date > timezone.now()
        return False
    
    @property
    def can_use_bot(self):
        """–ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞"""
        return self.is_beta_tester or self.has_active_subscription or self.is_in_trial
    
    def save(self, *args, **kwargs):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏"""
        if not self.referral_code:
            self.referral_code = f"EXP{self.telegram_id}"[:20]
        super().save(*args, **kwargs)


class UserSettings(models.Model):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = models.OneToOneField(Profile, on_delete=models.CASCADE, related_name='settings')
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞
    currency = models.CharField(max_length=3, default='RUB')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    daily_report_enabled = models.BooleanField(default=True)
    daily_report_time = models.TimeField(default='21:00')
    weekly_report_enabled = models.BooleanField(default=True)
    monthly_report_enabled = models.BooleanField(default=True)
    expense_reminders_enabled = models.BooleanField(default=False)
    
    # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    timezone = models.CharField(max_length=50, default='Europe/Moscow')
    
    # –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    language = models.CharField(max_length=2, default='ru')
    
    # –ë—é–¥–∂–µ—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    monthly_budget = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
    weekly_budget = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
    daily_budget = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    show_category_icons = models.BooleanField(default=True)
    compact_mode = models.BooleanField(default=False)
    
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'user_settings'
        verbose_name = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        verbose_name_plural = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    
    def __str__(self):
        return f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ {self.profile}"


class ExpenseCategory(models.Model):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    ICON_CHOICES = [
        ('üçî', '–ï–¥–∞'),
        ('üöå', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç'),
        ('üè†', '–ñ–∏–ª—å–µ'),
        ('üéÆ', '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'),
        ('üëï', '–û–¥–µ–∂–¥–∞'),
        ('üíä', '–ó–¥–æ—Ä–æ–≤—å–µ'),
        ('üìö', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'),
        ('üéÅ', '–ü–æ–¥–∞—Ä–∫–∏'),
        ('üí∞', '–î—Ä—É–≥–æ–µ'),
    ]
    
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='categories')
    name = models.CharField(max_length=50)
    icon = models.CharField(max_length=2, choices=ICON_CHOICES, default='üí∞')
    color = models.CharField(max_length=7, default='#808080')  # HEX color
    
    # –î–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    is_system = models.BooleanField(default=False)
    
    # –ë—é–¥–∂–µ—Ç –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    monthly_budget = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
    
    # –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_order = models.IntegerField(default=0)
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    is_active = models.BooleanField(default=True)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'expense_categories'
        verbose_name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤'
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤'
        ordering = ['display_order', 'name']
        unique_together = [['profile', 'name']]
        indexes = [
            models.Index(fields=['profile', 'is_active']),
        ]
    
    def __str__(self):
        return f"{self.icon} {self.name}"
    
    def get_current_month_spent(self):
        """–†–∞—Å—Ö–æ–¥—ã –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        now = timezone.now()
        return self.expenses.filter(
            date__year=now.year,
            date__month=now.month,
            is_deleted=False
        ).aggregate(total=Sum('amount'))['total'] or Decimal('0')


class Expense(models.Model):
    """–ó–∞–ø–∏—Å–∏ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"""
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='expenses')
    category = models.ForeignKey(ExpenseCategory, on_delete=models.SET_NULL, null=True, related_name='expenses')
    
    amount = models.DecimalField(max_digits=12, decimal_places=2, validators=[MinValueValidator(Decimal('0.01'))])
    currency = models.CharField(max_length=3, default='RUB')
    
    description = models.CharField(max_length=255, blank=True)
    
    # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–∞—Å—Ö–æ–¥–∞
    date = models.DateField(db_index=True)
    time = models.TimeField(null=True, blank=True)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    location = models.CharField(max_length=255, null=True, blank=True)
    tags = ArrayField(models.CharField(max_length=50), blank=True, default=list)
    
    # –î–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    is_recurring = models.BooleanField(default=False)
    recurring_id = models.UUIDField(null=True, blank=True)
    
    # –í–ª–æ–∂–µ–Ω–∏—è
    photo_url = models.URLField(null=True, blank=True)
    receipt_data = models.JSONField(null=True, blank=True)  # –î–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —á–µ–∫–æ–≤
    
    # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    is_deleted = models.BooleanField(default=False)
    deleted_at = models.DateTimeField(null=True, blank=True)
    
    # AI –æ–±—Ä–∞–±–æ—Ç–∫–∞
    ai_processed = models.BooleanField(default=False)
    ai_category_suggestion = models.ForeignKey(ExpenseCategory, on_delete=models.SET_NULL, null=True, blank=True, related_name='ai_suggestions')
    ai_confidence = models.FloatField(null=True, blank=True, validators=[MinValueValidator(0), MaxValueValidator(1)])
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'expenses'
        verbose_name = '–†–∞—Å—Ö–æ–¥'
        verbose_name_plural = '–†–∞—Å—Ö–æ–¥—ã'
        ordering = ['-date', '-time']
        indexes = [
            models.Index(fields=['profile', '-date']),
            models.Index(fields=['profile', 'category', '-date']),
            models.Index(fields=['profile', '-date'], condition=Q(is_deleted=False)),
            models.Index(fields=['recurring_id'], condition=Q(is_recurring=True)),
        ]
    
    def __str__(self):
        return f"{self.amount} {self.currency} - {self.description[:30]}"
    
    def save(self, *args, **kwargs):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∞–ª—é—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.currency and hasattr(self.profile, 'settings'):
            self.currency = self.profile.settings.currency
        super().save(*args, **kwargs)
    
    def soft_delete(self):
        """–ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ"""
        self.is_deleted = True
        self.deleted_at = timezone.now()
        self.save()


class Budget(models.Model):
    """–ë—é–¥–∂–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    PERIOD_CHOICES = [
        ('daily', '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π'),
        ('weekly', '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π'),
        ('monthly', '–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π'),
        ('yearly', '–ì–æ–¥–æ–≤–æ–π'),
        ('custom', '–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π'),
    ]
    
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='budgets')
    name = models.CharField(max_length=100)
    
    period_type = models.CharField(max_length=10, choices=PERIOD_CHOICES)
    start_date = models.DateField()
    end_date = models.DateField(null=True, blank=True)  # –î–ª—è custom –ø–µ—Ä–∏–æ–¥–æ–≤
    
    amount = models.DecimalField(max_digits=12, decimal_places=2, validators=[MinValueValidator(Decimal('0.01'))])
    currency = models.CharField(max_length=3, default='RUB')
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—é–¥–∂–µ—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã - –æ–±—â–∏–π –±—é–¥–∂–µ—Ç)
    categories = models.ManyToManyField(ExpenseCategory, blank=True, related_name='budgets')
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notify_on_exceed = models.BooleanField(default=True)
    notify_on_approach = models.BooleanField(default=True)
    approach_threshold = models.IntegerField(default=80, validators=[MinValueValidator(50), MaxValueValidator(95)])
    
    is_active = models.BooleanField(default=True)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'budgets'
        verbose_name = '–ë—é–¥–∂–µ—Ç'
        verbose_name_plural = '–ë—é–¥–∂–µ—Ç—ã'
        indexes = [
            models.Index(fields=['profile', 'is_active']),
            models.Index(fields=['start_date', 'end_date']),
        ]
    
    def __str__(self):
        return f"{self.name} - {self.amount} {self.currency}"
    
    def get_spent_amount(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É –∑–∞ –ø–µ—Ä–∏–æ–¥ –±—é–¥–∂–µ—Ç–∞"""
        expenses_query = Expense.objects.filter(
            profile=self.profile,
            date__gte=self.start_date,
            is_deleted=False
        )
        
        if self.end_date:
            expenses_query = expenses_query.filter(date__lte=self.end_date)
        
        if self.categories.exists():
            expenses_query = expenses_query.filter(category__in=self.categories.all())
        
        return expenses_query.aggregate(total=Sum('amount'))['total'] or Decimal('0')
    
    @property
    def spent_percentage(self):
        """–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞"""
        spent = self.get_spent_amount()
        if self.amount > 0:
            return min(100, int((spent / self.amount) * 100))
        return 0


class RecurringExpense(models.Model):
    """–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"""
    FREQUENCY_CHOICES = [
        ('daily', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'),
        ('weekly', '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'),
        ('monthly', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ'),
        ('yearly', '–ï–∂–µ–≥–æ–¥–Ω–æ'),
    ]
    
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='recurring_expenses')
    category = models.ForeignKey(ExpenseCategory, on_delete=models.SET_NULL, null=True)
    
    name = models.CharField(max_length=100)
    amount = models.DecimalField(max_digits=12, decimal_places=2)
    currency = models.CharField(max_length=3, default='RUB')
    
    frequency = models.CharField(max_length=10, choices=FREQUENCY_CHOICES)
    day_of_execution = models.IntegerField(null=True, blank=True)  # –î–µ–Ω—å –º–µ—Å—è—Ü–∞/–Ω–µ–¥–µ–ª–∏
    
    next_date = models.DateField()
    last_created_date = models.DateField(null=True, blank=True)
    
    is_active = models.BooleanField(default=True)
    
    # UUID –¥–ª—è —Å–≤—è–∑–∏ —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏
    recurring_id = models.UUIDField(default=uuid.uuid4, unique=True)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'recurring_expenses'
        verbose_name = '–†–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–∞—Å—Ö–æ–¥'
        verbose_name_plural = '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã'
        indexes = [
            models.Index(fields=['profile', 'is_active']),
            models.Index(fields=['next_date']),
        ]
    
    def __str__(self):
        return f"{self.name} - {self.amount} {self.currency} ({self.get_frequency_display()})"


class ExpenseStats(models.Model):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = models.OneToOneField(Profile, on_delete=models.CASCADE, related_name='expense_stats', primary_key=True)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_expenses_count = models.IntegerField(default=0)
    total_expenses_sum = models.DecimalField(max_digits=15, decimal_places=2, default=Decimal('0'))
    
    # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    avg_daily_expense = models.DecimalField(max_digits=12, decimal_places=2, default=Decimal('0'))
    avg_weekly_expense = models.DecimalField(max_digits=12, decimal_places=2, default=Decimal('0'))
    avg_monthly_expense = models.DecimalField(max_digits=12, decimal_places=2, default=Decimal('0'))
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    last_expense_date = models.DateField(null=True, blank=True)
    stats_updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'expense_stats'
        verbose_name = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤'
        verbose_name_plural = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤'
    
    def __str__(self):
        return f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {self.profile}"
    
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        from django.db.models import Avg
        from datetime import timedelta
        
        expenses = self.profile.expenses.filter(is_deleted=False)
        
        self.total_expenses_count = expenses.count()
        self.total_expenses_sum = expenses.aggregate(total=Sum('amount'))['total'] or Decimal('0')
        
        if expenses.exists():
            self.last_expense_date = expenses.first().date
            
            # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            thirty_days_ago = timezone.now().date() - timedelta(days=30)
            recent_expenses = expenses.filter(date__gte=thirty_days_ago)
            
            if recent_expenses.exists():
                days_count = (timezone.now().date() - thirty_days_ago).days or 1
                total_recent = recent_expenses.aggregate(total=Sum('amount'))['total'] or Decimal('0')
                
                self.avg_daily_expense = total_recent / days_count
                self.avg_weekly_expense = self.avg_daily_expense * 7
                self.avg_monthly_expense = self.avg_daily_expense * 30
        
        self.save()


class ExportHistory(models.Model):
    """–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='exports')
    
    file_name = models.CharField(max_length=255)
    file_url = models.URLField()
    file_size = models.IntegerField()  # –í –±–∞–π—Ç–∞—Ö
    
    period_start = models.DateField()
    period_end = models.DateField()
    
    categories_included = models.ManyToManyField(ExpenseCategory, blank=True)
    total_expenses = models.IntegerField()
    total_amount = models.DecimalField(max_digits=15, decimal_places=2)
    
    export_format = models.CharField(max_length=10, default='xlsx')
    
    created_at = models.DateTimeField(auto_now_add=True)
    expires_at = models.DateTimeField()
    
    class Meta:
        db_table = 'export_history'
        verbose_name = '–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞'
        verbose_name_plural = '–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤'
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['profile', '-created_at']),
            models.Index(fields=['expires_at']),
        ]
    
    def __str__(self):
        return f"–≠–∫—Å–ø–æ—Ä—Ç {self.profile} –æ—Ç {self.created_at.strftime('%d.%m.%Y')}"