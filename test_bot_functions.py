"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
"""
import os
import sys
import django
import asyncio
from datetime import date, datetime
from decimal import Decimal
import codecs

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
django.setup()

# –ò–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django
from bot.utils.expense_parser import parse_expense_message
from bot.services.user import get_or_create_user, create_default_categories
from bot.services.category import get_or_create_category, get_user_categories
from bot.services.expense import add_expense, get_today_summary, get_month_summary
from expenses.models import Profile, ExpenseCategory, Expense


async def test_parser():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    print("\n=== –¢–ï–°–¢ –ü–ê–†–°–ï–†–ê ===")
    test_messages = [
        "–ö–æ—Ñ–µ 200",
        "–¢–∞–∫—Å–∏ –¥–æ–º–æ–π 450 —Ä—É–±",
        "–ü–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã 1500",
        "–î–∏–∑–µ–ª—å 4095 –ê–ó–°",
        "–û–±–µ–¥ –≤ –∫–∞—Ñ–µ 650 —Ä—É–±–ª–µ–π",
        "–ö—É–ø–∏–ª –ø–æ–¥–∞—Ä–æ–∫ –∂–µ–Ω–µ 3000",
        "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç 800",
        "–ü—Ä–æ–µ–∑–¥–Ω–æ–π –Ω–∞ –º–µ—Ç—Ä–æ 2800"
    ]
    
    for msg in test_messages:
        result = await parse_expense_message(msg, use_ai=False)
        if result:
            print(f"‚úÖ '{msg}' -> –°—É–º–º–∞: {result['amount']}‚ÇΩ, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result['category']}, –û–ø–∏—Å–∞–Ω–∏–µ: {result['description']}")
        else:
            print(f"‚ùå '{msg}' -> –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")


async def test_user_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\n=== –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_or_create_user(
        telegram_id=123456789,
        username="test_user",
        first_name="Test",
        last_name="User"
    )
    
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.first_name} {user.last_name} (@{user.username})")
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await create_default_categories(user.telegram_id)
    print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
    
    return user


async def test_categories(user_id: int):
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    print("\n=== –¢–ï–°–¢ –ö–ê–¢–ï–ì–û–†–ò–ô ===")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    categories = await get_user_categories(user_id)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
    
    for cat in categories[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        print(f"   {cat.icon} {cat.name}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    new_cat = await get_or_create_category(user_id, "–ë–µ–Ω–∑–∏–Ω")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞/–Ω–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {new_cat.icon} {new_cat.name}")
    
    return categories


async def test_expenses(user_id: int):
    """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    print("\n=== –¢–ï–°–¢ –†–ê–°–•–û–î–û–í ===")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥–æ–≤
    test_expenses = [
        ("–ö–æ—Ñ–µ —É—Ç—Ä–æ–º", 200, "–ö–∞—Ñ–µ"),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
        ("–û–±–µ–¥ –≤ —Å—Ç–æ–ª–æ–≤–æ–π", 350, "–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã"),  # –¢–æ—á–Ω–æ–µ –∏–º—è
        ("–ü—Ä–æ–µ–∑–¥ –Ω–∞ –º–µ—Ç—Ä–æ", 60, "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),
        ("–ü—Ä–æ–¥—É–∫—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ", 1200, "–ü—Ä–æ–¥—É–∫—Ç—ã"),
        ("–ë–µ–Ω–∑–∏–Ω", 2000, "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    ]
    
    for desc, amount, cat_name in test_expenses:
        category = await get_or_create_category(user_id, cat_name)
        expense = await add_expense(
            user_id=user_id,
            category_id=category.id,
            amount=amount,
            description=desc
        )
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥: {expense.description} - {expense.amount}‚ÇΩ ({category.name})")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today_summary = await get_today_summary(user_id)
    print(f"\nüìä –°–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:")
    print(f"   –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {today_summary['total']}‚ÇΩ")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ç: {today_summary['count']}")
    
    if today_summary['categories']:
        print("   –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for cat in today_summary['categories']:
            percent = (cat['amount'] / today_summary['total']) * 100
            print(f"   {cat['icon']} {cat['name']}: {cat['amount']}‚ÇΩ ({percent:.1f}%)")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø EXPENSEBOT")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞
        await test_parser()
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await test_user_creation()
        
        # –¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await test_categories(user.telegram_id)
        
        # –¢–µ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤
        await test_expenses(user.telegram_id)
        
        print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())