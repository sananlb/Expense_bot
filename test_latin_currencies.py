#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ª–∞—Ç–∏–Ω–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö –≤–∞–ª—é—Ç
"""
import asyncio
import sys
import os
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(__file__))

from bot.services.currency_conversion import CurrencyConverter

async def test_latin_currencies():
    """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ª–∞—Ç–∏–Ω–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö –≤–∞–ª—é—Ç"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ª–∞—Ç–∏–Ω–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö –≤–∞–ª—é—Ç")
    print("=" * 60)
    
    converter = CurrencyConverter()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
    test_currencies = ['ARS', 'COP', 'PEN', 'CLP', 'MXN']
    test_amount = Decimal('100')
    
    print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç...")
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ —á–µ—Ä–µ–∑ Fawaz API
    print("\n1. –¢–µ—Å—Ç Fawaz API:")
    fawaz_rates = await converter.fetch_fawaz_rates('rub')
    
    if fawaz_rates:
        print("‚úÖ Fawaz API –¥–æ—Å—Ç—É–ø–µ–Ω")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ –∫—É—Ä—Å–æ–≤: {len(fawaz_rates)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞—Ç–∏–Ω–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –≤–∞–ª—é—Ç—ã
        latin_found = 0
        for currency in test_currencies:
            if currency in fawaz_rates:
                rate = fawaz_rates[currency]['unit_rate']
                print(f"   {currency}: {rate} ‚ÇΩ")
                latin_found += 1
            else:
                print(f"   ‚ùå {currency}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ –ª–∞—Ç–∏–Ω–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö –≤–∞–ª—é—Ç: {latin_found}/{len(test_currencies)}")
    else:
        print("‚ùå Fawaz API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –¢–µ—Å—Ç 2: –¢–µ—Å—Ç –æ–±—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ —Å fallback
    print("\n2. –¢–µ—Å—Ç –æ–±—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ —Å fallback:")
    general_rates = await converter.fetch_daily_rates()
    
    if general_rates:
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ –∫—É—Ä—Å–æ–≤: {len(general_rates)}")
        
        latin_found = 0
        for currency in test_currencies:
            if currency in general_rates:
                rate = general_rates[currency]['unit_rate']
                print(f"   {currency}: {rate} ‚ÇΩ")
                latin_found += 1
            else:
                print(f"   ‚ùå {currency}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ –ª–∞—Ç–∏–Ω–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö –≤–∞–ª—é—Ç: {latin_found}/{len(test_currencies)}")
    else:
        print("‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç 3: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç
    print("\n3. –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç:")
    print(f"   –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º {test_amount} –µ–¥–∏–Ω–∏—Ü –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã –≤ RUB...")
    
    for currency in test_currencies:
        try:
            converted = await converter.convert(test_amount, currency, 'RUB')
            if converted:
                print(f"   {test_amount} {currency} = {converted:.2f} ‚ÇΩ")
            else:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {currency}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {currency}: {e}")
    
    # –¢–µ—Å—Ç 4: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç
    print("\n4. –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç:")
    available = await converter.get_available_currencies()
    latin_currencies = [(code, name) for code, name in available if code in test_currencies]
    
    print(f"   –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç: {len(available)}")
    print("   –õ–∞—Ç–∏–Ω–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –≤–∞–ª—é—Ç—ã:")
    for code, name in latin_currencies:
        print(f"     {code}: {name}")
    
    # –¢–µ—Å—Ç 5: –ü—Ä—è–º–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É –ª–∞—Ç–∏–Ω–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–º–∏ –≤–∞–ª—é—Ç–∞–º–∏
    print("\n5. –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É –ª–∞—Ç–∏–Ω–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–º–∏ –≤–∞–ª—é—Ç–∞–º–∏:")
    try:
        # COP -> ARS
        cop_to_ars = await converter.convert(Decimal('1000'), 'COP', 'ARS')
        if cop_to_ars:
            print(f"   1000 COP = {cop_to_ars:.2f} ARS")
        
        # MXN -> PEN
        mxn_to_pen = await converter.convert(Decimal('100'), 'MXN', 'PEN')
        if mxn_to_pen:
            print(f"   100 MXN = {mxn_to_pen:.2f} PEN")
        
        # BRL -> CLP
        brl_to_clp = await converter.convert(Decimal('50'), 'BRL', 'CLP')
        if brl_to_clp:
            print(f"   50 BRL = {brl_to_clp:.2f} CLP")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –º–µ–∂–≤–∞–ª—é—Ç–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    await converter.cleanup()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_latin_currencies())