#!/usr/bin/env python
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–µ—à–±–µ–∫–∞
"""
import os
import sys
import django
import asyncio
from decimal import Decimal
from datetime import date, datetime
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.insert(0, os.path.dirname(os.path.abspath('.')))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
django.setup()

from expenses.models import Profile, ExpenseCategory, Expense, Cashback
from bot.services.cashback import calculate_potential_cashback


async def test_cashback_exclusion():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–µ—à–±–µ–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞—Ç—ã"""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    TEST_USER_ID = 123456789
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile, _ = await Profile.objects.aget_or_create(
            telegram_id=TEST_USER_ID,
            defaults={'currency': 'RUB'}
        )
        print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω/–ø–æ–ª—É—á–µ–Ω: {profile}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category, _ = await ExpenseCategory.objects.aget_or_create(
            profile=profile,
            name="–¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
            defaults={'icon': 'üß™'}
        )
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {category}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–µ—à–±–µ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        current_month = datetime.now().month
        cashback, _ = await Cashback.objects.aget_or_create(
            profile=profile,
            category=category,
            bank_name="–¢–µ—Å—Ç–æ–≤—ã–π –±–∞–Ω–∫",
            month=current_month,
            defaults={'cashback_percent': Decimal('5.0')}
        )
        print(f"‚úÖ –ö–µ—à–±–µ–∫ —Å–æ–∑–¥–∞–Ω: {cashback.cashback_percent}% –¥–ª—è {category.name}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ —Ç—Ä–∞—Ç—ã
        expense1 = await Expense.objects.acreate(
            profile=profile,
            category=category,
            amount=Decimal('1000'),
            description="–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞—Ç–∞ 1",
            expense_date=date.today(),
            cashback_excluded=False  # –° –∫–µ—à–±–µ–∫–æ–º
        )
        print(f"‚úÖ –¢—Ä–∞—Ç–∞ 1 —Å–æ–∑–¥–∞–Ω–∞: {expense1.amount} —Ä—É–± (–∫–µ—à–±–µ–∫ –≤–∫–ª—é—á–µ–Ω)")
        
        expense2 = await Expense.objects.acreate(
            profile=profile,
            category=category,
            amount=Decimal('2000'),
            description="–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞—Ç–∞ 2",
            expense_date=date.today(),
            cashback_excluded=True  # –ë–ï–ó –∫–µ—à–±–µ–∫–∞
        )
        print(f"‚úÖ –¢—Ä–∞—Ç–∞ 2 —Å–æ–∑–¥–∞–Ω–∞: {expense2.amount} —Ä—É–± (–∫–µ—à–±–µ–∫ –ò–°–ö–õ–Æ–ß–ï–ù)")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –∫–µ—à–±–µ–∫
        start_date = date.today().replace(day=1)
        end_date = date.today()
        
        total_cashback = await calculate_potential_cashback(
            user_id=TEST_USER_ID,
            start_date=start_date,
            end_date=end_date
        )
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:")
        print(f"   –¢—Ä–∞—Ç–∞ 1: {expense1.amount} —Ä—É–± √ó 5% = {expense1.amount * Decimal('0.05')} —Ä—É–± –∫–µ—à–±–µ–∫–∞")
        print(f"   –¢—Ä–∞—Ç–∞ 2: {expense2.amount} —Ä—É–± √ó 0% = 0 —Ä—É–± (–∏—Å–∫–ª—é—á–µ–Ω–∞)")
        print(f"   –ò—Ç–æ–≥–æ –∫–µ—à–±–µ–∫: {total_cashback} —Ä—É–±")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–µ—à–±–µ–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Ç—Ä–∞—Ç—ã
        expected_cashback = expense1.amount * Decimal('0.05')  # 1000 * 0.05 = 50
        
        if total_cashback == expected_cashback:
            print(f"\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –ö–µ—à–±–µ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω –¥–ª—è —Ç—Ä–∞—Ç—ã 2")
            print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_cashback} —Ä—É–±")
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {total_cashback} —Ä—É–±")
        else:
            print(f"\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù!")
            print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_cashback} —Ä—É–±")
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {total_cashback} —Ä—É–±")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è...")
        expense2.cashback_excluded = False
        await expense2.asave()
        
        total_cashback_after = await calculate_potential_cashback(
            user_id=TEST_USER_ID,
            start_date=start_date,
            end_date=end_date
        )
        
        expected_cashback_after = (expense1.amount + expense2.amount) * Decimal('0.05')  # 3000 * 0.05 = 150
        
        if total_cashback_after == expected_cashback_after:
            print(f"‚úÖ –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω, –∫–µ—à–±–µ–∫ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω")
            print(f"   –¢–µ–ø–µ—Ä—å –∫–µ—à–±–µ–∫: {total_cashback_after} —Ä—É–±")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞")
            print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_cashback_after} —Ä—É–±")
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {total_cashback_after} —Ä—É–±")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print(f"\nüßπ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        await Expense.objects.filter(profile=profile).adelete()
        await Cashback.objects.filter(profile=profile).adelete()
        await ExpenseCategory.objects.filter(profile=profile).adelete()
        await Profile.objects.filter(telegram_id=TEST_USER_ID).adelete()
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    print("=" * 60)
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–µ—à–±–µ–∫–∞")
    print("=" * 60)
    asyncio.run(test_cashback_exclusion())