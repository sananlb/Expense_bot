#!/usr/bin/env python
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤
"""
import os
import sys
import django
import asyncio
from decimal import Decimal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
django.setup()

from expenses.models import Profile, IncomeCategory, Income, IncomeCategoryKeyword
from bot.services.income import create_income_category
from bot.services.income_categorization import (
    categorize_income,
    generate_keywords_for_income_category,
    learn_from_income_category_change,
    find_category_by_keywords
)
from bot.utils.expense_parser import parse_income_message


async def test_income_ai_system():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã AI –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤"""
    
    print("=" * 60)
    print("–¢–ï–°–¢ AI –°–ò–°–¢–ï–ú–´ –î–õ–Ø –î–û–•–û–î–û–í")
    print("=" * 60)
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user_id = 999999999  # –¢–µ—Å—Ç–æ–≤—ã–π ID
    from django.db import transaction
    from asgiref.sync import sync_to_async
    
    @sync_to_async
    def get_or_create_profile():
        return Profile.objects.get_or_create(
            telegram_id=test_user_id,
            defaults={'language_code': 'ru', 'timezone': 'UTC'}
        )
    
    profile, created = await get_or_create_profile()
    print(f"\n1. –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {'—Å–æ–∑–¥–∞–Ω' if created else '–Ω–∞–π–¥–µ–Ω'}")
    
    # 2. –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:")
    
    test_categories = [
        ('üíº –ó–∞—Ä–ø–ª–∞—Ç–∞', '–∑–∞—Ä–ø–ª–∞—Ç–∞'),
        ('üíª –§—Ä–∏–ª–∞–Ω—Å', '—Ñ—Ä–∏–ª–∞–Ω—Å'),
        ('üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'),
    ]
    
    @sync_to_async
    def get_or_create_income_category(prof, fname):
        return IncomeCategory.objects.get_or_create(
            profile=prof,
            name=fname,
            defaults={'is_active': True}
        )
    
    for full_name, name in test_categories:
        category, created = await get_or_create_income_category(profile, full_name)
        
        if created:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            keywords = await generate_keywords_for_income_category(category, name)
            print(f"   - {full_name}: —Å–æ–∑–¥–∞–Ω–æ {len(keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
            if keywords:
                print(f"     –ü—Ä–∏–º–µ—Ä—ã: {', '.join(keywords[:5])}")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            @sync_to_async
            def get_existing_keywords(cat):
                return list(IncomeCategoryKeyword.objects.filter(
                    category=cat
                ).values_list('keyword', flat=True)[:5])
            
            existing_keywords = await get_existing_keywords(category)
            print(f"   - {full_name}: —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ({len(existing_keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤)")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–æ—Ö–æ–¥–æ–≤ —Å AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ—Ö–æ–¥–æ–≤ —Å AI:")
    
    test_incomes = [
        "+50000 –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –æ–∫—Ç—è–±—Ä—å",
        "–ø–æ–ª—É—á–∏–ª 10000 –∑–∞ –ø—Ä–æ–µ–∫—Ç",
        "–¥–∏–≤–∏–¥–µ–Ω–¥—ã 5000",
        "+3000 –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞",
        "–ø—Ä–µ–º–∏—è 25–∫",
        "–≤–æ–∑–≤—Ä–∞—Ç –Ω–∞–ª–æ–≥–∞ 13000",
        "+1500 –∫–µ—à–±—ç–∫",
    ]
    
    for income_text in test_incomes:
        print(f"\n   –¢–µ–∫—Å—Ç: '{income_text}'")
        
        # –ü–∞—Ä—Å–∏–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI
        result = await parse_income_message(
            income_text,
            user_id=test_user_id,
            profile=profile,
            use_ai=True
        )
        
        if result:
            print(f"   ‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:")
            print(f"      - –°—É–º–º–∞: {result['amount']} {result.get('currency', 'RUB')}")
            print(f"      - –û–ø–∏—Å–∞–Ω–∏–µ: {result['description']}")
            print(f"      - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result.get('category', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")
            print(f"      - AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è: {'–î–∞' if result.get('ai_categorized') else '–ù–µ—Ç'}")
            if result.get('ai_confidence'):
                print(f"      - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI: {result['ai_confidence']:.1%}")
        else:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å")
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º—É—é AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é
    print("\n4. –ü—Ä—è–º–∞—è AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è:")
    
    ai_result = await categorize_income(
        "–ø–æ–ª—É—á–∏–ª –≥–æ–Ω–æ—Ä–∞—Ä –∑–∞ —Å—Ç–∞—Ç—å—é 15000",
        test_user_id,
        profile
    )
    
    if ai_result:
        print(f"   –¢–µ–∫—Å—Ç: '–ø–æ–ª—É—á–∏–ª –≥–æ–Ω–æ—Ä–∞—Ä –∑–∞ —Å—Ç–∞—Ç—å—é 15000'")
        print(f"   AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ai_result.get('category')}")
        print(f"   - –°—É–º–º–∞: {ai_result.get('amount')}")
        print(f"   - –û–ø–∏—Å–∞–Ω–∏–µ: {ai_result.get('description')}")
        print(f"   - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ai_result.get('confidence', 0):.1%}")
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Ö–æ–¥
    @sync_to_async
    def create_test_income():
        cat = IncomeCategory.objects.filter(
            profile=profile,
            name__contains='–ó–∞—Ä–ø–ª–∞—Ç–∞'
        ).first()
        return Income.objects.create(
            profile=profile,
            amount=Decimal('20000'),
            description="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç—É",
            category=cat
        )
    
    test_income = await create_test_income()
    
    # –ú–µ–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é
    old_category = test_income.category
    
    @sync_to_async
    def get_new_category():
        return IncomeCategory.objects.filter(
            profile=profile,
            name__contains='–§—Ä–∏–ª–∞–Ω—Å'
        ).first()
    
    new_category = await get_new_category()
    
    if old_category and new_category:
        await learn_from_income_category_change(
            test_income,
            old_category,
            new_category
        )
        print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∞: '{test_income.description}'")
        print(f"      {old_category.name} -> {new_category.name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–æ–∑–¥–∞–Ω—ã
        @sync_to_async
        def check_new_keywords(cat):
            return IncomeCategoryKeyword.objects.filter(
                category=cat,
                keyword__icontains='–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
            ).exists()
        
        new_keywords = await check_new_keywords(new_category)
        
        if new_keywords:
            print(f"      –ù–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    print("\n6. –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:")
    
    test_texts = [
        "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        "–∑–∞—Ä–ø–ª–∞—Ç–∞ –æ—Å–Ω–æ–≤–Ω–∞—è",
        "–¥–∏–≤–∏–¥–µ–Ω–¥—ã –æ—Ç –∞–∫—Ü–∏–π"
    ]
    
    for text in test_texts:
        category = await find_category_by_keywords(text, profile)
        if category:
            print(f"   '{text}' -> {category.name}")
        else:
            print(f"   '{text}' -> –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\n7. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    @sync_to_async
    def cleanup_test_data():
        Income.objects.filter(profile=profile).delete()
        IncomeCategoryKeyword.objects.filter(category__profile=profile).delete()
        IncomeCategory.objects.filter(profile=profile).delete()
    
    await cleanup_test_data()
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    asyncio.run(test_income_ai_system())