#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
"""

import os
import sys
import django
from pathlib import Path
from datetime import datetime

# Fix encoding for Windows
if sys.platform == 'win32':
    sys.stdout.reconfigure(encoding='utf-8')

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
django.setup()

from expenses.models import Profile, ExpenseCategory, Expense, Cashback, Budget
from django.db import transaction
from django.db.models import Count, Sum, Q


def analyze_duplicates(telegram_id: int):
    """–ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        profile = Profile.objects.get(telegram_id=telegram_id)
        print(f"\n{'='*70}")
        print(f"–ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–ö–ê–¢–û–í –ö–ê–¢–ï–ì–û–†–ò–ô")
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id} (Profile ID: {profile.id})")
        print(f"{'='*70}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = profile.categories.filter(is_active=True).order_by('name_ru', 'name_en', 'id')
        total = categories.count()
        print(f"\n–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {total}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ name_ru (–æ—Å–Ω–æ–≤–Ω–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö)
        duplicates_ru = {}
        for cat in categories:
            if cat.name_ru:
                key = cat.name_ru.lower().strip()
                if key not in duplicates_ru:
                    duplicates_ru[key] = []
                duplicates_ru[key].append(cat)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ name_en (–¥–ª—è –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
        duplicates_en = {}
        for cat in categories:
            if cat.name_en:
                key = cat.name_en.lower().strip()
                if key not in duplicates_en:
                    duplicates_en[key] = []
                duplicates_en[key].append(cat)
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
        real_duplicates = {}
        
        # –î—É–±–ª–∏–∫–∞—Ç—ã –ø–æ name_ru
        for name, cats in duplicates_ru.items():
            if len(cats) > 1:
                real_duplicates[f"ru:{name}"] = cats
        
        # –î—É–±–ª–∏–∫–∞—Ç—ã –ø–æ name_en (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç name_ru)
        for name, cats in duplicates_en.items():
            if len(cats) > 1:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ –∂–µ —Å–∞–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á—Ç–æ —É–∂–µ –µ—Å—Ç—å –≤ ru –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö
                is_new_group = True
                for existing_cats in real_duplicates.values():
                    if set(c.id for c in cats) == set(c.id for c in existing_cats):
                        is_new_group = False
                        break
                if is_new_group:
                    # –¢–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ name_ru
                    cats_without_ru = [c for c in cats if not c.name_ru]
                    if len(cats_without_ru) > 1:
                        real_duplicates[f"en:{name}"] = cats_without_ru
        
        if not real_duplicates:
            print("\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return None
        
        print(f"\n‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–û –ì–†–£–ü–ü –î–£–ë–õ–ò–ö–ê–¢–û–í: {len(real_duplicates)}")
        print("-" * 70)
        
        merge_plan = []
        
        for group_key, cats in real_duplicates.items():
            lang_type = group_key.split(':')[0]
            name = group_key.split(':', 1)[1]
            
            print(f"\nüìÅ –ì—Ä—É–ø–ø–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: '{name}' ({lang_type})")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(cats)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –≥—Ä—É–ø–ø–µ
            cat_stats = []
            for cat in cats:
                # –°—á–∏—Ç–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                expenses = Expense.objects.filter(profile=profile, category=cat)
                expense_count = expenses.count()
                expense_sum = expenses.aggregate(total=Sum('amount'))['total'] or 0
                
                cashbacks = Cashback.objects.filter(profile=profile, category=cat).count()
                budgets = Budget.objects.filter(profile=profile, category=cat).count()
                
                cat_info = {
                    'category': cat,
                    'expense_count': expense_count,
                    'expense_sum': expense_sum,
                    'cashbacks': cashbacks,
                    'budgets': budgets,
                    'total_links': expense_count + cashbacks + budgets
                }
                cat_stats.append(cat_info)
                
                print(f"\n   ID={cat.id}:")
                print(f"     name: '{cat.name}'")
                print(f"     name_ru: '{cat.name_ru or 'NULL'}'")
                print(f"     name_en: '{cat.name_en or 'NULL'}'")
                print(f"     icon: '{cat.icon or 'NULL'}'")
                print(f"     –†–∞—Å—Ö–æ–¥–æ–≤: {expense_count} —à—Ç –Ω–∞ —Å—É–º–º—É {expense_sum:.0f}")
                print(f"     –ö–µ—à–±–µ–∫–æ–≤: {cashbacks}")
                print(f"     –ë—é–¥–∂–µ—Ç–æ–≤: {budgets}")
            
            # –í—ã–±–∏—Ä–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–≤—è–∑–µ–π)
            cat_stats.sort(key=lambda x: (x['total_links'], x['expense_sum'], -x['category'].id), reverse=True)
            main_cat_info = cat_stats[0]
            main_cat = main_cat_info['category']
            
            print(f"\n   ‚û°Ô∏è  –ì–õ–ê–í–ù–ê–Ø –ö–ê–¢–ï–ì–û–†–ò–Ø: ID={main_cat.id} (—Å–≤—è–∑–µ–π: {main_cat_info['total_links']})")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–∞–Ω —Å–ª–∏—è–Ω–∏—è
            for cat_info in cat_stats[1:]:
                cat = cat_info['category']
                merge_plan.append({
                    'duplicate': cat,
                    'main': main_cat,
                    'expenses_to_move': cat_info['expense_count'],
                    'cashbacks_to_move': cat_info['cashbacks'],
                    'budgets_to_move': cat_info['budgets']
                })
                print(f"   üîÑ –ë—É–¥–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ: ID={cat.id} -> ID={main_cat.id}")
        
        return merge_plan
        
    except Profile.DoesNotExist:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return None


def merge_duplicates(telegram_id: int, dry_run: bool = True):
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    merge_plan = analyze_duplicates(telegram_id)
    
    if not merge_plan:
        return
    
    print(f"\n{'='*70}")
    print(f"{'–ü–õ–ê–ù –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø (DRY RUN)' if dry_run else 'üöÄ –í–´–ü–û–õ–ù–ï–ù–ò–ï –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø'}")
    print(f"{'='*70}")
    
    try:
        profile = Profile.objects.get(telegram_id=telegram_id)
        
        total_expenses_moved = 0
        total_cashbacks_moved = 0
        total_budgets_moved = 0
        total_categories_removed = 0
        
        with transaction.atomic():
            for item in merge_plan:
                duplicate = item['duplicate']
                main = item['main']
                
                print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ ID={duplicate.id} -> ID={main.id}")
                
                if not dry_run:
                    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ä–∞—Å—Ö–æ–¥—ã
                    if item['expenses_to_move'] > 0:
                        moved = Expense.objects.filter(
                            profile=profile,
                            category=duplicate
                        ).update(category=main)
                        print(f"  ‚úì –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {moved}")
                        total_expenses_moved += moved
                    
                    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–µ—à–±–µ–∫–∏
                    if item['cashbacks_to_move'] > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —É–∂–µ –∫–µ—à–±–µ–∫–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        for cashback in Cashback.objects.filter(profile=profile, category=duplicate):
                            existing = Cashback.objects.filter(
                                profile=profile,
                                category=main,
                                month=cashback.month
                            ).first()
                            
                            if existing:
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π (–±–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç)
                                if cashback.cashback_percent > existing.cashback_percent:
                                    existing.cashback_percent = cashback.cashback_percent
                                    existing.limit_amount = cashback.limit_amount
                                    existing.save()
                                cashback.delete()
                            else:
                                # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–µ—à–±–µ–∫
                                cashback.category = main
                                cashback.save()
                            total_cashbacks_moved += 1
                        print(f"  ‚úì –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∫–µ—à–±–µ–∫–æ–≤: {total_cashbacks_moved}")
                    
                    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –±—é–¥–∂–µ—Ç—ã
                    if item['budgets_to_move'] > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —É–∂–µ –±—é–¥–∂–µ—Ç–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        for budget in Budget.objects.filter(profile=profile, category=duplicate):
                            existing = Budget.objects.filter(
                                profile=profile,
                                category=main,
                                period_type=budget.period_type
                            ).first()
                            
                            if existing:
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π (–±–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É)
                                if budget.amount > existing.amount:
                                    existing.amount = budget.amount
                                    existing.save()
                                budget.delete()
                            else:
                                # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –±—é–¥–∂–µ—Ç
                                budget.category = main
                                budget.save()
                            total_budgets_moved += 1
                        print(f"  ‚úì –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –±—é–¥–∂–µ—Ç–æ–≤: {total_budgets_moved}")
                    
                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç
                    duplicate.is_active = False
                    duplicate.save()
                    print(f"  ‚úì –ö–∞—Ç–µ–≥–æ—Ä–∏—è ID={duplicate.id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                    total_categories_removed += 1
                else:
                    print(f"  [DRY RUN] –ë—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ:")
                    print(f"    - –†–∞—Å—Ö–æ–¥–æ–≤: {item['expenses_to_move']}")
                    print(f"    - –ö–µ—à–±–µ–∫–æ–≤: {item['cashbacks_to_move']}")  
                    print(f"    - –ë—é–¥–∂–µ—Ç–æ–≤: {item['budgets_to_move']}")
                    print(f"    - –ö–∞—Ç–µ–≥–æ—Ä–∏—è ID={duplicate.id} –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                    
                    total_expenses_moved += item['expenses_to_move']
                    total_cashbacks_moved += item['cashbacks_to_move']
                    total_budgets_moved += item['budgets_to_move']
                    total_categories_removed += 1
        
        print(f"\n{'='*70}")
        print(f"{'–ò–¢–û–ì–ò (DRY RUN)' if dry_run else '‚úÖ –ò–¢–û–ì–ò –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø'}")
        print(f"{'='*70}")
        print(f"–£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {total_categories_removed}")
        print(f"–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expenses_moved}")
        print(f"–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∫–µ—à–±–µ–∫–æ–≤: {total_cashbacks_moved}")
        print(f"–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –±—é–¥–∂–µ—Ç–æ–≤: {total_budgets_moved}")
        
        if dry_run:
            print("\n‚ö†Ô∏è  –≠—Ç–æ –±—ã–ª —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–æ–Ω. –ò–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –≤–Ω–µ—Å–µ–Ω—ã.")
            print("–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å —Ñ–ª–∞–≥–æ–º --execute")
        else:
            print("\n‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
    parser.add_argument('telegram_id', type=int, help='Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    parser.add_argument('--execute', action='store_true', help='–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - dry run)')
    parser.add_argument('--analyze-only', action='store_true', help='–¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –ø–ª–∞–Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è')
    
    args = parser.parse_args()
    
    if args.analyze_only:
        analyze_duplicates(args.telegram_id)
    else:
        merge_duplicates(args.telegram_id, dry_run=not args.execute)


if __name__ == "__main__":
    # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à ID
    if len(sys.argv) == 1:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python clean_duplicate_categories.py 881292737")
        print("  python clean_duplicate_categories.py 881292737 --analyze-only")
        print("  python clean_duplicate_categories.py 881292737 --execute")
        print("\n–ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 881292737...")
        analyze_duplicates(881292737)
    else:
        main()