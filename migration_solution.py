#!/usr/bin/env python3
"""
–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–∏ SQLite -> PostgreSQL
–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö Django fixtures –¥–ª—è –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
"""
import sqlite3
import json
import os
from datetime import datetime
from collections import defaultdict

def create_django_fixtures():
    """–°–æ–∑–¥–∞–Ω–∏–µ Django fixtures –∏–∑ SQLite –±–∞–∑—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""

    conn = sqlite3.connect('/mnt/c/Users/_batman_/Desktop/expense_bot/expense_bot.db')
    cursor = conn.cursor()

    print("=" * 80)
    print("–°–û–ó–î–ê–ù–ò–ï DJANGO FIXTURES –î–õ–Ø –ú–ò–ì–†–ê–¶–ò–ò SQLite -> PostgreSQL")
    print("=" * 80)

    fixtures = []

    # 1. –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\n1. –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    cursor.execute('''
        SELECT id, telegram_id, language_code, timezone, currency, is_active,
               created_at, updated_at, beta_access_key, is_beta_tester,
               referral_code, last_activity, household_id, accepted_privacy,
               accepted_offer, referrer_id
        FROM users_profile
        ORDER BY id
    ''')

    profiles = cursor.fetchall()
    for profile in profiles:
        fixture = {
            "model": "expenses.profile",
            "pk": profile[0],
            "fields": {
                "telegram_id": profile[1],
                "language_code": profile[2] or 'ru',
                "timezone": profile[3] or 'UTC',
                "currency": profile[4] or 'RUB',
                "is_active": bool(profile[5]),
                "created_at": profile[6],
                "updated_at": profile[7],
                "beta_access_key": profile[8],
                "is_beta_tester": bool(profile[9]),
                "referral_code": profile[10],
                "last_activity": profile[11],
                "household": profile[12],
                "accepted_privacy": bool(profile[13]),
                "accepted_offer": bool(profile[14]),
                "referrer": profile[15]
            }
        }
        fixtures.append(fixture)

    print(f"   –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π")

    # 2. –ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤
    print("\n2. –≠–∫—Å–ø–æ—Ä—Ç –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤...")
    cursor.execute('''
        SELECT id, created_at, name, creator_id, is_active, max_members
        FROM households
        ORDER BY id
    ''')

    households = cursor.fetchall()
    for household in households:
        fixture = {
            "model": "expenses.household",
            "pk": household[0],
            "fields": {
                "created_at": household[1],
                "name": household[2],
                "creator": household[3],
                "is_active": bool(household[4]),
                "max_members": household[5] or 5
            }
        }
        fixtures.append(fixture)

    print(f"   –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(households)} –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤")

    # 3. –ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
    print("\n3. –≠–∫—Å–ø–æ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤...")
    cursor.execute('''
        SELECT id, name, icon, is_active, created_at, updated_at, profile_id,
               name_ru, name_en, original_language, is_translatable
        FROM expenses_category
        ORDER BY id
    ''')

    categories = cursor.fetchall()
    for category in categories:
        fixture = {
            "model": "expenses.expensecategory",
            "pk": category[0],
            "fields": {
                "profile": category[6],
                "name": category[1] or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                "icon": category[2] or 'üí∞',
                "is_active": bool(category[3]),
                "created_at": category[4],
                "updated_at": category[5],
                "name_ru": category[7],
                "name_en": category[8],
                "original_language": category[9] or 'ru',
                "is_translatable": bool(category[10]) if category[10] is not None else True
            }
        }
        fixtures.append(fixture)

    print(f"   –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

    # 4. –ú–∏–≥—Ä–∞—Ü–∏—è —Ç—Ä–∞—Ç
    print("\n4. –≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–∞—Ç...")
    cursor.execute('''
        SELECT id, profile_id, category_id, amount, currency, description,
               expense_date, expense_time, receipt_photo, ai_categorized,
               ai_confidence, created_at, updated_at, cashback_excluded,
               cashback_amount
        FROM expenses_expense
        ORDER BY id
    ''')

    expenses = cursor.fetchall()
    for expense in expenses:
        fixture = {
            "model": "expenses.expense",
            "pk": expense[0],
            "fields": {
                "profile": expense[1],
                "category": expense[2],
                "amount": str(expense[3]),  # Decimal field
                "currency": expense[4] or 'RUB',
                "description": expense[5] or '',
                "expense_date": expense[6],
                "expense_time": expense[7],
                "receipt_photo": expense[8] or '',
                "ai_categorized": bool(expense[9]),
                "ai_confidence": str(expense[10]) if expense[10] is not None else None,
                "created_at": expense[11],
                "updated_at": expense[12],
                "cashback_excluded": bool(expense[13]),
                "cashback_amount": str(expense[14]) if expense[14] is not None else "0.00"
            }
        }
        fixtures.append(fixture)

    print(f"   –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(expenses)} —Ç—Ä–∞—Ç")

    # 5. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\n5. –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    cursor.execute('''
        SELECT id, profile_id, budget_alerts_enabled, cashback_enabled,
               view_scope, created_at, updated_at
        FROM users_settings
        ORDER BY id
    ''')

    settings = cursor.fetchall()
    for setting in settings:
        fixture = {
            "model": "expenses.usersettings",
            "pk": setting[0],
            "fields": {
                "profile": setting[1],
                "budget_alerts_enabled": bool(setting[2]),
                "cashback_enabled": bool(setting[3]),
                "view_scope": setting[4] or 'personal',
                "created_at": setting[5],
                "updated_at": setting[6]
            }
        }
        fixtures.append(fixture)

    print(f"   –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(settings)} –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    # 6. –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
    print("\n6. –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å–æ–∫...")
    cursor.execute('''
        SELECT id, profile_id, type, payment_method, amount,
               telegram_payment_charge_id, start_date, end_date,
               is_active, notification_sent, created_at, updated_at
        FROM subscriptions
        ORDER BY id
    ''')

    subscriptions = cursor.fetchall()
    for subscription in subscriptions:
        fixture = {
            "model": "expenses.subscription",
            "pk": subscription[0],
            "fields": {
                "profile": subscription[1],
                "type": subscription[2] or 'month',
                "payment_method": subscription[3] or 'stars',
                "amount": subscription[4] or 0,
                "telegram_payment_charge_id": subscription[5],
                "start_date": subscription[6],
                "end_date": subscription[7],
                "is_active": bool(subscription[8]),
                "notification_sent": bool(subscription[9]),
                "created_at": subscription[10],
                "updated_at": subscription[11]
            }
        }
        fixtures.append(fixture)

    print(f"   –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(subscriptions)} –ø–æ–¥–ø–∏—Å–æ–∫")

    # 7. –ú–∏–≥—Ä–∞—Ü–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    print("\n7. –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...")
    cursor.execute('''
        SELECT id, profile_id, operation_type, expense_category_id,
               income_category_id, amount, currency, description,
               day_of_month, is_active, last_processed, created_at, updated_at
        FROM expenses_recurring_payment
        ORDER BY id
    ''')

    recurring_payments = cursor.fetchall()
    for payment in recurring_payments:
        fixture = {
            "model": "expenses.recurringpayment",
            "pk": payment[0],
            "fields": {
                "profile": payment[1],
                "operation_type": payment[2] or 'expense',
                "expense_category": payment[3],
                "income_category": payment[4],
                "amount": str(payment[5]),
                "currency": payment[6] or 'RUB',
                "description": payment[7] or '',
                "day_of_month": payment[8],
                "is_active": bool(payment[9]),
                "last_processed": payment[10],
                "created_at": payment[11],
                "updated_at": payment[12]
            }
        }
        fixtures.append(fixture)

    print(f"   –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(recurring_payments)} —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")

    # 8. –ú–∏–≥—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    print("\n8. –≠–∫—Å–ø–æ—Ä—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    cursor.execute('''
        SELECT id, category_id, keyword, language, usage_count,
               normalized_weight, created_at
        FROM expenses_category_keyword
        ORDER BY id
    ''')

    keywords = cursor.fetchall()
    for keyword in keywords:
        fixture = {
            "model": "expenses.categorykeyword",
            "pk": keyword[0],
            "fields": {
                "category": keyword[1],
                "keyword": keyword[2],
                "language": keyword[3] or 'ru',
                "usage_count": keyword[4] or 0,
                "normalized_weight": keyword[5] or 1.0,
                "created_at": keyword[6]
            }
        }
        fixtures.append(fixture)

    print(f"   –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")

    # 9. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    additional_tables = [
        ('expenses_cashback', 'expenses.cashback'),
        ('family_invites', 'expenses.familyinvite'),
        ('incomes_category', 'expenses.incomecategory'),
        ('incomes_income', 'expenses.income'),
        ('expenses_income_category_keyword', 'expenses.incomecategorykeyword'),
    ]

    for table_name, model_name in additional_tables:
        try:
            cursor.execute(f'SELECT COUNT(*) FROM {table_name}')
            count = cursor.fetchone()[0]
            if count > 0:
                print(f"\n9. –≠–∫—Å–ø–æ—Ä—Ç {table_name}...")
                cursor.execute(f'SELECT * FROM {table_name} ORDER BY id')
                cursor.execute(f'PRAGMA table_info({table_name})')
                cols = [col[1] for col in cursor.fetchall()]

                cursor.execute(f'SELECT * FROM {table_name} ORDER BY id')
                rows = cursor.fetchall()

                for row in rows:
                    row_data = dict(zip(cols, row))
                    # –£–¥–∞–ª—è–µ–º id –∏–∑ fields
                    pk = row_data.pop('id')

                    fixture = {
                        "model": model_name,
                        "pk": pk,
                        "fields": row_data
                    }
                    fixtures.append(fixture)

                print(f"   –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {table_name}")
        except sqlite3.OperationalError:
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            continue

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º fixtures
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    fixture_filename = f'complete_migration_fixtures_{timestamp}.json'

    with open(fixture_filename, 'w', encoding='utf-8') as f:
        json.dump(fixtures, f, indent=2, ensure_ascii=False, default=str)

    conn.close()

    print(f"\n" + "=" * 80)
    print(f"FIXTURES –°–û–ó–î–ê–ù–´ –£–°–ü–ï–®–ù–û!")
    print(f"–§–∞–π–ª: {fixture_filename}")
    print(f"–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(fixtures)}")
    print("=" * 80)

    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    script_content = f'''#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ fixtures –≤ PostgreSQL —á–µ—Ä–µ–∑ Django

echo "–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite..."

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose down

# –û—á–∏—â–∞–µ–º PostgreSQL –±–∞–∑—É (–û–°–¢–û–†–û–ñ–ù–û!)
echo "–û—á–∏—Å—Ç–∫–∞ PostgreSQL –±–∞–∑—ã..."
docker-compose run --rm web python manage.py flush --noinput

# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
echo "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
docker-compose run --rm web python manage.py migrate

# –ó–∞–≥—Ä—É–∂–∞–µ–º fixtures
echo "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."
docker-compose run --rm web python manage.py loaddata {fixture_filename}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏..."
docker-compose run --rm web python manage.py shell -c "
from expenses.models import Profile, Expense
profile = Profile.objects.filter(telegram_id=881292737).first()
if profile:
    print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 881292737 –Ω–∞–π–¥–µ–Ω: Profile ID {{profile.id}}')
    expenses = Expense.objects.filter(profile=profile).count()
    print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ç: {{expenses}}')
    print(f'View scope: {{profile.settings.view_scope if hasattr(profile, \"settings\") else \"–ù–ï–¢ –ù–ê–°–¢–†–û–ï–ö\"}}')
    if profile.household:
        print(f'–î–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–æ: {{profile.household.name}} (ID: {{profile.household.id}})')
        household_expenses = Expense.objects.filter(profile__household=profile.household).count()
        print(f'–í—Å–µ–≥–æ —Ç—Ä–∞—Ç –≤ –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ: {{household_expenses}}')
else:
    print('–û–®–ò–ë–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 881292737 –Ω–µ –Ω–∞–π–¥–µ–Ω!')
"

# –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose up -d

echo "–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
'''

    script_filename = f'load_fixtures_{timestamp}.sh'
    with open(script_filename, 'w') as f:
        f.write(script_content)

    os.chmod(script_filename, 0o755)

    print(f"\\n–°–û–ó–î–ê–ù –°–ö–†–ò–ü–¢ –ó–ê–ì–†–£–ó–ö–ò: {script_filename}")
    print("\\n–î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –ù–ê –°–ï–†–í–ï–†–ï –í–´–ü–û–õ–ù–ò–¢–ï:")
    print(f"1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã {fixture_filename} –∏ {script_filename} –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
    print(f"2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: ./{script_filename}")

    return fixture_filename, script_filename

def analyze_specific_user():
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 881292737"""

    conn = sqlite3.connect('/mnt/c/Users/_batman_/Desktop/expense_bot/expense_bot.db')
    cursor = conn.cursor()

    print("\\n" + "=" * 80)
    print("–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 881292737")
    print("=" * 80)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT * FROM users_profile WHERE telegram_id = 881292737')
    profile = cursor.fetchone()

    if profile:
        profile_id = profile[0]
        household_id = profile[10]  # household_id

        print(f"Profile ID: {profile_id}")
        print(f"Household ID: {household_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º view_scope
        cursor.execute('SELECT view_scope FROM users_settings WHERE profile_id = ?', (profile_id,))
        settings = cursor.fetchone()
        view_scope = settings[0] if settings else 'personal'
        print(f"View Scope: {view_scope}")

        # –õ–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã
        cursor.execute('SELECT COUNT(*) FROM expenses_expense WHERE profile_id = ?', (profile_id,))
        personal_expenses = cursor.fetchone()[0]
        print(f"\\n–õ–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã: {personal_expenses}")

        if household_id:
            # –¢—Ä–∞—Ç—ã –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–∞
            cursor.execute('''
                SELECT COUNT(*) FROM expenses_expense e
                JOIN users_profile p ON e.profile_id = p.id
                WHERE p.household_id = ?
            ''', (household_id,))
            household_expenses = cursor.fetchone()[0]
            print(f"–¢—Ä–∞—Ç—ã –≤—Å–µ–≥–æ –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–∞: {household_expenses}")

            # –£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–∞
            cursor.execute('SELECT id, telegram_id FROM users_profile WHERE household_id = ?', (household_id,))
            members = cursor.fetchall()
            print(f"\\n–£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–∞:")
            for member_id, telegram_id in members:
                cursor.execute('SELECT COUNT(*) FROM expenses_expense WHERE profile_id = ?', (member_id,))
                member_expenses = cursor.fetchone()[0]
                print(f"  {telegram_id}: {member_expenses} —Ç—Ä–∞—Ç")

        print(f"\\n–í–´–í–û–î:")
        print(f"–ï—Å–ª–∏ view_scope = 'household', –±–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å {household_expenses if household_id else personal_expenses} —Ç—Ä–∞—Ç")
        print(f"–ï—Å–ª–∏ view_scope = 'personal', –±–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å {personal_expenses} —Ç—Ä–∞—Ç")
        print(f"\\n–í PostgreSQL –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")
        print(f"1. –ù–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id = 881292737")
        print(f"2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å household_id = {household_id}")
        print(f"3. –ù–∞—Å—Ç—Ä–æ–π–∫—É view_scope = '{view_scope}'")
        print(f"4. –ù–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö {personal_expenses} –ª–∏—á–Ω—ã—Ö —Ç—Ä–∞—Ç")

    conn.close()

if __name__ == "__main__":
    fixture_file, script_file = create_django_fixtures()
    analyze_specific_user()

    print(f"\\n" + "=" * 80)
    print("–ú–ò–ì–†–ê–¶–ò–Ø –ì–û–¢–û–í–ê –ö –í–´–ü–û–õ–ù–ï–ù–ò–Æ")
    print("=" * 80)
    print(f"Fixtures —Ñ–∞–π–ª: {fixture_file}")
    print(f"–°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏: {script_file}")
    print("\\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ backup —Ç–µ–∫—É—â–µ–π PostgreSQL –±–∞–∑—ã")
    print("3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 881292737")