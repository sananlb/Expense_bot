#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –î–æ–±–∞–≤–ª—è–µ—Ç –∏–∫–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
- –ó–∞–ø–æ–ª–Ω—è–µ—Ç –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è
"""

import os
import sys
import django
from pathlib import Path
from datetime import datetime

# Fix encoding for Windows
if sys.platform == 'win32':
    sys.stdout.reconfigure(encoding='utf-8')

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
django.setup()

from expenses.models import Profile, ExpenseCategory, IncomeCategory
from django.db import transaction


# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
EXPENSE_CATEGORIES = {
    '–ø—Ä–æ–¥—É–∫—Ç—ã': {'icon': 'üõí', 'en': 'Products'},
    '–∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã': {'icon': '‚òï', 'en': 'Cafes and restaurants'},
    '–∞–∑—Å': {'icon': '‚õΩ', 'en': 'Gas stations'},
    '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': {'icon': 'üöå', 'en': 'Transport'},
    '—Ç–∞–∫—Å–∏': {'icon': 'üöï', 'en': 'Taxi'},
    '–∞–≤—Ç–æ–º–æ–±–∏–ª—å': {'icon': 'üöó', 'en': 'Car'},
    '–∂–∏–ª—å–µ': {'icon': 'üè†', 'en': 'Housing'},
    '–∂–∫—Ö': {'icon': 'üè†', 'en': 'Utilities'},
    '–∞–ø—Ç–µ–∫–∏': {'icon': 'üíä', 'en': 'Pharmacies'},
    '–º–µ–¥–∏—Ü–∏–Ω–∞': {'icon': 'üè•', 'en': 'Medicine'},
    '–∫—Ä–∞—Å–æ—Ç–∞': {'icon': 'üíÖ', 'en': 'Beauty'},
    '—Å–ø–æ—Ä—Ç –∏ —Ñ–∏—Ç–Ω–µ—Å': {'icon': '‚öΩ', 'en': 'Sports and fitness'},
    '–æ–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å': {'icon': 'üëï', 'en': 'Clothes and shoes'},
    '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': {'icon': 'üéÆ', 'en': 'Entertainment'},
    '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': {'icon': 'üìö', 'en': 'Education'},
    '–ø–æ–¥–∞—Ä–∫–∏': {'icon': 'üéÅ', 'en': 'Gifts'},
    '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': {'icon': '‚úàÔ∏è', 'en': 'Travel'},
    '—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏': {'icon': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶', 'en': 'Relatives'},
    '–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∏': {'icon': 'üì±', 'en': 'Utilities and subscriptions'},
    '–ø—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã': {'icon': 'üí∞', 'en': 'Other expenses'},
    '–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': {'icon': '‚ù§Ô∏è', 'en': 'Charity'},
    '–º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã': {'icon': 'üíº', 'en': 'My projects'},
    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–µ—Ä—Å–∏–∏
    'products': {'icon': 'üõí', 'ru': '–ü—Ä–æ–¥—É–∫—Ç—ã'},
    'cafes and restaurants': {'icon': '‚òï', 'ru': '–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã'},
    'gas stations': {'icon': '‚õΩ', 'ru': '–ê–ó–°'},
    'transport': {'icon': 'üöå', 'ru': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç'},
    'taxi': {'icon': 'üöï', 'ru': '–¢–∞–∫—Å–∏'},
    'car': {'icon': 'üöó', 'ru': '–ê–≤—Ç–æ–º–æ–±–∏–ª—å'},
    'housing': {'icon': 'üè†', 'ru': '–ñ–∏–ª—å–µ'},
    'utilities': {'icon': 'üè†', 'ru': '–ñ–ö–•'},
    'pharmacies': {'icon': 'üíä', 'ru': '–ê–ø—Ç–µ–∫–∏'},
    'medicine': {'icon': 'üè•', 'ru': '–ú–µ–¥–∏—Ü–∏–Ω–∞'},
    'beauty': {'icon': 'üíÖ', 'ru': '–ö—Ä–∞—Å–æ—Ç–∞'},
    'sports and fitness': {'icon': '‚öΩ', 'ru': '–°–ø–æ—Ä—Ç –∏ —Ñ–∏—Ç–Ω–µ—Å'},
    'clothes and shoes': {'icon': 'üëï', 'ru': '–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å'},
    'entertainment': {'icon': 'üéÆ', 'ru': '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'},
    'education': {'icon': 'üìö', 'ru': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'},
    'gifts': {'icon': 'üéÅ', 'ru': '–ü–æ–¥–∞—Ä–∫–∏'},
    'travel': {'icon': '‚úàÔ∏è', 'ru': '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'},
    'relatives': {'icon': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶', 'ru': '–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏'},
    'utilities and subscriptions': {'icon': 'üì±', 'ru': '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∏'},
    'other expenses': {'icon': 'üí∞', 'ru': '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã'},
    'charity': {'icon': '‚ù§Ô∏è', 'ru': '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'},
    'my projects': {'icon': 'üíº', 'ru': '–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã'},
}

INCOME_CATEGORIES = {
    '–∑–∞—Ä–ø–ª–∞—Ç–∞': {'icon': 'üíµ', 'en': 'Salary'},
    '–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞': {'icon': 'üíº', 'en': 'Part-time job'},
    '—Ñ—Ä–∏–ª–∞–Ω—Å': {'icon': 'üíª', 'en': 'Freelance'},
    '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏': {'icon': 'üìà', 'en': 'Investments'},
    '–ø–æ–¥–∞—Ä–∫–∏': {'icon': 'üéÅ', 'en': 'Gifts'},
    '–≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤': {'icon': '‚Ü©Ô∏è', 'en': 'Refund'},
    '–ø—Ä–æ–¥–∞–∂–∞': {'icon': 'üí∏', 'en': 'Sale'},
    '–∞—Ä–µ–Ω–¥–∞': {'icon': 'üè†', 'en': 'Rent'},
    '–ø—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã': {'icon': 'üí∞', 'en': 'Other income'},
    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–µ—Ä—Å–∏–∏
    'salary': {'icon': 'üíµ', 'ru': '–ó–∞—Ä–ø–ª–∞—Ç–∞'},
    'part-time job': {'icon': 'üíº', 'ru': '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞'},
    'freelance': {'icon': 'üíª', 'ru': '–§—Ä–∏–ª–∞–Ω—Å'},
    'investments': {'icon': 'üìà', 'ru': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'},
    'gifts': {'icon': 'üéÅ', 'ru': '–ü–æ–¥–∞—Ä–∫–∏'},
    'refund': {'icon': '‚Ü©Ô∏è', 'ru': '–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤'},
    'sale': {'icon': 'üí∏', 'ru': '–ü—Ä–æ–¥–∞–∂–∞'},
    'rent': {'icon': 'üè†', 'ru': '–ê—Ä–µ–Ω–¥–∞'},
    'other income': {'icon': 'üí∞', 'ru': '–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã'},
}


def extract_emoji(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏"""
    import re
    emoji_pattern = r'^[\U0001F000-\U0001F9FF\U00002600-\U000027BF\U0001F300-\U0001F64F\U0001F680-\U0001F6FF]+'
    match = re.match(emoji_pattern, text)
    return match.group(0) if match else None


def clean_name(text):
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç —ç–º–æ–¥–∑–∏"""
    import re
    # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
    emoji_pattern = r'^[\U0001F000-\U0001F9FF\U00002600-\U000027BF\U0001F300-\U0001F64F\U0001F680-\U0001F6FF]+\s*'
    return re.sub(emoji_pattern, '', text).strip()


def fix_expense_categories():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    print("\n" + "="*70)
    print("–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô –†–ê–°–•–û–î–û–í")
    print("="*70)
    
    categories = ExpenseCategory.objects.filter(is_active=True)
    total = categories.count()
    fixed = 0
    
    with transaction.atomic():
        for cat in categories:
            changed = False
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ name –µ—Å–ª–∏ –µ—Å—Ç—å
            current_emoji = extract_emoji(cat.name)
            clean_cat_name = clean_name(cat.name).lower()
            
            # –ï—Å–ª–∏ –≤ name –µ—Å—Ç—å —ç–º–æ–¥–∑–∏, –Ω–æ –Ω–µ—Ç –≤ icon - –ø–µ—Ä–µ–Ω–æ—Å–∏–º
            if current_emoji and not cat.icon:
                cat.icon = current_emoji
                cat.name = clean_name(cat.name)
                changed = True
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
            if clean_cat_name in EXPENSE_CATEGORIES:
                std_cat = EXPENSE_CATEGORIES[clean_cat_name]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ –Ω–µ—Ç
                if not cat.icon:
                    cat.icon = std_cat['icon']
                    changed = True
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è
                if not cat.name_ru:
                    cat.name_ru = clean_name(cat.name)
                    changed = True
                
                if not cat.name_en and 'en' in std_cat:
                    cat.name_en = std_cat['en']
                    changed = True
                    
            # –ï—Å–ª–∏ —ç—Ç–æ –∞–Ω–≥–ª–∏–π—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            elif cat.name.lower() in EXPENSE_CATEGORIES:
                std_cat = EXPENSE_CATEGORIES[cat.name.lower()]
                
                if not cat.icon:
                    cat.icon = std_cat['icon']
                    changed = True
                    
                if not cat.name_en:
                    cat.name_en = cat.name
                    changed = True
                    
                if not cat.name_ru and 'ru' in std_cat:
                    cat.name_ru = std_cat['ru']
                    changed = True
            
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ name –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if extract_emoji(cat.name):
                cat.name = clean_name(cat.name)
                changed = True
            
            # –ï—Å–ª–∏ –Ω–µ—Ç icon, —Å—Ç–∞–≤–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if not cat.icon:
                cat.icon = 'üí∞'
                changed = True
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è
            if not cat.name_ru and not cat.name_en:
                # –ï—Å–ª–∏ name –ø–æ—Ö–æ–∂ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
                if any(ord(c) > 1000 for c in cat.name):
                    cat.name_ru = cat.name
                else:
                    cat.name_en = cat.name
                changed = True
            
            if changed:
                cat.save()
                fixed += 1
                print(f"‚úì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {cat.name} (Profile: {cat.profile.telegram_id})")
    
    print(f"\n–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤: {fixed}/{total}")
    return fixed


def fix_income_categories():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤"""
    print("\n" + "="*70)
    print("–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô –î–û–•–û–î–û–í")
    print("="*70)
    
    categories = IncomeCategory.objects.filter(is_active=True)
    total = categories.count()
    fixed = 0
    
    with transaction.atomic():
        for cat in categories:
            changed = False
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ name –µ—Å–ª–∏ –µ—Å—Ç—å
            current_emoji = extract_emoji(cat.name)
            clean_cat_name = clean_name(cat.name).lower()
            
            # –ï—Å–ª–∏ –≤ name –µ—Å—Ç—å —ç–º–æ–¥–∑–∏, –Ω–æ –Ω–µ—Ç –≤ icon - –ø–µ—Ä–µ–Ω–æ—Å–∏–º
            if current_emoji and not cat.icon:
                cat.icon = current_emoji
                cat.name = clean_name(cat.name)
                changed = True
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
            if clean_cat_name in INCOME_CATEGORIES:
                std_cat = INCOME_CATEGORIES[clean_cat_name]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ –Ω–µ—Ç
                if not cat.icon:
                    cat.icon = std_cat['icon']
                    changed = True
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è
                if not cat.name_ru:
                    cat.name_ru = clean_name(cat.name)
                    changed = True
                
                if not cat.name_en and 'en' in std_cat:
                    cat.name_en = std_cat['en']
                    changed = True
                    
            # –ï—Å–ª–∏ —ç—Ç–æ –∞–Ω–≥–ª–∏–π—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            elif cat.name.lower() in INCOME_CATEGORIES:
                std_cat = INCOME_CATEGORIES[cat.name.lower()]
                
                if not cat.icon:
                    cat.icon = std_cat['icon']
                    changed = True
                    
                if not cat.name_en:
                    cat.name_en = cat.name
                    changed = True
                    
                if not cat.name_ru and 'ru' in std_cat:
                    cat.name_ru = std_cat['ru']
                    changed = True
            
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ name –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if extract_emoji(cat.name):
                cat.name = clean_name(cat.name)
                changed = True
            
            # –ï—Å–ª–∏ –Ω–µ—Ç icon, —Å—Ç–∞–≤–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if not cat.icon:
                cat.icon = 'üíµ'
                changed = True
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è
            if not cat.name_ru and not cat.name_en:
                # –ï—Å–ª–∏ name –ø–æ—Ö–æ–∂ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
                if any(ord(c) > 1000 for c in cat.name):
                    cat.name_ru = cat.name
                else:
                    cat.name_en = cat.name
                changed = True
            
            if changed:
                cat.save()
                fixed += 1
                print(f"‚úì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {cat.name} (Profile: {cat.profile.telegram_id})")
    
    print(f"\n–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤: {fixed}/{total}")
    return fixed


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "="*70)
    print("–°–ö–†–ò–ü–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô")
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
    print("="*70)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    expense_fixed = fix_expense_categories()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤  
    income_fixed = fix_income_categories()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*70)
    print("–ò–¢–û–ì–ò")
    print("="*70)
    print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤: {expense_fixed}")
    print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤: {income_fixed}")
    print(f"–í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {expense_fixed + income_fixed}")
    print("\n‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    main()