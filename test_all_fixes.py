#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""
import os
import sys
import django
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/Users/aleksejnalbantov/Desktop/expense_bot')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_bot.settings')
django.setup()

from django.utils import timezone
from expenses.models import Profile, Subscription, Expense, Income, AffiliateReferral
from bot.services.subscription import check_subscription
from bot.utils import get_user_language
import asyncio

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN = '\033[92m'
RED = '\033[91m'
YELLOW = '\033[93m'
BLUE = '\033[94m'
RESET = '\033[0m'


def print_test(name, result):
    """–í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
    status = f"{GREEN}‚úÖ PASS{RESET}" if result else f"{RED}‚ùå FAIL{RESET}"
    print(f"{status} - {name}")


def print_section(title):
    """–í—ã–≤–µ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{BLUE}{'='*60}{RESET}")
    print(f"{BLUE}{title}{RESET}")
    print(f"{BLUE}{'='*60}{RESET}")


async def test_new_user_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print_section("–¢–ï–°–¢: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user_id = '999999999'
    profile, created = await Profile.objects.aget_or_create(
        telegram_id=test_user_id
    )

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    await Expense.objects.filter(profile=profile).adelete()
    await Income.objects.filter(profile=profile).adelete()
    await Subscription.objects.filter(profile=profile).adelete()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–æ–≤—ã–º
    has_expenses = await Expense.objects.filter(profile=profile).aexists()
    has_incomes = await Income.objects.filter(profile=profile).aexists()
    has_subscriptions = await Subscription.objects.filter(profile=profile).aexists()

    is_new_user = not has_expenses and not has_incomes and not has_subscriptions
    print_test("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–æ–≤—ã–º", is_new_user)

    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç—Ä–∞—Ç—ã
    from expenses.models import ExpenseCategory
    category, _ = await ExpenseCategory.objects.aget_or_create(
        profile=profile,
        name='Test Category',
        defaults={'icon': 'üîñ'}
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞—Ç—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
    await Expense.objects.acreate(
        profile=profile,
        amount=100,
        description='Test expense',
        category=category
    )

    has_expenses = await Expense.objects.filter(profile=profile).aexists()
    is_new_user_after = not has_expenses and not has_incomes and not has_subscriptions
    print_test("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç—Ä–∞—Ç–∞–º–∏ –ù–ï —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–æ–≤—ã–º", not is_new_user_after)

    # –û—á–∏—Å—Ç–∫–∞
    await Expense.objects.filter(profile=profile).adelete()

    return True


async def test_trial_subscription_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    print_section("–¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")

    test_user_id = '999999998'
    profile, created = await Profile.objects.aget_or_create(
        telegram_id=test_user_id
    )

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    await Subscription.objects.filter(profile=profile).adelete()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    has_trial_before = await Subscription.objects.filter(
        profile=profile,
        type='trial'
    ).aexists()
    print_test("–ù–µ—Ç –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è", not has_trial_before)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É (–∫–∞–∫ –≤ privacy_accept)
    trial_end = timezone.now() + timedelta(days=7)
    trial_sub = await Subscription.objects.acreate(
        profile=profile,
        type='trial',
        payment_method='trial',
        amount=0,
        start_date=timezone.now(),
        end_date=trial_end,
        is_active=True
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
    has_trial_after = await Subscription.objects.filter(
        profile=profile,
        type='trial'
    ).aexists()
    print_test("–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞", has_trial_after)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä—É—é –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–µ –ø—Ä–æ–π–¥–µ—Ç
    existing_trial = await Subscription.objects.filter(
        profile=profile,
        type='trial'
    ).aexists()
    print_test("–ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫", existing_trial)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    is_active = await check_subscription(int(test_user_id))
    print_test("–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞", is_active)

    # –û—á–∏—Å—Ç–∫–∞
    await Subscription.objects.filter(profile=profile).adelete()

    return True


async def test_stars_subscription_amount():
    """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—É–º–º—ã Stars"""
    print_section("–¢–ï–°–¢: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É–º–º—ã Stars –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö")

    test_user_id = '999999997'
    profile, created = await Profile.objects.aget_or_create(
        telegram_id=test_user_id
    )

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—É–º–º–æ–π Stars
    stars_amount = 150
    subscription = await Subscription.objects.acreate(
        profile=profile,
        type='month',
        payment_method='stars',
        amount=stars_amount,  # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞
        telegram_payment_charge_id='test_payment_123',
        start_date=timezone.now(),
        end_date=timezone.now() + timedelta(days=30),
        is_active=True
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—É–º–º—É
    saved_sub = await Subscription.objects.aget(id=subscription.id)
    print_test(f"–°—É–º–º–∞ Stars —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ ({stars_amount})", saved_sub.amount == stars_amount)
    print_test("–°—É–º–º–∞ Stars –ù–ï —Ä–∞–≤–Ω–∞ –Ω—É–ª—é", saved_sub.amount > 0)

    # –û—á–∏—Å—Ç–∫–∞
    await Subscription.objects.filter(profile=profile).adelete()

    return True


async def test_referral_commission_first_payment_only():
    """–¢–µ—Å—Ç —á—Ç–æ –±–æ–Ω—É—Å –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞ –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂"""
    print_section("–¢–ï–°–¢: –ë–æ–Ω—É—Å –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∑–∞ –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂")

    # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    referrer_id = '999999996'
    referrer, _ = await Profile.objects.aget_or_create(
        telegram_id=referrer_id
    )

    # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    referred_id = '999999995'
    referred, _ = await Profile.objects.aget_or_create(
        telegram_id=referred_id
    )

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    await AffiliateReferral.objects.filter(referred=referred).adelete()
    await Subscription.objects.filter(profile=referred).adelete()
    await Subscription.objects.filter(profile=referrer).adelete()

    # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
    from expenses.models import AffiliateLink, AffiliateProgram

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
    try:
        program = await AffiliateProgram.objects.filter(is_active=True).afirst()
        if not program:
            program = await AffiliateProgram.objects.acreate(
                is_active=True,
                commission_permille=100  # 10% –∫–æ–º–∏—Å—Å–∏—è
            )
    except Exception:
        program = await AffiliateProgram.objects.acreate(
            is_active=True,
            commission_permille=100  # 10% –∫–æ–º–∏—Å—Å–∏—è
        )

    # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    link, _ = await AffiliateLink.objects.aget_or_create(
        profile=referrer,
        defaults={
            'affiliate_code': 'TEST123',
            'telegram_link': 'https://t.me/bot?start=ref_TEST123'
        }
    )

    # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
    referral, _ = await AffiliateReferral.objects.aget_or_create(
        referrer=referrer,
        referred=referred,
        defaults={'affiliate_link': link}
    )

    print(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å: {referrer_id} -> {referred_id}")

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂
    first_payment = await Subscription.objects.acreate(
        profile=referred,
        type='month',
        payment_method='stars',
        amount=150,
        telegram_payment_charge_id='first_payment_123',
        start_date=timezone.now(),
        end_date=timezone.now() + timedelta(days=30),
        is_active=True
    )

    from bot.services.affiliate import reward_referrer_subscription_extension

    reward1 = await reward_referrer_subscription_extension(first_payment)

    print_test(
        "–ë–æ–Ω—É—Å –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω –∑–∞ –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂",
        reward1 is not None and reward1.get('status') == 'reward_granted'
    )
    if reward1 and reward1.get('status') == 'reward_granted':
        print(
            f"  –ë–æ–Ω—É—Å: {reward1['reward_months']} –º–µ—Å., –¥–æ {reward1['reward_end'].strftime('%d.%m.%Y')}"
        )

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–π –ø–ª–∞—Ç–µ–∂ (–ø—Ä–æ–¥–ª–µ–Ω–∏–µ)
    second_payment = await Subscription.objects.acreate(
        profile=referred,
        type='month',
        payment_method='stars',
        amount=150,
        telegram_payment_charge_id='second_payment_456',
        start_date=timezone.now() + timedelta(days=30),
        end_date=timezone.now() + timedelta(days=60),
        is_active=True
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç referral –∏–∑ –ë–î –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ–Ω—É—Å–∞
    await referral.arefresh_from_db()

    reward2 = await reward_referrer_subscription_extension(second_payment)

    print_test(
        "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –±–æ–Ω—É—Å –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è",
        not reward2 or reward2.get('status') != 'reward_granted'
    )

    total_rewards = await AffiliateReferral.objects.filter(
        referred=referred,
        reward_granted=True
    ).acount()
    print_test("–û—Ç–º–µ—á–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –±–æ–Ω—É—Å", total_rewards == 1)

    # –û—á–∏—Å—Ç–∫–∞
    await AffiliateReferral.objects.filter(referred=referred).adelete()
    await Subscription.objects.filter(profile=referred).adelete()

    return True


async def test_income_categories_emojis():
    """–¢–µ—Å—Ç —ç–º–æ–¥–∑–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –¥–æ—Ö–æ–¥–æ–≤"""
    print_section("–¢–ï–°–¢: –≠–º–æ–¥–∑–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –¥–æ—Ö–æ–¥–æ–≤")

    test_user_id = '999999994'
    profile, created = await Profile.objects.aget_or_create(
        telegram_id=test_user_id
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ —Ä—É—Å—Å–∫–∏–π
    if created:
        from expenses.models import UserSettings
        await UserSettings.objects.aget_or_create(
            profile=profile,
            defaults={'language': 'ru'}
        )

    if created:
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from bot.services.category import create_default_income_categories
        await create_default_income_categories(profile)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
    from expenses.models import IncomeCategory
    categories = []
    async for cat in IncomeCategory.objects.filter(profile=profile):
        categories.append(cat)
        has_emoji = any(ord(c) > 127 for c in cat.name)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ unicode —Å–∏–º–≤–æ–ª–æ–≤ (—ç–º–æ–¥–∑–∏)
        print(f"  {cat.name} - {'‚úÖ –µ—Å—Ç—å —ç–º–æ–¥–∑–∏' if has_emoji else '‚ùå –Ω–µ—Ç —ç–º–æ–¥–∑–∏'}")

    # –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —ç–º–æ–¥–∑–∏
    all_have_emojis = all(any(ord(c) > 127 for c in cat.name) for cat in categories)
    print_test("–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏–º–µ—é—Ç —ç–º–æ–¥–∑–∏", all_have_emojis)

    return True


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print(f"\n{YELLOW}{'='*60}{RESET}")
    print(f"{YELLOW}–ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´{RESET}")
    print(f"{YELLOW}{'='*60}{RESET}")

    results = []

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    results.append(await test_new_user_detection())
    results.append(await test_trial_subscription_creation())
    results.append(await test_stars_subscription_amount())
    results.append(await test_referral_commission_first_payment_only())
    results.append(await test_income_categories_emojis())

    # –ò—Ç–æ–≥–∏
    print_section("–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    passed = sum(results)
    total = len(results)

    if passed == total:
        print(f"{GREEN}‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ ({passed}/{total}){RESET}")
    else:
        print(f"{RED}‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´ ({passed}/{total}){RESET}")

    return passed == total


if __name__ == '__main__':
    result = asyncio.run(main())
    sys.exit(0 if result else 1)
