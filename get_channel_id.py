—Å–æ#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã
–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –∏ –æ–Ω –ø–æ–∫–∞–∂–µ—Ç ID
"""

import os
import asyncio
from aiogram import Bot, Dispatcher, types
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥-–±–æ—Ç–∞
BOT_TOKEN = os.getenv('MONITORING_BOT_TOKEN')

if not BOT_TOKEN:
    print("–û–®–ò–ë–ö–ê: MONITORING_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    exit(1)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message()
async def show_chat_id(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID –ª—é–±–æ–≥–æ —á–∞—Ç–∞"""
    chat_id = message.chat.id
    chat_type = message.chat.type
    chat_title = message.chat.title or "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    
    response = (
        f"üìç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:</b>\n\n"
        f"<b>ID —á–∞—Ç–∞:</b> <code>{chat_id}</code>\n"
        f"<b>–¢–∏–ø:</b> {chat_type}\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {chat_title}\n\n"
    )
    
    if chat_type in ['group', 'supergroup']:
        response += (
            f"‚úÖ –≠—Ç–æ –≥—Ä—É–ø–ø–∞. –î–æ–±–∞–≤—å—Ç–µ –≤ .env:\n"
            f"<code>ADMIN_TELEGRAM_ID={chat_id}</code>"
        )
    elif chat_type == 'channel':
        response += (
            f"‚úÖ –≠—Ç–æ –∫–∞–Ω–∞–ª. –î–æ–±–∞–≤—å—Ç–µ –≤ .env:\n"
            f"<code>ADMIN_TELEGRAM_ID={chat_id}</code>"
        )
    else:
        response += (
            f"‚úÖ –≠—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç. –î–æ–±–∞–≤—å—Ç–µ –≤ .env:\n"
            f"<code>ADMIN_TELEGRAM_ID={chat_id}</code>"
        )
    
    await message.answer(response, parse_mode="HTML")
    
    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    print("=" * 50)
    print(f"–ü–æ–ª—É—á–µ–Ω ID —á–∞—Ç–∞: {chat_id}")
    print(f"–¢–∏–ø: {chat_type}")
    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat_title}")
    print("=" * 50)
    print(f"\n–î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:")
    print(f"ADMIN_TELEGRAM_ID={chat_id}")
    print("=" * 50)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª
@dp.my_chat_member()
async def on_chat_member_update(update: types.ChatMemberUpdated):
    """–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç"""
    chat_id = update.chat.id
    chat_type = update.chat.type
    chat_title = update.chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    
    print("=" * 50)
    print(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ {chat_type}!")
    print(f"ID: {chat_id}")
    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat_title}")
    print("=" * 50)
    print(f"\n–î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:")
    print(f"ADMIN_TELEGRAM_ID={chat_id}")
    print("=" * 50)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    try:
        await bot.send_message(
            chat_id,
            f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: <code>{chat_id}</code>\n\n"
            f"–î–æ–±–∞–≤—å—Ç–µ –≤ .env:\n"
            f"<code>ADMIN_TELEGRAM_ID={chat_id}</code>",
            parse_mode="HTML"
        )
    except:
        pass  # –ú–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 50)
    print("–ë–û–¢ –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø ID –ö–ê–ù–ê–õ–ê/–ì–†–£–ü–ü–´")
    print("=" * 50)
    print("\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
    print("1. –°–æ–∑–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É –≤ Telegram")
    print("2. –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    print("3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É")
    print("4. –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç ID")
    print("\n–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")